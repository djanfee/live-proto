// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: game/v1/game.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveGameExternalService_K9GameResourceListSync_FullMethodName          = "/game.v1.LiveGameExternalService/K9GameResourceListSync"
	LiveGameExternalService_K9GameTransferBetRecordListSync_FullMethodName = "/game.v1.LiveGameExternalService/K9GameTransferBetRecordListSync"
)

// LiveGameExternalServiceClient is the client API for LiveGameExternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameExternalServiceClient interface {
	// 获取游戏资源信息
	K9GameResourceListSync(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error)
	// 转账钱包投注记录同步
	K9GameTransferBetRecordListSync(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error)
}

type liveGameExternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameExternalServiceClient(cc grpc.ClientConnInterface) LiveGameExternalServiceClient {
	return &liveGameExternalServiceClient{cc}
}

func (c *liveGameExternalServiceClient) K9GameResourceListSync(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalService_K9GameResourceListSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalServiceClient) K9GameTransferBetRecordListSync(ctx context.Context, in *GameReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalService_K9GameTransferBetRecordListSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameExternalServiceServer is the server API for LiveGameExternalService service.
// All implementations must embed UnimplementedLiveGameExternalServiceServer
// for forward compatibility
type LiveGameExternalServiceServer interface {
	// 获取游戏资源信息
	K9GameResourceListSync(context.Context, *GameReq) (*GameReply, error)
	// 转账钱包投注记录同步
	K9GameTransferBetRecordListSync(context.Context, *GameReq) (*GameReply, error)
	mustEmbedUnimplementedLiveGameExternalServiceServer()
}

// UnimplementedLiveGameExternalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameExternalServiceServer struct {
}

func (UnimplementedLiveGameExternalServiceServer) K9GameResourceListSync(context.Context, *GameReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K9GameResourceListSync not implemented")
}
func (UnimplementedLiveGameExternalServiceServer) K9GameTransferBetRecordListSync(context.Context, *GameReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method K9GameTransferBetRecordListSync not implemented")
}
func (UnimplementedLiveGameExternalServiceServer) mustEmbedUnimplementedLiveGameExternalServiceServer() {
}

// UnsafeLiveGameExternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameExternalServiceServer will
// result in compilation errors.
type UnsafeLiveGameExternalServiceServer interface {
	mustEmbedUnimplementedLiveGameExternalServiceServer()
}

func RegisterLiveGameExternalServiceServer(s grpc.ServiceRegistrar, srv LiveGameExternalServiceServer) {
	s.RegisterService(&LiveGameExternalService_ServiceDesc, srv)
}

func _LiveGameExternalService_K9GameResourceListSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalServiceServer).K9GameResourceListSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalService_K9GameResourceListSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalServiceServer).K9GameResourceListSync(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalService_K9GameTransferBetRecordListSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalServiceServer).K9GameTransferBetRecordListSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalService_K9GameTransferBetRecordListSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalServiceServer).K9GameTransferBetRecordListSync(ctx, req.(*GameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameExternalService_ServiceDesc is the grpc.ServiceDesc for LiveGameExternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameExternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameExternalService",
	HandlerType: (*LiveGameExternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "K9GameResourceListSync",
			Handler:    _LiveGameExternalService_K9GameResourceListSync_Handler,
		},
		{
			MethodName: "K9GameTransferBetRecordListSync",
			Handler:    _LiveGameExternalService_K9GameTransferBetRecordListSync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	LiveGameExternalSingleService_EnterGame_FullMethodName    = "/game.v1.LiveGameExternalSingleService/EnterGame"
	LiveGameExternalSingleService_EnterGameTry_FullMethodName = "/game.v1.LiveGameExternalSingleService/EnterGameTry"
)

// LiveGameExternalSingleServiceClient is the client API for LiveGameExternalSingleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameExternalSingleServiceClient interface {
	// 进入游戏
	EnterGame(ctx context.Context, in *SingleEnterGameReq, opts ...grpc.CallOption) (*SingleEnterGameReply, error)
	// 进入游戏试玩
	EnterGameTry(ctx context.Context, in *SingleEnterGameTryReq, opts ...grpc.CallOption) (*SingleEnterGameTryReply, error)
}

type liveGameExternalSingleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameExternalSingleServiceClient(cc grpc.ClientConnInterface) LiveGameExternalSingleServiceClient {
	return &liveGameExternalSingleServiceClient{cc}
}

func (c *liveGameExternalSingleServiceClient) EnterGame(ctx context.Context, in *SingleEnterGameReq, opts ...grpc.CallOption) (*SingleEnterGameReply, error) {
	out := new(SingleEnterGameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalSingleService_EnterGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalSingleServiceClient) EnterGameTry(ctx context.Context, in *SingleEnterGameTryReq, opts ...grpc.CallOption) (*SingleEnterGameTryReply, error) {
	out := new(SingleEnterGameTryReply)
	err := c.cc.Invoke(ctx, LiveGameExternalSingleService_EnterGameTry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameExternalSingleServiceServer is the server API for LiveGameExternalSingleService service.
// All implementations must embed UnimplementedLiveGameExternalSingleServiceServer
// for forward compatibility
type LiveGameExternalSingleServiceServer interface {
	// 进入游戏
	EnterGame(context.Context, *SingleEnterGameReq) (*SingleEnterGameReply, error)
	// 进入游戏试玩
	EnterGameTry(context.Context, *SingleEnterGameTryReq) (*SingleEnterGameTryReply, error)
	mustEmbedUnimplementedLiveGameExternalSingleServiceServer()
}

// UnimplementedLiveGameExternalSingleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameExternalSingleServiceServer struct {
}

func (UnimplementedLiveGameExternalSingleServiceServer) EnterGame(context.Context, *SingleEnterGameReq) (*SingleEnterGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedLiveGameExternalSingleServiceServer) EnterGameTry(context.Context, *SingleEnterGameTryReq) (*SingleEnterGameTryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGameTry not implemented")
}
func (UnimplementedLiveGameExternalSingleServiceServer) mustEmbedUnimplementedLiveGameExternalSingleServiceServer() {
}

// UnsafeLiveGameExternalSingleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameExternalSingleServiceServer will
// result in compilation errors.
type UnsafeLiveGameExternalSingleServiceServer interface {
	mustEmbedUnimplementedLiveGameExternalSingleServiceServer()
}

func RegisterLiveGameExternalSingleServiceServer(s grpc.ServiceRegistrar, srv LiveGameExternalSingleServiceServer) {
	s.RegisterService(&LiveGameExternalSingleService_ServiceDesc, srv)
}

func _LiveGameExternalSingleService_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleEnterGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalSingleServiceServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalSingleService_EnterGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalSingleServiceServer).EnterGame(ctx, req.(*SingleEnterGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalSingleService_EnterGameTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleEnterGameTryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalSingleServiceServer).EnterGameTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalSingleService_EnterGameTry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalSingleServiceServer).EnterGameTry(ctx, req.(*SingleEnterGameTryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameExternalSingleService_ServiceDesc is the grpc.ServiceDesc for LiveGameExternalSingleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameExternalSingleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameExternalSingleService",
	HandlerType: (*LiveGameExternalSingleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterGame",
			Handler:    _LiveGameExternalSingleService_EnterGame_Handler,
		},
		{
			MethodName: "EnterGameTry",
			Handler:    _LiveGameExternalSingleService_EnterGameTry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	LiveGameExternalTransferService_EnterGame_FullMethodName                   = "/game.v1.LiveGameExternalTransferService/EnterGame"
	LiveGameExternalTransferService_WalletTransferInGame_FullMethodName        = "/game.v1.LiveGameExternalTransferService/WalletTransferInGame"
	LiveGameExternalTransferService_WalletTransferOutGame_FullMethodName       = "/game.v1.LiveGameExternalTransferService/WalletTransferOutGame"
	LiveGameExternalTransferService_GetWalletTransferBalance_FullMethodName    = "/game.v1.LiveGameExternalTransferService/GetWalletTransferBalance"
	LiveGameExternalTransferService_GetGameTransferOrderStatus_FullMethodName  = "/game.v1.LiveGameExternalTransferService/GetGameTransferOrderStatus"
	LiveGameExternalTransferService_GetGameTransferBetOrderList_FullMethodName = "/game.v1.LiveGameExternalTransferService/GetGameTransferBetOrderList"
)

// LiveGameExternalTransferServiceClient is the client API for LiveGameExternalTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameExternalTransferServiceClient interface {
	// 进入游戏
	EnterGame(ctx context.Context, in *TransferEnterGameReq, opts ...grpc.CallOption) (*TransferEnterGameReply, error)
	// 转账钱包转入游戏
	WalletTransferInGame(ctx context.Context, in *WalletTransferInGameReq, opts ...grpc.CallOption) (*WalletTransferInGameReply, error)
	// 转账钱包转入
	WalletTransferOutGame(ctx context.Context, in *WalletTransferOutGameReq, opts ...grpc.CallOption) (*WalletTransferOutGameReply, error)
	// 转账钱包余额查询
	GetWalletTransferBalance(ctx context.Context, in *GetWalletTransferBalanceReq, opts ...grpc.CallOption) (*GetWalletTransferBalanceReply, error)
	// 查询用户游戏转账（转入、转出）订单状态
	GetGameTransferOrderStatus(ctx context.Context, in *GetGameTransferOrderStatusReq, opts ...grpc.CallOption) (*GetGameTransferOrderStatusReply, error)
	// 查询用户游戏投注订单列表
	GetGameTransferBetOrderList(ctx context.Context, in *GetGameTransferBetOrderListReq, opts ...grpc.CallOption) (*GetGameTransferBetOrderListReply, error)
}

type liveGameExternalTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameExternalTransferServiceClient(cc grpc.ClientConnInterface) LiveGameExternalTransferServiceClient {
	return &liveGameExternalTransferServiceClient{cc}
}

func (c *liveGameExternalTransferServiceClient) EnterGame(ctx context.Context, in *TransferEnterGameReq, opts ...grpc.CallOption) (*TransferEnterGameReply, error) {
	out := new(TransferEnterGameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_EnterGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalTransferServiceClient) WalletTransferInGame(ctx context.Context, in *WalletTransferInGameReq, opts ...grpc.CallOption) (*WalletTransferInGameReply, error) {
	out := new(WalletTransferInGameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_WalletTransferInGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalTransferServiceClient) WalletTransferOutGame(ctx context.Context, in *WalletTransferOutGameReq, opts ...grpc.CallOption) (*WalletTransferOutGameReply, error) {
	out := new(WalletTransferOutGameReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_WalletTransferOutGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalTransferServiceClient) GetWalletTransferBalance(ctx context.Context, in *GetWalletTransferBalanceReq, opts ...grpc.CallOption) (*GetWalletTransferBalanceReply, error) {
	out := new(GetWalletTransferBalanceReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_GetWalletTransferBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalTransferServiceClient) GetGameTransferOrderStatus(ctx context.Context, in *GetGameTransferOrderStatusReq, opts ...grpc.CallOption) (*GetGameTransferOrderStatusReply, error) {
	out := new(GetGameTransferOrderStatusReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_GetGameTransferOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameExternalTransferServiceClient) GetGameTransferBetOrderList(ctx context.Context, in *GetGameTransferBetOrderListReq, opts ...grpc.CallOption) (*GetGameTransferBetOrderListReply, error) {
	out := new(GetGameTransferBetOrderListReply)
	err := c.cc.Invoke(ctx, LiveGameExternalTransferService_GetGameTransferBetOrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameExternalTransferServiceServer is the server API for LiveGameExternalTransferService service.
// All implementations must embed UnimplementedLiveGameExternalTransferServiceServer
// for forward compatibility
type LiveGameExternalTransferServiceServer interface {
	// 进入游戏
	EnterGame(context.Context, *TransferEnterGameReq) (*TransferEnterGameReply, error)
	// 转账钱包转入游戏
	WalletTransferInGame(context.Context, *WalletTransferInGameReq) (*WalletTransferInGameReply, error)
	// 转账钱包转入
	WalletTransferOutGame(context.Context, *WalletTransferOutGameReq) (*WalletTransferOutGameReply, error)
	// 转账钱包余额查询
	GetWalletTransferBalance(context.Context, *GetWalletTransferBalanceReq) (*GetWalletTransferBalanceReply, error)
	// 查询用户游戏转账（转入、转出）订单状态
	GetGameTransferOrderStatus(context.Context, *GetGameTransferOrderStatusReq) (*GetGameTransferOrderStatusReply, error)
	// 查询用户游戏投注订单列表
	GetGameTransferBetOrderList(context.Context, *GetGameTransferBetOrderListReq) (*GetGameTransferBetOrderListReply, error)
	mustEmbedUnimplementedLiveGameExternalTransferServiceServer()
}

// UnimplementedLiveGameExternalTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameExternalTransferServiceServer struct {
}

func (UnimplementedLiveGameExternalTransferServiceServer) EnterGame(context.Context, *TransferEnterGameReq) (*TransferEnterGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) WalletTransferInGame(context.Context, *WalletTransferInGameReq) (*WalletTransferInGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransferInGame not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) WalletTransferOutGame(context.Context, *WalletTransferOutGameReq) (*WalletTransferOutGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransferOutGame not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) GetWalletTransferBalance(context.Context, *GetWalletTransferBalanceReq) (*GetWalletTransferBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletTransferBalance not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) GetGameTransferOrderStatus(context.Context, *GetGameTransferOrderStatusReq) (*GetGameTransferOrderStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransferOrderStatus not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) GetGameTransferBetOrderList(context.Context, *GetGameTransferBetOrderListReq) (*GetGameTransferBetOrderListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransferBetOrderList not implemented")
}
func (UnimplementedLiveGameExternalTransferServiceServer) mustEmbedUnimplementedLiveGameExternalTransferServiceServer() {
}

// UnsafeLiveGameExternalTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameExternalTransferServiceServer will
// result in compilation errors.
type UnsafeLiveGameExternalTransferServiceServer interface {
	mustEmbedUnimplementedLiveGameExternalTransferServiceServer()
}

func RegisterLiveGameExternalTransferServiceServer(s grpc.ServiceRegistrar, srv LiveGameExternalTransferServiceServer) {
	s.RegisterService(&LiveGameExternalTransferService_ServiceDesc, srv)
}

func _LiveGameExternalTransferService_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEnterGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_EnterGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).EnterGame(ctx, req.(*TransferEnterGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalTransferService_WalletTransferInGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTransferInGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).WalletTransferInGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_WalletTransferInGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).WalletTransferInGame(ctx, req.(*WalletTransferInGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalTransferService_WalletTransferOutGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletTransferOutGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).WalletTransferOutGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_WalletTransferOutGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).WalletTransferOutGame(ctx, req.(*WalletTransferOutGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalTransferService_GetWalletTransferBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletTransferBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).GetWalletTransferBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_GetWalletTransferBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).GetWalletTransferBalance(ctx, req.(*GetWalletTransferBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalTransferService_GetGameTransferOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransferOrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).GetGameTransferOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_GetGameTransferOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).GetGameTransferOrderStatus(ctx, req.(*GetGameTransferOrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameExternalTransferService_GetGameTransferBetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransferBetOrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameExternalTransferServiceServer).GetGameTransferBetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameExternalTransferService_GetGameTransferBetOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameExternalTransferServiceServer).GetGameTransferBetOrderList(ctx, req.(*GetGameTransferBetOrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameExternalTransferService_ServiceDesc is the grpc.ServiceDesc for LiveGameExternalTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameExternalTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameExternalTransferService",
	HandlerType: (*LiveGameExternalTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterGame",
			Handler:    _LiveGameExternalTransferService_EnterGame_Handler,
		},
		{
			MethodName: "WalletTransferInGame",
			Handler:    _LiveGameExternalTransferService_WalletTransferInGame_Handler,
		},
		{
			MethodName: "WalletTransferOutGame",
			Handler:    _LiveGameExternalTransferService_WalletTransferOutGame_Handler,
		},
		{
			MethodName: "GetWalletTransferBalance",
			Handler:    _LiveGameExternalTransferService_GetWalletTransferBalance_Handler,
		},
		{
			MethodName: "GetGameTransferOrderStatus",
			Handler:    _LiveGameExternalTransferService_GetGameTransferOrderStatus_Handler,
		},
		{
			MethodName: "GetGameTransferBetOrderList",
			Handler:    _LiveGameExternalTransferService_GetGameTransferBetOrderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	LiveGameCallbackRpcService_GetK9GameAccessKey_FullMethodName = "/game.v1.LiveGameCallbackRpcService/GetK9GameAccessKey"
	LiveGameCallbackRpcService_GameUserBet_FullMethodName        = "/game.v1.LiveGameCallbackRpcService/GameUserBet"
	LiveGameCallbackRpcService_GameUserReward_FullMethodName     = "/game.v1.LiveGameCallbackRpcService/GameUserReward"
	LiveGameCallbackRpcService_GameUserBetCancel_FullMethodName  = "/game.v1.LiveGameCallbackRpcService/GameUserBetCancel"
	LiveGameCallbackRpcService_GameUserAdjustment_FullMethodName = "/game.v1.LiveGameCallbackRpcService/GameUserAdjustment"
	LiveGameCallbackRpcService_TransferCallback_FullMethodName   = "/game.v1.LiveGameCallbackRpcService/TransferCallback"
)

// LiveGameCallbackRpcServiceClient is the client API for LiveGameCallbackRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameCallbackRpcServiceClient interface {
	// 获取accessKey
	GetK9GameAccessKey(ctx context.Context, in *GetK9GameAccessKeyReq, opts ...grpc.CallOption) (*GetK9GameAccessKeyReply, error)
	// 游戏投注
	GameUserBet(ctx context.Context, in *GameUserBetReq, opts ...grpc.CallOption) (*GameUserBetReply, error)
	// 订单派奖
	GameUserReward(ctx context.Context, in *GameUserRewardReq, opts ...grpc.CallOption) (*GameUserRewardReply, error)
	// 取消游戏投注
	GameUserBetCancel(ctx context.Context, in *GameUserBetCancelReq, opts ...grpc.CallOption) (*GameUserBetCancelReply, error)
	// 调账
	GameUserAdjustment(ctx context.Context, in *GameUserAdjustmentReq, opts ...grpc.CallOption) (*GameUserAdjustmentReply, error)
	// 订单回调
	TransferCallback(ctx context.Context, in *TransferCallbackReq, opts ...grpc.CallOption) (*TransferCallbackReply, error)
}

type liveGameCallbackRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameCallbackRpcServiceClient(cc grpc.ClientConnInterface) LiveGameCallbackRpcServiceClient {
	return &liveGameCallbackRpcServiceClient{cc}
}

func (c *liveGameCallbackRpcServiceClient) GetK9GameAccessKey(ctx context.Context, in *GetK9GameAccessKeyReq, opts ...grpc.CallOption) (*GetK9GameAccessKeyReply, error) {
	out := new(GetK9GameAccessKeyReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_GetK9GameAccessKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameCallbackRpcServiceClient) GameUserBet(ctx context.Context, in *GameUserBetReq, opts ...grpc.CallOption) (*GameUserBetReply, error) {
	out := new(GameUserBetReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_GameUserBet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameCallbackRpcServiceClient) GameUserReward(ctx context.Context, in *GameUserRewardReq, opts ...grpc.CallOption) (*GameUserRewardReply, error) {
	out := new(GameUserRewardReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_GameUserReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameCallbackRpcServiceClient) GameUserBetCancel(ctx context.Context, in *GameUserBetCancelReq, opts ...grpc.CallOption) (*GameUserBetCancelReply, error) {
	out := new(GameUserBetCancelReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_GameUserBetCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameCallbackRpcServiceClient) GameUserAdjustment(ctx context.Context, in *GameUserAdjustmentReq, opts ...grpc.CallOption) (*GameUserAdjustmentReply, error) {
	out := new(GameUserAdjustmentReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_GameUserAdjustment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameCallbackRpcServiceClient) TransferCallback(ctx context.Context, in *TransferCallbackReq, opts ...grpc.CallOption) (*TransferCallbackReply, error) {
	out := new(TransferCallbackReply)
	err := c.cc.Invoke(ctx, LiveGameCallbackRpcService_TransferCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameCallbackRpcServiceServer is the server API for LiveGameCallbackRpcService service.
// All implementations must embed UnimplementedLiveGameCallbackRpcServiceServer
// for forward compatibility
type LiveGameCallbackRpcServiceServer interface {
	// 获取accessKey
	GetK9GameAccessKey(context.Context, *GetK9GameAccessKeyReq) (*GetK9GameAccessKeyReply, error)
	// 游戏投注
	GameUserBet(context.Context, *GameUserBetReq) (*GameUserBetReply, error)
	// 订单派奖
	GameUserReward(context.Context, *GameUserRewardReq) (*GameUserRewardReply, error)
	// 取消游戏投注
	GameUserBetCancel(context.Context, *GameUserBetCancelReq) (*GameUserBetCancelReply, error)
	// 调账
	GameUserAdjustment(context.Context, *GameUserAdjustmentReq) (*GameUserAdjustmentReply, error)
	// 订单回调
	TransferCallback(context.Context, *TransferCallbackReq) (*TransferCallbackReply, error)
	mustEmbedUnimplementedLiveGameCallbackRpcServiceServer()
}

// UnimplementedLiveGameCallbackRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameCallbackRpcServiceServer struct {
}

func (UnimplementedLiveGameCallbackRpcServiceServer) GetK9GameAccessKey(context.Context, *GetK9GameAccessKeyReq) (*GetK9GameAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK9GameAccessKey not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) GameUserBet(context.Context, *GameUserBetReq) (*GameUserBetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUserBet not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) GameUserReward(context.Context, *GameUserRewardReq) (*GameUserRewardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUserReward not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) GameUserBetCancel(context.Context, *GameUserBetCancelReq) (*GameUserBetCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUserBetCancel not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) GameUserAdjustment(context.Context, *GameUserAdjustmentReq) (*GameUserAdjustmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameUserAdjustment not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) TransferCallback(context.Context, *TransferCallbackReq) (*TransferCallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCallback not implemented")
}
func (UnimplementedLiveGameCallbackRpcServiceServer) mustEmbedUnimplementedLiveGameCallbackRpcServiceServer() {
}

// UnsafeLiveGameCallbackRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameCallbackRpcServiceServer will
// result in compilation errors.
type UnsafeLiveGameCallbackRpcServiceServer interface {
	mustEmbedUnimplementedLiveGameCallbackRpcServiceServer()
}

func RegisterLiveGameCallbackRpcServiceServer(s grpc.ServiceRegistrar, srv LiveGameCallbackRpcServiceServer) {
	s.RegisterService(&LiveGameCallbackRpcService_ServiceDesc, srv)
}

func _LiveGameCallbackRpcService_GetK9GameAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK9GameAccessKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).GetK9GameAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_GetK9GameAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).GetK9GameAccessKey(ctx, req.(*GetK9GameAccessKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameCallbackRpcService_GameUserBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameUserBetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_GameUserBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserBet(ctx, req.(*GameUserBetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameCallbackRpcService_GameUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameUserRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_GameUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserReward(ctx, req.(*GameUserRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameCallbackRpcService_GameUserBetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameUserBetCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserBetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_GameUserBetCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserBetCancel(ctx, req.(*GameUserBetCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameCallbackRpcService_GameUserAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameUserAdjustmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_GameUserAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).GameUserAdjustment(ctx, req.(*GameUserAdjustmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameCallbackRpcService_TransferCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameCallbackRpcServiceServer).TransferCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameCallbackRpcService_TransferCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameCallbackRpcServiceServer).TransferCallback(ctx, req.(*TransferCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameCallbackRpcService_ServiceDesc is the grpc.ServiceDesc for LiveGameCallbackRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameCallbackRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameCallbackRpcService",
	HandlerType: (*LiveGameCallbackRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetK9GameAccessKey",
			Handler:    _LiveGameCallbackRpcService_GetK9GameAccessKey_Handler,
		},
		{
			MethodName: "GameUserBet",
			Handler:    _LiveGameCallbackRpcService_GameUserBet_Handler,
		},
		{
			MethodName: "GameUserReward",
			Handler:    _LiveGameCallbackRpcService_GameUserReward_Handler,
		},
		{
			MethodName: "GameUserBetCancel",
			Handler:    _LiveGameCallbackRpcService_GameUserBetCancel_Handler,
		},
		{
			MethodName: "GameUserAdjustment",
			Handler:    _LiveGameCallbackRpcService_GameUserAdjustment_Handler,
		},
		{
			MethodName: "TransferCallback",
			Handler:    _LiveGameCallbackRpcService_TransferCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	LiveGameRpcInnerService_AddTripartiteTransferRecord_FullMethodName       = "/game.v1.LiveGameRpcInnerService/AddTripartiteTransferRecord"
	LiveGameRpcInnerService_AddTripartiteTransferRecordStatus_FullMethodName = "/game.v1.LiveGameRpcInnerService/AddTripartiteTransferRecordStatus"
	LiveGameRpcInnerService_ProcessMessageTransferData_FullMethodName        = "/game.v1.LiveGameRpcInnerService/ProcessMessageTransferData"
	LiveGameRpcInnerService_ProcessMessageTransferSend_FullMethodName        = "/game.v1.LiveGameRpcInnerService/ProcessMessageTransferSend"
	LiveGameRpcInnerService_TripartiteTransferRecordStatus_FullMethodName    = "/game.v1.LiveGameRpcInnerService/TripartiteTransferRecordStatus"
	LiveGameRpcInnerService_CreateCompensationFailedRecord_FullMethodName    = "/game.v1.LiveGameRpcInnerService/CreateCompensationFailedRecord"
	LiveGameRpcInnerService_AddGameBetRecord_FullMethodName                  = "/game.v1.LiveGameRpcInnerService/AddGameBetRecord"
	LiveGameRpcInnerService_AddGameSettledRecord_FullMethodName              = "/game.v1.LiveGameRpcInnerService/AddGameSettledRecord"
	LiveGameRpcInnerService_AddGameCancelRecord_FullMethodName               = "/game.v1.LiveGameRpcInnerService/AddGameCancelRecord"
	LiveGameRpcInnerService_AddGameAdjustmentRecord_FullMethodName           = "/game.v1.LiveGameRpcInnerService/AddGameAdjustmentRecord"
	LiveGameRpcInnerService_AddMqGameBetRecord_FullMethodName                = "/game.v1.LiveGameRpcInnerService/AddMqGameBetRecord"
	LiveGameRpcInnerService_AddMqGameSettledRecord_FullMethodName            = "/game.v1.LiveGameRpcInnerService/AddMqGameSettledRecord"
	LiveGameRpcInnerService_AddMqGameCancelRecord_FullMethodName             = "/game.v1.LiveGameRpcInnerService/AddMqGameCancelRecord"
	LiveGameRpcInnerService_AddMqGameAdjustmentRecord_FullMethodName         = "/game.v1.LiveGameRpcInnerService/AddMqGameAdjustmentRecord"
	LiveGameRpcInnerService_AddTransferGameBetRecord_FullMethodName          = "/game.v1.LiveGameRpcInnerService/AddTransferGameBetRecord"
	LiveGameRpcInnerService_SendGameBetBetMQ_FullMethodName                  = "/game.v1.LiveGameRpcInnerService/SendGameBetBetMQ"
	LiveGameRpcInnerService_SendGameBetBetSettlementMQ_FullMethodName        = "/game.v1.LiveGameRpcInnerService/SendGameBetBetSettlementMQ"
	LiveGameRpcInnerService_AddRecentlyGamePlay_FullMethodName               = "/game.v1.LiveGameRpcInnerService/AddRecentlyGamePlay"
)

// LiveGameRpcInnerServiceClient is the client API for LiveGameRpcInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameRpcInnerServiceClient interface {
	// 添加三方转账记录
	AddTripartiteTransferRecord(ctx context.Context, in *AddTripartiteTransferRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 变更三方转账记录状态
	AddTripartiteTransferRecordStatus(ctx context.Context, in *AddTripartiteTransferRecordStatusReq, opts ...grpc.CallOption) (*GameReply, error)
	// 转账钱包处理
	ProcessMessageTransferData(ctx context.Context, in *ProcessMessageTransferDataReq, opts ...grpc.CallOption) (*ProcessMessageTransferDataReply, error)
	ProcessMessageTransferSend(ctx context.Context, in *ProcessMessageTransferSendReq, opts ...grpc.CallOption) (*ProcessMessageTransferSendReply, error)
	// 查询某一条的状态数据
	TripartiteTransferRecordStatus(ctx context.Context, in *TripartiteTransferRecordStatusReq, opts ...grpc.CallOption) (*TripartiteTransferRecord, error)
	// 创建补偿失败记录
	CreateCompensationFailedRecord(ctx context.Context, in *CreateCompensationRecordReq, opts ...grpc.CallOption) (*CreateCompensationRecordResp, error)
	// 添加游戏下注记录(单一钱包)
	AddGameBetRecord(ctx context.Context, in *AddGameBetRecordReq, opts ...grpc.CallOption) (*AddGameBetRecordReply, error)
	// 变更游戏下注记录结算状态
	AddGameSettledRecord(ctx context.Context, in *AddGameSettledRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error)
	// 变更游戏取消记录状态
	AddGameCancelRecord(ctx context.Context, in *AddGameCancelRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error)
	// 变更游戏调整记录状态
	AddGameAdjustmentRecord(ctx context.Context, in *AddGameAdjustmentRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error)
	// 添加游戏下注记录(单一钱包)
	AddMqGameBetRecord(ctx context.Context, in *AddGameBetRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 变更游戏下注记录结算状态
	AddMqGameSettledRecord(ctx context.Context, in *AddGameSettledRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 变更游戏取消记录状态
	AddMqGameCancelRecord(ctx context.Context, in *AddGameCancelRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 变更游戏调整记录状态
	AddMqGameAdjustmentRecord(ctx context.Context, in *AddGameAdjustmentRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 添加游戏下注记录(转账钱包)
	AddTransferGameBetRecord(ctx context.Context, in *AddTransferGameBetRecordReq, opts ...grpc.CallOption) (*GameReply, error)
	// 发送游戏下注MQ
	SendGameBetBetMQ(ctx context.Context, in *SendGameBetBetMQReq, opts ...grpc.CallOption) (*GameReply, error)
	// 发送游戏下注结算MQ
	SendGameBetBetSettlementMQ(ctx context.Context, in *SendGameBetBetSettlementMQReq, opts ...grpc.CallOption) (*GameReply, error)
	// 添加最近游玩的游戏
	AddRecentlyGamePlay(ctx context.Context, in *AddRecentlyGamePlayReq, opts ...grpc.CallOption) (*GameReply, error)
}

type liveGameRpcInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameRpcInnerServiceClient(cc grpc.ClientConnInterface) LiveGameRpcInnerServiceClient {
	return &liveGameRpcInnerServiceClient{cc}
}

func (c *liveGameRpcInnerServiceClient) AddTripartiteTransferRecord(ctx context.Context, in *AddTripartiteTransferRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddTripartiteTransferRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddTripartiteTransferRecordStatus(ctx context.Context, in *AddTripartiteTransferRecordStatusReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddTripartiteTransferRecordStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) ProcessMessageTransferData(ctx context.Context, in *ProcessMessageTransferDataReq, opts ...grpc.CallOption) (*ProcessMessageTransferDataReply, error) {
	out := new(ProcessMessageTransferDataReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_ProcessMessageTransferData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) ProcessMessageTransferSend(ctx context.Context, in *ProcessMessageTransferSendReq, opts ...grpc.CallOption) (*ProcessMessageTransferSendReply, error) {
	out := new(ProcessMessageTransferSendReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_ProcessMessageTransferSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) TripartiteTransferRecordStatus(ctx context.Context, in *TripartiteTransferRecordStatusReq, opts ...grpc.CallOption) (*TripartiteTransferRecord, error) {
	out := new(TripartiteTransferRecord)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_TripartiteTransferRecordStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) CreateCompensationFailedRecord(ctx context.Context, in *CreateCompensationRecordReq, opts ...grpc.CallOption) (*CreateCompensationRecordResp, error) {
	out := new(CreateCompensationRecordResp)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_CreateCompensationFailedRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddGameBetRecord(ctx context.Context, in *AddGameBetRecordReq, opts ...grpc.CallOption) (*AddGameBetRecordReply, error) {
	out := new(AddGameBetRecordReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddGameBetRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddGameSettledRecord(ctx context.Context, in *AddGameSettledRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error) {
	out := new(AddGameBetBaseReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddGameSettledRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddGameCancelRecord(ctx context.Context, in *AddGameCancelRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error) {
	out := new(AddGameBetBaseReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddGameCancelRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddGameAdjustmentRecord(ctx context.Context, in *AddGameAdjustmentRecordReq, opts ...grpc.CallOption) (*AddGameBetBaseReply, error) {
	out := new(AddGameBetBaseReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddGameAdjustmentRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddMqGameBetRecord(ctx context.Context, in *AddGameBetRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddMqGameBetRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddMqGameSettledRecord(ctx context.Context, in *AddGameSettledRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddMqGameSettledRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddMqGameCancelRecord(ctx context.Context, in *AddGameCancelRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddMqGameCancelRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddMqGameAdjustmentRecord(ctx context.Context, in *AddGameAdjustmentRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddMqGameAdjustmentRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddTransferGameBetRecord(ctx context.Context, in *AddTransferGameBetRecordReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddTransferGameBetRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) SendGameBetBetMQ(ctx context.Context, in *SendGameBetBetMQReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_SendGameBetBetMQ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) SendGameBetBetSettlementMQ(ctx context.Context, in *SendGameBetBetSettlementMQReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_SendGameBetBetSettlementMQ_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcInnerServiceClient) AddRecentlyGamePlay(ctx context.Context, in *AddRecentlyGamePlayReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcInnerService_AddRecentlyGamePlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameRpcInnerServiceServer is the server API for LiveGameRpcInnerService service.
// All implementations must embed UnimplementedLiveGameRpcInnerServiceServer
// for forward compatibility
type LiveGameRpcInnerServiceServer interface {
	// 添加三方转账记录
	AddTripartiteTransferRecord(context.Context, *AddTripartiteTransferRecordReq) (*GameReply, error)
	// 变更三方转账记录状态
	AddTripartiteTransferRecordStatus(context.Context, *AddTripartiteTransferRecordStatusReq) (*GameReply, error)
	// 转账钱包处理
	ProcessMessageTransferData(context.Context, *ProcessMessageTransferDataReq) (*ProcessMessageTransferDataReply, error)
	ProcessMessageTransferSend(context.Context, *ProcessMessageTransferSendReq) (*ProcessMessageTransferSendReply, error)
	// 查询某一条的状态数据
	TripartiteTransferRecordStatus(context.Context, *TripartiteTransferRecordStatusReq) (*TripartiteTransferRecord, error)
	// 创建补偿失败记录
	CreateCompensationFailedRecord(context.Context, *CreateCompensationRecordReq) (*CreateCompensationRecordResp, error)
	// 添加游戏下注记录(单一钱包)
	AddGameBetRecord(context.Context, *AddGameBetRecordReq) (*AddGameBetRecordReply, error)
	// 变更游戏下注记录结算状态
	AddGameSettledRecord(context.Context, *AddGameSettledRecordReq) (*AddGameBetBaseReply, error)
	// 变更游戏取消记录状态
	AddGameCancelRecord(context.Context, *AddGameCancelRecordReq) (*AddGameBetBaseReply, error)
	// 变更游戏调整记录状态
	AddGameAdjustmentRecord(context.Context, *AddGameAdjustmentRecordReq) (*AddGameBetBaseReply, error)
	// 添加游戏下注记录(单一钱包)
	AddMqGameBetRecord(context.Context, *AddGameBetRecordReq) (*GameReply, error)
	// 变更游戏下注记录结算状态
	AddMqGameSettledRecord(context.Context, *AddGameSettledRecordReq) (*GameReply, error)
	// 变更游戏取消记录状态
	AddMqGameCancelRecord(context.Context, *AddGameCancelRecordReq) (*GameReply, error)
	// 变更游戏调整记录状态
	AddMqGameAdjustmentRecord(context.Context, *AddGameAdjustmentRecordReq) (*GameReply, error)
	// 添加游戏下注记录(转账钱包)
	AddTransferGameBetRecord(context.Context, *AddTransferGameBetRecordReq) (*GameReply, error)
	// 发送游戏下注MQ
	SendGameBetBetMQ(context.Context, *SendGameBetBetMQReq) (*GameReply, error)
	// 发送游戏下注结算MQ
	SendGameBetBetSettlementMQ(context.Context, *SendGameBetBetSettlementMQReq) (*GameReply, error)
	// 添加最近游玩的游戏
	AddRecentlyGamePlay(context.Context, *AddRecentlyGamePlayReq) (*GameReply, error)
	mustEmbedUnimplementedLiveGameRpcInnerServiceServer()
}

// UnimplementedLiveGameRpcInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameRpcInnerServiceServer struct {
}

func (UnimplementedLiveGameRpcInnerServiceServer) AddTripartiteTransferRecord(context.Context, *AddTripartiteTransferRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTripartiteTransferRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddTripartiteTransferRecordStatus(context.Context, *AddTripartiteTransferRecordStatusReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTripartiteTransferRecordStatus not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) ProcessMessageTransferData(context.Context, *ProcessMessageTransferDataReq) (*ProcessMessageTransferDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessageTransferData not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) ProcessMessageTransferSend(context.Context, *ProcessMessageTransferSendReq) (*ProcessMessageTransferSendReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessageTransferSend not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) TripartiteTransferRecordStatus(context.Context, *TripartiteTransferRecordStatusReq) (*TripartiteTransferRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TripartiteTransferRecordStatus not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) CreateCompensationFailedRecord(context.Context, *CreateCompensationRecordReq) (*CreateCompensationRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompensationFailedRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddGameBetRecord(context.Context, *AddGameBetRecordReq) (*AddGameBetRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameBetRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddGameSettledRecord(context.Context, *AddGameSettledRecordReq) (*AddGameBetBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameSettledRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddGameCancelRecord(context.Context, *AddGameCancelRecordReq) (*AddGameBetBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameCancelRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddGameAdjustmentRecord(context.Context, *AddGameAdjustmentRecordReq) (*AddGameBetBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameAdjustmentRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddMqGameBetRecord(context.Context, *AddGameBetRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMqGameBetRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddMqGameSettledRecord(context.Context, *AddGameSettledRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMqGameSettledRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddMqGameCancelRecord(context.Context, *AddGameCancelRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMqGameCancelRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddMqGameAdjustmentRecord(context.Context, *AddGameAdjustmentRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMqGameAdjustmentRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddTransferGameBetRecord(context.Context, *AddTransferGameBetRecordReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransferGameBetRecord not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) SendGameBetBetMQ(context.Context, *SendGameBetBetMQReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGameBetBetMQ not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) SendGameBetBetSettlementMQ(context.Context, *SendGameBetBetSettlementMQReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGameBetBetSettlementMQ not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) AddRecentlyGamePlay(context.Context, *AddRecentlyGamePlayReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecentlyGamePlay not implemented")
}
func (UnimplementedLiveGameRpcInnerServiceServer) mustEmbedUnimplementedLiveGameRpcInnerServiceServer() {
}

// UnsafeLiveGameRpcInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameRpcInnerServiceServer will
// result in compilation errors.
type UnsafeLiveGameRpcInnerServiceServer interface {
	mustEmbedUnimplementedLiveGameRpcInnerServiceServer()
}

func RegisterLiveGameRpcInnerServiceServer(s grpc.ServiceRegistrar, srv LiveGameRpcInnerServiceServer) {
	s.RegisterService(&LiveGameRpcInnerService_ServiceDesc, srv)
}

func _LiveGameRpcInnerService_AddTripartiteTransferRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripartiteTransferRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddTripartiteTransferRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddTripartiteTransferRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddTripartiteTransferRecord(ctx, req.(*AddTripartiteTransferRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddTripartiteTransferRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripartiteTransferRecordStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddTripartiteTransferRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddTripartiteTransferRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddTripartiteTransferRecordStatus(ctx, req.(*AddTripartiteTransferRecordStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_ProcessMessageTransferData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMessageTransferDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).ProcessMessageTransferData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_ProcessMessageTransferData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).ProcessMessageTransferData(ctx, req.(*ProcessMessageTransferDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_ProcessMessageTransferSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMessageTransferSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).ProcessMessageTransferSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_ProcessMessageTransferSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).ProcessMessageTransferSend(ctx, req.(*ProcessMessageTransferSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_TripartiteTransferRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripartiteTransferRecordStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).TripartiteTransferRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_TripartiteTransferRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).TripartiteTransferRecordStatus(ctx, req.(*TripartiteTransferRecordStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_CreateCompensationFailedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompensationRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).CreateCompensationFailedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_CreateCompensationFailedRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).CreateCompensationFailedRecord(ctx, req.(*CreateCompensationRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddGameBetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameBetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddGameBetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddGameBetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddGameBetRecord(ctx, req.(*AddGameBetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddGameSettledRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameSettledRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddGameSettledRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddGameSettledRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddGameSettledRecord(ctx, req.(*AddGameSettledRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddGameCancelRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameCancelRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddGameCancelRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddGameCancelRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddGameCancelRecord(ctx, req.(*AddGameCancelRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddGameAdjustmentRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameAdjustmentRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddGameAdjustmentRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddGameAdjustmentRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddGameAdjustmentRecord(ctx, req.(*AddGameAdjustmentRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddMqGameBetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameBetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameBetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddMqGameBetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameBetRecord(ctx, req.(*AddGameBetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddMqGameSettledRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameSettledRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameSettledRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddMqGameSettledRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameSettledRecord(ctx, req.(*AddGameSettledRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddMqGameCancelRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameCancelRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameCancelRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddMqGameCancelRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameCancelRecord(ctx, req.(*AddGameCancelRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddMqGameAdjustmentRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameAdjustmentRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameAdjustmentRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddMqGameAdjustmentRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddMqGameAdjustmentRecord(ctx, req.(*AddGameAdjustmentRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddTransferGameBetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransferGameBetRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddTransferGameBetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddTransferGameBetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddTransferGameBetRecord(ctx, req.(*AddTransferGameBetRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_SendGameBetBetMQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameBetBetMQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).SendGameBetBetMQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_SendGameBetBetMQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).SendGameBetBetMQ(ctx, req.(*SendGameBetBetMQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_SendGameBetBetSettlementMQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGameBetBetSettlementMQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).SendGameBetBetSettlementMQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_SendGameBetBetSettlementMQ_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).SendGameBetBetSettlementMQ(ctx, req.(*SendGameBetBetSettlementMQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcInnerService_AddRecentlyGamePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecentlyGamePlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcInnerServiceServer).AddRecentlyGamePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcInnerService_AddRecentlyGamePlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcInnerServiceServer).AddRecentlyGamePlay(ctx, req.(*AddRecentlyGamePlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameRpcInnerService_ServiceDesc is the grpc.ServiceDesc for LiveGameRpcInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameRpcInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameRpcInnerService",
	HandlerType: (*LiveGameRpcInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTripartiteTransferRecord",
			Handler:    _LiveGameRpcInnerService_AddTripartiteTransferRecord_Handler,
		},
		{
			MethodName: "AddTripartiteTransferRecordStatus",
			Handler:    _LiveGameRpcInnerService_AddTripartiteTransferRecordStatus_Handler,
		},
		{
			MethodName: "ProcessMessageTransferData",
			Handler:    _LiveGameRpcInnerService_ProcessMessageTransferData_Handler,
		},
		{
			MethodName: "ProcessMessageTransferSend",
			Handler:    _LiveGameRpcInnerService_ProcessMessageTransferSend_Handler,
		},
		{
			MethodName: "TripartiteTransferRecordStatus",
			Handler:    _LiveGameRpcInnerService_TripartiteTransferRecordStatus_Handler,
		},
		{
			MethodName: "CreateCompensationFailedRecord",
			Handler:    _LiveGameRpcInnerService_CreateCompensationFailedRecord_Handler,
		},
		{
			MethodName: "AddGameBetRecord",
			Handler:    _LiveGameRpcInnerService_AddGameBetRecord_Handler,
		},
		{
			MethodName: "AddGameSettledRecord",
			Handler:    _LiveGameRpcInnerService_AddGameSettledRecord_Handler,
		},
		{
			MethodName: "AddGameCancelRecord",
			Handler:    _LiveGameRpcInnerService_AddGameCancelRecord_Handler,
		},
		{
			MethodName: "AddGameAdjustmentRecord",
			Handler:    _LiveGameRpcInnerService_AddGameAdjustmentRecord_Handler,
		},
		{
			MethodName: "AddMqGameBetRecord",
			Handler:    _LiveGameRpcInnerService_AddMqGameBetRecord_Handler,
		},
		{
			MethodName: "AddMqGameSettledRecord",
			Handler:    _LiveGameRpcInnerService_AddMqGameSettledRecord_Handler,
		},
		{
			MethodName: "AddMqGameCancelRecord",
			Handler:    _LiveGameRpcInnerService_AddMqGameCancelRecord_Handler,
		},
		{
			MethodName: "AddMqGameAdjustmentRecord",
			Handler:    _LiveGameRpcInnerService_AddMqGameAdjustmentRecord_Handler,
		},
		{
			MethodName: "AddTransferGameBetRecord",
			Handler:    _LiveGameRpcInnerService_AddTransferGameBetRecord_Handler,
		},
		{
			MethodName: "SendGameBetBetMQ",
			Handler:    _LiveGameRpcInnerService_SendGameBetBetMQ_Handler,
		},
		{
			MethodName: "SendGameBetBetSettlementMQ",
			Handler:    _LiveGameRpcInnerService_SendGameBetBetSettlementMQ_Handler,
		},
		{
			MethodName: "AddRecentlyGamePlay",
			Handler:    _LiveGameRpcInnerService_AddRecentlyGamePlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}

const (
	LiveGameRpcService_GetGameCategoryListByCurr_FullMethodName       = "/game.v1.LiveGameRpcService/GetGameCategoryListByCurr"
	LiveGameRpcService_GetGameCategorySimpleListByCurr_FullMethodName = "/game.v1.LiveGameRpcService/GetGameCategorySimpleListByCurr"
	LiveGameRpcService_GetGameListByCategory_FullMethodName           = "/game.v1.LiveGameRpcService/GetGameListByCategory"
	LiveGameRpcService_GetPlatformListByCurr_FullMethodName           = "/game.v1.LiveGameRpcService/GetPlatformListByCurr"
	LiveGameRpcService_GetPlatListSimpleByCurr_FullMethodName         = "/game.v1.LiveGameRpcService/GetPlatListSimpleByCurr"
	LiveGameRpcService_GetPlatformDetails_FullMethodName              = "/game.v1.LiveGameRpcService/GetPlatformDetails"
	LiveGameRpcService_GetGameListByPlatform_FullMethodName           = "/game.v1.LiveGameRpcService/GetGameListByPlatform"
	LiveGameRpcService_GetGameListBySearch_FullMethodName             = "/game.v1.LiveGameRpcService/GetGameListBySearch"
	LiveGameRpcService_GetGameSimpleListBySearch_FullMethodName       = "/game.v1.LiveGameRpcService/GetGameSimpleListBySearch"
	LiveGameRpcService_GameAddFavorite_FullMethodName                 = "/game.v1.LiveGameRpcService/GameAddFavorite"
	LiveGameRpcService_GameRemoveFavorite_FullMethodName              = "/game.v1.LiveGameRpcService/GameRemoveFavorite"
	LiveGameRpcService_GameFavoriteList_FullMethodName                = "/game.v1.LiveGameRpcService/GameFavoriteList"
	LiveGameRpcService_GetHotGameList_FullMethodName                  = "/game.v1.LiveGameRpcService/GetHotGameList"
	LiveGameRpcService_GetRecentlyGameList_FullMethodName             = "/game.v1.LiveGameRpcService/GetRecentlyGameList"
	LiveGameRpcService_GetHotPlatformList_FullMethodName              = "/game.v1.LiveGameRpcService/GetHotPlatformList"
	LiveGameRpcService_GetGameDetails_FullMethodName                  = "/game.v1.LiveGameRpcService/GetGameDetails"
	LiveGameRpcService_GetUserFavoriteIds_FullMethodName              = "/game.v1.LiveGameRpcService/GetUserFavoriteIds"
	LiveGameRpcService_GetUserBetRecordList_FullMethodName            = "/game.v1.LiveGameRpcService/GetUserBetRecordList"
	LiveGameRpcService_GetUserBetRecordSummary_FullMethodName         = "/game.v1.LiveGameRpcService/GetUserBetRecordSummary"
	LiveGameRpcService_GetHomePlatformItems_FullMethodName            = "/game.v1.LiveGameRpcService/GetHomePlatformItems"
	LiveGameRpcService_GetHomeGameItems_FullMethodName                = "/game.v1.LiveGameRpcService/GetHomeGameItems"
	LiveGameRpcService_GetHomeGameList_FullMethodName                 = "/game.v1.LiveGameRpcService/GetHomeGameList"
	LiveGameRpcService_GetGameConfInfo_FullMethodName                 = "/game.v1.LiveGameRpcService/GetGameConfInfo"
)

// LiveGameRpcServiceClient is the client API for LiveGameRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveGameRpcServiceClient interface {
	// 通过货币获取游戏类型列表
	GetGameCategoryListByCurr(ctx context.Context, in *GetCategoryListByCurrReq, opts ...grpc.CallOption) (*GetCategoryListByCurrReply, error)
	// 通过货币获取游戏类型列表(简单信息)
	GetGameCategorySimpleListByCurr(ctx context.Context, in *GetCategoryListByCurrReq, opts ...grpc.CallOption) (*GetCategorySimpleListByCurrReply, error)
	// 通过游戏类型获取游戏列表
	GetGameListByCategory(ctx context.Context, in *GetGameListByCategoryReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 通过货币获取平台列表
	GetPlatformListByCurr(ctx context.Context, in *GetPlatformListByCurrReq, opts ...grpc.CallOption) (*GetPlatformListByCurrReply, error)
	// 通过货币获取平台列表(简单信息)
	GetPlatListSimpleByCurr(ctx context.Context, in *GetPlatformListByCurrReq, opts ...grpc.CallOption) (*GetPlatListSimpleByCurrReply, error)
	// 获取平台详情
	GetPlatformDetails(ctx context.Context, in *GamePlatformDetailsReq, opts ...grpc.CallOption) (*GamePlatformDetail, error)
	// 通过平台获取游戏列表
	GetGameListByPlatform(ctx context.Context, in *GetGameListByPlatformReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 通过搜索获取游戏列表
	GetGameListBySearch(ctx context.Context, in *GetGameListBySearchReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 通过搜索获取游戏列表 (简单信息)
	GetGameSimpleListBySearch(ctx context.Context, in *GetGameListBySearchReq, opts ...grpc.CallOption) (*GetGameSimpleListBySearchReply, error)
	// 添加收藏
	GameAddFavorite(ctx context.Context, in *GameHandelFavoriteReq, opts ...grpc.CallOption) (*GameReply, error)
	// 移除收藏
	GameRemoveFavorite(ctx context.Context, in *GameHandelFavoriteReq, opts ...grpc.CallOption) (*GameReply, error)
	// 收藏列表
	GameFavoriteList(ctx context.Context, in *GetGameFavoriteListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 热门游戏列表
	GetHotGameList(ctx context.Context, in *GetHotGameListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 最近游戏列表
	GetRecentlyGameList(ctx context.Context, in *GetGameRecentlyListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error)
	// 热门平台列表
	GetHotPlatformList(ctx context.Context, in *GetHotPlatformListReq, opts ...grpc.CallOption) (*GetHotPlatformListReply, error)
	// 根据游戏ID获取游戏详情
	GetGameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetails, error)
	// 获取用户收藏ID
	GetUserFavoriteIds(ctx context.Context, in *GetUserFavoriteIdsReq, opts ...grpc.CallOption) (*GetUserFavoriteIdsReply, error)
	// 获取用户投注记录
	GetUserBetRecordList(ctx context.Context, in *GetUserBetRecordListReq, opts ...grpc.CallOption) (*GetUserBetRecordListReply, error)
	// 获取用户投注报表
	GetUserBetRecordSummary(ctx context.Context, in *GetUserBetRecordSummaryReq, opts ...grpc.CallOption) (*GetUserBetRecordSummaryReply, error)
	// 获取首页平台详情
	GetHomePlatformItems(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GetHomePlatformItemsReply, error)
	// 获取首页游戏详情
	GetHomeGameItems(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GetHomeGameItemsReply, error)
	// 获取指定数量的游戏列表 --
	GetHomeGameList(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GameDetailsList, error)
	// 获取游戏功能配置
	GetGameConfInfo(ctx context.Context, in *GetGameConfInfoReq, opts ...grpc.CallOption) (*GetGameConfInfoReply, error)
}

type liveGameRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveGameRpcServiceClient(cc grpc.ClientConnInterface) LiveGameRpcServiceClient {
	return &liveGameRpcServiceClient{cc}
}

func (c *liveGameRpcServiceClient) GetGameCategoryListByCurr(ctx context.Context, in *GetCategoryListByCurrReq, opts ...grpc.CallOption) (*GetCategoryListByCurrReply, error) {
	out := new(GetCategoryListByCurrReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameCategoryListByCurr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameCategorySimpleListByCurr(ctx context.Context, in *GetCategoryListByCurrReq, opts ...grpc.CallOption) (*GetCategorySimpleListByCurrReply, error) {
	out := new(GetCategorySimpleListByCurrReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameCategorySimpleListByCurr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameListByCategory(ctx context.Context, in *GetGameListByCategoryReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameListByCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetPlatformListByCurr(ctx context.Context, in *GetPlatformListByCurrReq, opts ...grpc.CallOption) (*GetPlatformListByCurrReply, error) {
	out := new(GetPlatformListByCurrReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetPlatformListByCurr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetPlatListSimpleByCurr(ctx context.Context, in *GetPlatformListByCurrReq, opts ...grpc.CallOption) (*GetPlatListSimpleByCurrReply, error) {
	out := new(GetPlatListSimpleByCurrReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetPlatListSimpleByCurr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetPlatformDetails(ctx context.Context, in *GamePlatformDetailsReq, opts ...grpc.CallOption) (*GamePlatformDetail, error) {
	out := new(GamePlatformDetail)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetPlatformDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameListByPlatform(ctx context.Context, in *GetGameListByPlatformReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameListByPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameListBySearch(ctx context.Context, in *GetGameListBySearchReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameListBySearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameSimpleListBySearch(ctx context.Context, in *GetGameListBySearchReq, opts ...grpc.CallOption) (*GetGameSimpleListBySearchReply, error) {
	out := new(GetGameSimpleListBySearchReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameSimpleListBySearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GameAddFavorite(ctx context.Context, in *GameHandelFavoriteReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GameAddFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GameRemoveFavorite(ctx context.Context, in *GameHandelFavoriteReq, opts ...grpc.CallOption) (*GameReply, error) {
	out := new(GameReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GameRemoveFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GameFavoriteList(ctx context.Context, in *GetGameFavoriteListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GameFavoriteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetHotGameList(ctx context.Context, in *GetHotGameListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetHotGameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetRecentlyGameList(ctx context.Context, in *GetGameRecentlyListReq, opts ...grpc.CallOption) (*GetGameDetailsListReply, error) {
	out := new(GetGameDetailsListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetRecentlyGameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetHotPlatformList(ctx context.Context, in *GetHotPlatformListReq, opts ...grpc.CallOption) (*GetHotPlatformListReply, error) {
	out := new(GetHotPlatformListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetHotPlatformList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameDetails(ctx context.Context, in *GameDetailsReq, opts ...grpc.CallOption) (*GameDetails, error) {
	out := new(GameDetails)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetUserFavoriteIds(ctx context.Context, in *GetUserFavoriteIdsReq, opts ...grpc.CallOption) (*GetUserFavoriteIdsReply, error) {
	out := new(GetUserFavoriteIdsReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetUserFavoriteIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetUserBetRecordList(ctx context.Context, in *GetUserBetRecordListReq, opts ...grpc.CallOption) (*GetUserBetRecordListReply, error) {
	out := new(GetUserBetRecordListReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetUserBetRecordList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetUserBetRecordSummary(ctx context.Context, in *GetUserBetRecordSummaryReq, opts ...grpc.CallOption) (*GetUserBetRecordSummaryReply, error) {
	out := new(GetUserBetRecordSummaryReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetUserBetRecordSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetHomePlatformItems(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GetHomePlatformItemsReply, error) {
	out := new(GetHomePlatformItemsReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetHomePlatformItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetHomeGameItems(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GetHomeGameItemsReply, error) {
	out := new(GetHomeGameItemsReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetHomeGameItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetHomeGameList(ctx context.Context, in *GetHomeGameItemReq, opts ...grpc.CallOption) (*GameDetailsList, error) {
	out := new(GameDetailsList)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetHomeGameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveGameRpcServiceClient) GetGameConfInfo(ctx context.Context, in *GetGameConfInfoReq, opts ...grpc.CallOption) (*GetGameConfInfoReply, error) {
	out := new(GetGameConfInfoReply)
	err := c.cc.Invoke(ctx, LiveGameRpcService_GetGameConfInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveGameRpcServiceServer is the server API for LiveGameRpcService service.
// All implementations must embed UnimplementedLiveGameRpcServiceServer
// for forward compatibility
type LiveGameRpcServiceServer interface {
	// 通过货币获取游戏类型列表
	GetGameCategoryListByCurr(context.Context, *GetCategoryListByCurrReq) (*GetCategoryListByCurrReply, error)
	// 通过货币获取游戏类型列表(简单信息)
	GetGameCategorySimpleListByCurr(context.Context, *GetCategoryListByCurrReq) (*GetCategorySimpleListByCurrReply, error)
	// 通过游戏类型获取游戏列表
	GetGameListByCategory(context.Context, *GetGameListByCategoryReq) (*GetGameDetailsListReply, error)
	// 通过货币获取平台列表
	GetPlatformListByCurr(context.Context, *GetPlatformListByCurrReq) (*GetPlatformListByCurrReply, error)
	// 通过货币获取平台列表(简单信息)
	GetPlatListSimpleByCurr(context.Context, *GetPlatformListByCurrReq) (*GetPlatListSimpleByCurrReply, error)
	// 获取平台详情
	GetPlatformDetails(context.Context, *GamePlatformDetailsReq) (*GamePlatformDetail, error)
	// 通过平台获取游戏列表
	GetGameListByPlatform(context.Context, *GetGameListByPlatformReq) (*GetGameDetailsListReply, error)
	// 通过搜索获取游戏列表
	GetGameListBySearch(context.Context, *GetGameListBySearchReq) (*GetGameDetailsListReply, error)
	// 通过搜索获取游戏列表 (简单信息)
	GetGameSimpleListBySearch(context.Context, *GetGameListBySearchReq) (*GetGameSimpleListBySearchReply, error)
	// 添加收藏
	GameAddFavorite(context.Context, *GameHandelFavoriteReq) (*GameReply, error)
	// 移除收藏
	GameRemoveFavorite(context.Context, *GameHandelFavoriteReq) (*GameReply, error)
	// 收藏列表
	GameFavoriteList(context.Context, *GetGameFavoriteListReq) (*GetGameDetailsListReply, error)
	// 热门游戏列表
	GetHotGameList(context.Context, *GetHotGameListReq) (*GetGameDetailsListReply, error)
	// 最近游戏列表
	GetRecentlyGameList(context.Context, *GetGameRecentlyListReq) (*GetGameDetailsListReply, error)
	// 热门平台列表
	GetHotPlatformList(context.Context, *GetHotPlatformListReq) (*GetHotPlatformListReply, error)
	// 根据游戏ID获取游戏详情
	GetGameDetails(context.Context, *GameDetailsReq) (*GameDetails, error)
	// 获取用户收藏ID
	GetUserFavoriteIds(context.Context, *GetUserFavoriteIdsReq) (*GetUserFavoriteIdsReply, error)
	// 获取用户投注记录
	GetUserBetRecordList(context.Context, *GetUserBetRecordListReq) (*GetUserBetRecordListReply, error)
	// 获取用户投注报表
	GetUserBetRecordSummary(context.Context, *GetUserBetRecordSummaryReq) (*GetUserBetRecordSummaryReply, error)
	// 获取首页平台详情
	GetHomePlatformItems(context.Context, *GetHomeGameItemReq) (*GetHomePlatformItemsReply, error)
	// 获取首页游戏详情
	GetHomeGameItems(context.Context, *GetHomeGameItemReq) (*GetHomeGameItemsReply, error)
	// 获取指定数量的游戏列表 --
	GetHomeGameList(context.Context, *GetHomeGameItemReq) (*GameDetailsList, error)
	// 获取游戏功能配置
	GetGameConfInfo(context.Context, *GetGameConfInfoReq) (*GetGameConfInfoReply, error)
	mustEmbedUnimplementedLiveGameRpcServiceServer()
}

// UnimplementedLiveGameRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveGameRpcServiceServer struct {
}

func (UnimplementedLiveGameRpcServiceServer) GetGameCategoryListByCurr(context.Context, *GetCategoryListByCurrReq) (*GetCategoryListByCurrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameCategoryListByCurr not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameCategorySimpleListByCurr(context.Context, *GetCategoryListByCurrReq) (*GetCategorySimpleListByCurrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameCategorySimpleListByCurr not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameListByCategory(context.Context, *GetGameListByCategoryReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameListByCategory not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetPlatformListByCurr(context.Context, *GetPlatformListByCurrReq) (*GetPlatformListByCurrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformListByCurr not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetPlatListSimpleByCurr(context.Context, *GetPlatformListByCurrReq) (*GetPlatListSimpleByCurrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatListSimpleByCurr not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetPlatformDetails(context.Context, *GamePlatformDetailsReq) (*GamePlatformDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformDetails not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameListByPlatform(context.Context, *GetGameListByPlatformReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameListByPlatform not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameListBySearch(context.Context, *GetGameListBySearchReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameListBySearch not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameSimpleListBySearch(context.Context, *GetGameListBySearchReq) (*GetGameSimpleListBySearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameSimpleListBySearch not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GameAddFavorite(context.Context, *GameHandelFavoriteReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameAddFavorite not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GameRemoveFavorite(context.Context, *GameHandelFavoriteReq) (*GameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameRemoveFavorite not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GameFavoriteList(context.Context, *GetGameFavoriteListReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameFavoriteList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetHotGameList(context.Context, *GetHotGameListReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotGameList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetRecentlyGameList(context.Context, *GetGameRecentlyListReq) (*GetGameDetailsListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentlyGameList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetHotPlatformList(context.Context, *GetHotPlatformListReq) (*GetHotPlatformListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotPlatformList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameDetails(context.Context, *GameDetailsReq) (*GameDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameDetails not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetUserFavoriteIds(context.Context, *GetUserFavoriteIdsReq) (*GetUserFavoriteIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavoriteIds not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetUserBetRecordList(context.Context, *GetUserBetRecordListReq) (*GetUserBetRecordListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBetRecordList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetUserBetRecordSummary(context.Context, *GetUserBetRecordSummaryReq) (*GetUserBetRecordSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBetRecordSummary not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetHomePlatformItems(context.Context, *GetHomeGameItemReq) (*GetHomePlatformItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomePlatformItems not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetHomeGameItems(context.Context, *GetHomeGameItemReq) (*GetHomeGameItemsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeGameItems not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetHomeGameList(context.Context, *GetHomeGameItemReq) (*GameDetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeGameList not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) GetGameConfInfo(context.Context, *GetGameConfInfoReq) (*GetGameConfInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameConfInfo not implemented")
}
func (UnimplementedLiveGameRpcServiceServer) mustEmbedUnimplementedLiveGameRpcServiceServer() {}

// UnsafeLiveGameRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveGameRpcServiceServer will
// result in compilation errors.
type UnsafeLiveGameRpcServiceServer interface {
	mustEmbedUnimplementedLiveGameRpcServiceServer()
}

func RegisterLiveGameRpcServiceServer(s grpc.ServiceRegistrar, srv LiveGameRpcServiceServer) {
	s.RegisterService(&LiveGameRpcService_ServiceDesc, srv)
}

func _LiveGameRpcService_GetGameCategoryListByCurr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryListByCurrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameCategoryListByCurr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameCategoryListByCurr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameCategoryListByCurr(ctx, req.(*GetCategoryListByCurrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameCategorySimpleListByCurr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryListByCurrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameCategorySimpleListByCurr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameCategorySimpleListByCurr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameCategorySimpleListByCurr(ctx, req.(*GetCategoryListByCurrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameListByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameListByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameListByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameListByCategory(ctx, req.(*GetGameListByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetPlatformListByCurr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformListByCurrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetPlatformListByCurr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetPlatformListByCurr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetPlatformListByCurr(ctx, req.(*GetPlatformListByCurrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetPlatListSimpleByCurr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformListByCurrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetPlatListSimpleByCurr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetPlatListSimpleByCurr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetPlatListSimpleByCurr(ctx, req.(*GetPlatformListByCurrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetPlatformDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlatformDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetPlatformDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetPlatformDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetPlatformDetails(ctx, req.(*GamePlatformDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameListByPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListByPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameListByPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameListByPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameListByPlatform(ctx, req.(*GetGameListByPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameListBySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListBySearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameListBySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameListBySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameListBySearch(ctx, req.(*GetGameListBySearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameSimpleListBySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListBySearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameSimpleListBySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameSimpleListBySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameSimpleListBySearch(ctx, req.(*GetGameListBySearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GameAddFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameHandelFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GameAddFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GameAddFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GameAddFavorite(ctx, req.(*GameHandelFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GameRemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameHandelFavoriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GameRemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GameRemoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GameRemoveFavorite(ctx, req.(*GameHandelFavoriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GameFavoriteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameFavoriteListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GameFavoriteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GameFavoriteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GameFavoriteList(ctx, req.(*GetGameFavoriteListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetHotGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotGameListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetHotGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetHotGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetHotGameList(ctx, req.(*GetHotGameListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetRecentlyGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRecentlyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetRecentlyGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetRecentlyGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetRecentlyGameList(ctx, req.(*GetGameRecentlyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetHotPlatformList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotPlatformListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetHotPlatformList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetHotPlatformList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetHotPlatformList(ctx, req.(*GetHotPlatformListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameDetails(ctx, req.(*GameDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetUserFavoriteIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserFavoriteIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetUserFavoriteIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetUserFavoriteIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetUserFavoriteIds(ctx, req.(*GetUserFavoriteIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetUserBetRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBetRecordListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetUserBetRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetUserBetRecordList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetUserBetRecordList(ctx, req.(*GetUserBetRecordListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetUserBetRecordSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBetRecordSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetUserBetRecordSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetUserBetRecordSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetUserBetRecordSummary(ctx, req.(*GetUserBetRecordSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetHomePlatformItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeGameItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetHomePlatformItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetHomePlatformItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetHomePlatformItems(ctx, req.(*GetHomeGameItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetHomeGameItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeGameItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetHomeGameItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetHomeGameItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetHomeGameItems(ctx, req.(*GetHomeGameItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetHomeGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeGameItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetHomeGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetHomeGameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetHomeGameList(ctx, req.(*GetHomeGameItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveGameRpcService_GetGameConfInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameConfInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveGameRpcServiceServer).GetGameConfInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveGameRpcService_GetGameConfInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveGameRpcServiceServer).GetGameConfInfo(ctx, req.(*GetGameConfInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveGameRpcService_ServiceDesc is the grpc.ServiceDesc for LiveGameRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveGameRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.v1.LiveGameRpcService",
	HandlerType: (*LiveGameRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameCategoryListByCurr",
			Handler:    _LiveGameRpcService_GetGameCategoryListByCurr_Handler,
		},
		{
			MethodName: "GetGameCategorySimpleListByCurr",
			Handler:    _LiveGameRpcService_GetGameCategorySimpleListByCurr_Handler,
		},
		{
			MethodName: "GetGameListByCategory",
			Handler:    _LiveGameRpcService_GetGameListByCategory_Handler,
		},
		{
			MethodName: "GetPlatformListByCurr",
			Handler:    _LiveGameRpcService_GetPlatformListByCurr_Handler,
		},
		{
			MethodName: "GetPlatListSimpleByCurr",
			Handler:    _LiveGameRpcService_GetPlatListSimpleByCurr_Handler,
		},
		{
			MethodName: "GetPlatformDetails",
			Handler:    _LiveGameRpcService_GetPlatformDetails_Handler,
		},
		{
			MethodName: "GetGameListByPlatform",
			Handler:    _LiveGameRpcService_GetGameListByPlatform_Handler,
		},
		{
			MethodName: "GetGameListBySearch",
			Handler:    _LiveGameRpcService_GetGameListBySearch_Handler,
		},
		{
			MethodName: "GetGameSimpleListBySearch",
			Handler:    _LiveGameRpcService_GetGameSimpleListBySearch_Handler,
		},
		{
			MethodName: "GameAddFavorite",
			Handler:    _LiveGameRpcService_GameAddFavorite_Handler,
		},
		{
			MethodName: "GameRemoveFavorite",
			Handler:    _LiveGameRpcService_GameRemoveFavorite_Handler,
		},
		{
			MethodName: "GameFavoriteList",
			Handler:    _LiveGameRpcService_GameFavoriteList_Handler,
		},
		{
			MethodName: "GetHotGameList",
			Handler:    _LiveGameRpcService_GetHotGameList_Handler,
		},
		{
			MethodName: "GetRecentlyGameList",
			Handler:    _LiveGameRpcService_GetRecentlyGameList_Handler,
		},
		{
			MethodName: "GetHotPlatformList",
			Handler:    _LiveGameRpcService_GetHotPlatformList_Handler,
		},
		{
			MethodName: "GetGameDetails",
			Handler:    _LiveGameRpcService_GetGameDetails_Handler,
		},
		{
			MethodName: "GetUserFavoriteIds",
			Handler:    _LiveGameRpcService_GetUserFavoriteIds_Handler,
		},
		{
			MethodName: "GetUserBetRecordList",
			Handler:    _LiveGameRpcService_GetUserBetRecordList_Handler,
		},
		{
			MethodName: "GetUserBetRecordSummary",
			Handler:    _LiveGameRpcService_GetUserBetRecordSummary_Handler,
		},
		{
			MethodName: "GetHomePlatformItems",
			Handler:    _LiveGameRpcService_GetHomePlatformItems_Handler,
		},
		{
			MethodName: "GetHomeGameItems",
			Handler:    _LiveGameRpcService_GetHomeGameItems_Handler,
		},
		{
			MethodName: "GetHomeGameList",
			Handler:    _LiveGameRpcService_GetHomeGameList_Handler,
		},
		{
			MethodName: "GetGameConfInfo",
			Handler:    _LiveGameRpcService_GetGameConfInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/v1/game.proto",
}
