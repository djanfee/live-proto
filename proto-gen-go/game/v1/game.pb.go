// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.3
// source: game/v1/game.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameReq) Reset() {
	*x = GameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReq) ProtoMessage() {}

func (x *GameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReq.ProtoReflect.Descriptor instead.
func (*GameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{0}
}

type GameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameReply) Reset() {
	*x = GameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReply) ProtoMessage() {}

func (x *GameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReply.ProtoReflect.Descriptor instead.
func (*GameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{1}
}

type SingleEnterGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	ShowScene    string `protobuf:"bytes,8,opt,name=show_scene,json=showScene,proto3" json:"show_scene,omitempty"`          //游戏进入场景
	OsType       string `protobuf:"bytes,9,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,10,opt,name=referer,proto3" json:"referer,omitempty"`                              //请求页面
	UserIp       string `protobuf:"bytes,11,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
}

func (x *SingleEnterGameReq) Reset() {
	*x = SingleEnterGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEnterGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameReq) ProtoMessage() {}

func (x *SingleEnterGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameReq.ProtoReflect.Descriptor instead.
func (*SingleEnterGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{2}
}

func (x *SingleEnterGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *SingleEnterGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *SingleEnterGameReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SingleEnterGameReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *SingleEnterGameReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SingleEnterGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SingleEnterGameReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SingleEnterGameReq) GetShowScene() string {
	if x != nil {
		return x.ShowScene
	}
	return ""
}

func (x *SingleEnterGameReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *SingleEnterGameReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *SingleEnterGameReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type SingleEnterGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *SingleEnterGameReply) Reset() {
	*x = SingleEnterGameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEnterGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameReply) ProtoMessage() {}

func (x *SingleEnterGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameReply.ProtoReflect.Descriptor instead.
func (*SingleEnterGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{3}
}

func (x *SingleEnterGameReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SingleEnterGameTryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	OsType       string `protobuf:"bytes,8,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,9,opt,name=referer,proto3" json:"referer,omitempty"`                               //请求页面
	UserIp       string `protobuf:"bytes,10,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
	Nickname     string `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserAvatar   string `protobuf:"bytes,12,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
}

func (x *SingleEnterGameTryReq) Reset() {
	*x = SingleEnterGameTryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEnterGameTryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameTryReq) ProtoMessage() {}

func (x *SingleEnterGameTryReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameTryReq.ProtoReflect.Descriptor instead.
func (*SingleEnterGameTryReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{4}
}

func (x *SingleEnterGameTryReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

type SingleEnterGameTryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *SingleEnterGameTryReply) Reset() {
	*x = SingleEnterGameTryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEnterGameTryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameTryReply) ProtoMessage() {}

func (x *SingleEnterGameTryReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameTryReply.ProtoReflect.Descriptor instead.
func (*SingleEnterGameTryReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{5}
}

func (x *SingleEnterGameTryReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TransferEnterGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	ShowScene    string `protobuf:"bytes,8,opt,name=show_scene,json=showScene,proto3" json:"show_scene,omitempty"`          //游戏进入场景
	OsType       string `protobuf:"bytes,9,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,10,opt,name=referer,proto3" json:"referer,omitempty"`                              //请求页面
	UserIp       string `protobuf:"bytes,11,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
}

func (x *TransferEnterGameReq) Reset() {
	*x = TransferEnterGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferEnterGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferEnterGameReq) ProtoMessage() {}

func (x *TransferEnterGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferEnterGameReq.ProtoReflect.Descriptor instead.
func (*TransferEnterGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{6}
}

func (x *TransferEnterGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *TransferEnterGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *TransferEnterGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransferEnterGameReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *TransferEnterGameReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TransferEnterGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *TransferEnterGameReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *TransferEnterGameReq) GetShowScene() string {
	if x != nil {
		return x.ShowScene
	}
	return ""
}

func (x *TransferEnterGameReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *TransferEnterGameReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *TransferEnterGameReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type TransferEnterGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *TransferEnterGameReply) Reset() {
	*x = TransferEnterGameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferEnterGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferEnterGameReply) ProtoMessage() {}

func (x *TransferEnterGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferEnterGameReply.ProtoReflect.Descriptor instead.
func (*TransferEnterGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{7}
}

func (x *TransferEnterGameReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WalletTransferInGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                //金额  整数且大于0
	GameOrderNo  string `protobuf:"bytes,6,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"`  // 订单号
}

func (x *WalletTransferInGameReq) Reset() {
	*x = WalletTransferInGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferInGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferInGameReq) ProtoMessage() {}

func (x *WalletTransferInGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferInGameReq.ProtoReflect.Descriptor instead.
func (*WalletTransferInGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{8}
}

func (x *WalletTransferInGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *WalletTransferInGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *WalletTransferInGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferInGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WalletTransferInGameReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WalletTransferInGameReq) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

type WalletTransferInGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                               //成功状态， true：成功，false 失败
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 //用户ID
	Amount      int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                               //金额
	GameOrderNo string `protobuf:"bytes,4,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"` //转入订单编号
	ErrMsg      string `protobuf:"bytes,5,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                  //失败消息
}

func (x *WalletTransferInGameReply) Reset() {
	*x = WalletTransferInGameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferInGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferInGameReply) ProtoMessage() {}

func (x *WalletTransferInGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferInGameReply.ProtoReflect.Descriptor instead.
func (*WalletTransferInGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{9}
}

func (x *WalletTransferInGameReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WalletTransferInGameReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferInGameReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WalletTransferInGameReply) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *WalletTransferInGameReply) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type WalletTransferOutGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`                                 //金额
	GameOrderNo  string `protobuf:"bytes,6,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"`  // 订单号
}

func (x *WalletTransferOutGameReq) Reset() {
	*x = WalletTransferOutGameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferOutGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferOutGameReq) ProtoMessage() {}

func (x *WalletTransferOutGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferOutGameReq.ProtoReflect.Descriptor instead.
func (*WalletTransferOutGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{10}
}

func (x *WalletTransferOutGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WalletTransferOutGameReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WalletTransferOutGameReq) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

type WalletTransferOutGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                               //成功状态， true：成功，false 失败
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 //用户ID
	Amount      string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                //金额
	GameOrderNo string `protobuf:"bytes,4,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"` //转出订单编号
	ErrMsg      string `protobuf:"bytes,5,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                  //失败消息
}

func (x *WalletTransferOutGameReply) Reset() {
	*x = WalletTransferOutGameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletTransferOutGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferOutGameReply) ProtoMessage() {}

func (x *WalletTransferOutGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferOutGameReply.ProtoReflect.Descriptor instead.
func (*WalletTransferOutGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{11}
}

func (x *WalletTransferOutGameReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WalletTransferOutGameReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferOutGameReply) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WalletTransferOutGameReply) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *WalletTransferOutGameReply) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type GetWalletTransferBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey          int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`                              //游戏平台key  唯一标识
	GameKey              int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`                                          //
	TripartitePlatformId int64  `protobuf:"varint,3,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方平台ID
	UserId               int64  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             //用户ID
	CurrencyCode         string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            //货币Code
}

func (x *GetWalletTransferBalanceReq) Reset() {
	*x = GetWalletTransferBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletTransferBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransferBalanceReq) ProtoMessage() {}

func (x *GetWalletTransferBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransferBalanceReq.ProtoReflect.Descriptor instead.
func (*GetWalletTransferBalanceReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{12}
}

func (x *GetWalletTransferBalanceReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetWalletTransferBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                 //金额
}

func (x *GetWalletTransferBalanceReply) Reset() {
	*x = GetWalletTransferBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletTransferBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransferBalanceReply) ProtoMessage() {}

func (x *GetWalletTransferBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransferBalanceReply.ProtoReflect.Descriptor instead.
func (*GetWalletTransferBalanceReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{13}
}

func (x *GetWalletTransferBalanceReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetWalletTransferBalanceReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetWalletTransferBalanceReply) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetGameTransferOrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey string   `protobuf:"bytes,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"` //游戏平台key  唯一标识
	OrderNo     []string `protobuf:"bytes,2,rep,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`             //订单编号 最多100个
}

func (x *GetGameTransferOrderStatusReq) Reset() {
	*x = GetGameTransferOrderStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameTransferOrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReq) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReq.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{14}
}

func (x *GetGameTransferOrderStatusReq) GetPlatformKey() string {
	if x != nil {
		return x.PlatformKey
	}
	return ""
}

func (x *GetGameTransferOrderStatusReq) GetOrderNo() []string {
	if x != nil {
		return x.OrderNo
	}
	return nil
}

type GetGameTransferOrderStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders map[string]*GetGameTransferOrderStatusReplyOrderInfo `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetGameTransferOrderStatusReply) Reset() {
	*x = GetGameTransferOrderStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameTransferOrderStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReply) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReply.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{15}
}

func (x *GetGameTransferOrderStatusReply) GetOrders() map[string]*GetGameTransferOrderStatusReplyOrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

type GetGameTransferBetOrderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间 查询玩家投注记录，按最后更新时间查询，最多查询上一个月数据。
	EndTime    string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间 投注记录统一使用 UTC 时区，且投注记录会有 2 分钟左右的延迟，请查询当前时间前
	PageNumber int64  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *GetGameTransferBetOrderListReq) Reset() {
	*x = GetGameTransferBetOrderListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameTransferBetOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferBetOrderListReq) ProtoMessage() {}

func (x *GetGameTransferBetOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferBetOrderListReq.ProtoReflect.Descriptor instead.
func (*GetGameTransferBetOrderListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{16}
}

func (x *GetGameTransferBetOrderListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReq) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type TransferBetRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // 记录 ID
	MerchantKey          string `protobuf:"bytes,2,opt,name=merchant_key,json=merchantKey,proto3" json:"merchant_key,omitempty"`                               // 商户 KEY
	UserId               string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 玩家唯一标识
	TrilateralPlatformId int64  `protobuf:"varint,4,opt,name=trilateral_platform_id,json=trilateralPlatformId,proto3" json:"trilateral_platform_id,omitempty"` // 厂商 ID
	TrilateralGameId     int64  `protobuf:"varint,5,opt,name=trilateral_game_id,json=trilateralGameId,proto3" json:"trilateral_game_id,omitempty"`             // 游戏 ID
	GameName             string `protobuf:"bytes,6,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                        // 游戏名称
	BetId                string `protobuf:"bytes,7,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                                 // 投注 ID
	Currency             string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`                                                        // 货币
	Status               int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                                           // 投注状态（1 未结算 2 已结算 3 已取消 4 无效）
	BetTime              string `protobuf:"bytes,10,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                          // 投注时间（字符串）
	SettleTime           string `protobuf:"bytes,11,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`                                 // 结算时间（字符串）
	UpdateTime           string `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                 // 最后更新时间（字符串）
	BetDetail            string `protobuf:"bytes,13,opt,name=bet_detail,json=betDetail,proto3" json:"bet_detail,omitempty"`                                    // 投注记录详细，JSON 字符串
	BetAmount            string `protobuf:"bytes,14,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                                    // 投注金额（作为字符串）
	PayAmount            string `protobuf:"bytes,15,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`                                    // 赔付金额（作为字符串）
	ProfitLoss           string `protobuf:"bytes,16,opt,name=profit_loss,json=profitLoss,proto3" json:"profit_loss,omitempty"`                                 // 输赢金额（作为字符串）
}

func (x *TransferBetRecord) Reset() {
	*x = TransferBetRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferBetRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBetRecord) ProtoMessage() {}

func (x *TransferBetRecord) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBetRecord.ProtoReflect.Descriptor instead.
func (*TransferBetRecord) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{17}
}

func (x *TransferBetRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TransferBetRecord) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *TransferBetRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TransferBetRecord) GetTrilateralPlatformId() int64 {
	if x != nil {
		return x.TrilateralPlatformId
	}
	return 0
}

func (x *TransferBetRecord) GetTrilateralGameId() int64 {
	if x != nil {
		return x.TrilateralGameId
	}
	return 0
}

func (x *TransferBetRecord) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *TransferBetRecord) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *TransferBetRecord) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TransferBetRecord) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransferBetRecord) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *TransferBetRecord) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

func (x *TransferBetRecord) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *TransferBetRecord) GetBetDetail() string {
	if x != nil {
		return x.BetDetail
	}
	return ""
}

func (x *TransferBetRecord) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *TransferBetRecord) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *TransferBetRecord) GetProfitLoss() string {
	if x != nil {
		return x.ProfitLoss
	}
	return ""
}

type GetGameTransferBetOrderListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPage      int64                `protobuf:"varint,1,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`                  //总页数
	CurrentPage    int64                `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`            //当前页数
	LastUpdateDate int64                `protobuf:"varint,3,opt,name=last_update_date,json=lastUpdateDate,proto3" json:"last_update_date,omitempty"` //本批次数据的最后更新时间
	BetList        []*TransferBetRecord `protobuf:"bytes,4,rep,name=bet_list,json=betList,proto3" json:"bet_list,omitempty"`                         //订单列表
}

func (x *GetGameTransferBetOrderListReply) Reset() {
	*x = GetGameTransferBetOrderListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameTransferBetOrderListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferBetOrderListReply) ProtoMessage() {}

func (x *GetGameTransferBetOrderListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferBetOrderListReply.ProtoReflect.Descriptor instead.
func (*GetGameTransferBetOrderListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{18}
}

func (x *GetGameTransferBetOrderListReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetGameTransferBetOrderListReply) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *GetGameTransferBetOrderListReply) GetLastUpdateDate() int64 {
	if x != nil {
		return x.LastUpdateDate
	}
	return 0
}

func (x *GetGameTransferBetOrderListReply) GetBetList() []*TransferBetRecord {
	if x != nil {
		return x.BetList
	}
	return nil
}

// 获取K9游戏接入key
type GetK9GameAccessKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1：单一钱包，2：转账钱包
}

func (x *GetK9GameAccessKeyReq) Reset() {
	*x = GetK9GameAccessKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK9GameAccessKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK9GameAccessKeyReq) ProtoMessage() {}

func (x *GetK9GameAccessKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK9GameAccessKeyReq.ProtoReflect.Descriptor instead.
func (*GetK9GameAccessKeyReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{19}
}

func (x *GetK9GameAccessKeyReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 获取K9游戏接入key
type GetK9GameAccessKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
}

func (x *GetK9GameAccessKeyReply) Reset() {
	*x = GetK9GameAccessKeyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK9GameAccessKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK9GameAccessKeyReply) ProtoMessage() {}

func (x *GetK9GameAccessKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK9GameAccessKeyReply.ProtoReflect.Descriptor instead.
func (*GetK9GameAccessKeyReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{20}
}

func (x *GetK9GameAccessKeyReply) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

// 游戏投注创建请求
type GameUserBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel      int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                  // 钱包模式：1：单一钱包，2：转账钱包
	UserId           int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	TripartiteGameId int64  `protobuf:"varint,3,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"` // 三方游戏id
	RoundId          string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                               // 牌局 ID
	OrderNo          string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                               // 投注订单号(每笔记录唯一)
	Amount           string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`                                                //投注金额(6 位小数)
	CurrencyCode     string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                // 玩家货币code
	Timestamp        int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         //时间戳（毫秒）
	PostBetBalance   int64  `protobuf:"varint,9,opt,name=post_bet_balance,json=postBetBalance,proto3" json:"post_bet_balance,omitempty"`       //投注后余额
	OrderId          string `protobuf:"bytes,10,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                              // 内部订单号(数据表的order_id)
	WeiBetAmount     int64  `protobuf:"varint,11,opt,name=wei_bet_amount,json=weiBetAmount,proto3" json:"wei_bet_amount,omitempty"`            // 内部的投注金额
	MsgId            string `protobuf:"bytes,12,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                    // mq的消息ID
}

func (x *GameUserBetReq) Reset() {
	*x = GameUserBetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetReq) ProtoMessage() {}

func (x *GameUserBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetReq.ProtoReflect.Descriptor instead.
func (*GameUserBetReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{21}
}

func (x *GameUserBetReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameUserBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserBetReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameUserBetReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GameUserBetReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserBetReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GameUserBetReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameUserBetReq) GetPostBetBalance() int64 {
	if x != nil {
		return x.PostBetBalance
	}
	return 0
}

func (x *GameUserBetReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GameUserBetReq) GetWeiBetAmount() int64 {
	if x != nil {
		return x.WeiBetAmount
	}
	return 0
}

func (x *GameUserBetReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

// 游戏投注创建回应
type GameUserBetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //用户余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderId      string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                // 投注记录表内部订单号(数据表的order_id)
	BetRecordId  string `protobuf:"bytes,4,opt,name=bet_record_id,json=betRecordId,proto3" json:"bet_record_id,omitempty"`  // 投注记录表ID(数据表的ID)
}

func (x *GameUserBetReply) Reset() {
	*x = GameUserBetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserBetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetReply) ProtoMessage() {}

func (x *GameUserBetReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetReply.ProtoReflect.Descriptor instead.
func (*GameUserBetReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{22}
}

func (x *GameUserBetReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserBetReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GameUserBetReply) GetBetRecordId() string {
	if x != nil {
		return x.BetRecordId
	}
	return ""
}

// 游戏订单派奖创建
type GameUserRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel      int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                  // 钱包模式：1：单一钱包，2：转账钱包
	UserId           int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	TripartiteGameId int64  `protobuf:"varint,3,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"` // 三方游戏id
	RoundId          string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                               // 牌局 ID
	OrderNo          string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                               // 派奖订单号(每笔记录唯一)
	BetId            string `protobuf:"bytes,6,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                     //对应的投注 ID，如果没有就会取牌局 ID
	RewardAmount     string `protobuf:"bytes,7,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`                //交易金额，非负值
	CurrencyCode     string `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                // 玩家货币code
	Timestamp        int64  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         //时间戳（毫秒）
	WeiBetAmount     int64  `protobuf:"varint,10,opt,name=wei_bet_amount,json=weiBetAmount,proto3" json:"wei_bet_amount,omitempty"`            // 内部的投注金额
	MsgId            string `protobuf:"bytes,11,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                    // mq的消息ID
}

func (x *GameUserRewardReq) Reset() {
	*x = GameUserRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserRewardReq) ProtoMessage() {}

func (x *GameUserRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserRewardReq.ProtoReflect.Descriptor instead.
func (*GameUserRewardReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{23}
}

func (x *GameUserRewardReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameUserRewardReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserRewardReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameUserRewardReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GameUserRewardReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserRewardReq) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *GameUserRewardReq) GetRewardAmount() string {
	if x != nil {
		return x.RewardAmount
	}
	return ""
}

func (x *GameUserRewardReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserRewardReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameUserRewardReq) GetWeiBetAmount() int64 {
	if x != nil {
		return x.WeiBetAmount
	}
	return 0
}

func (x *GameUserRewardReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type GameUserRewardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderId      string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                //订单ID
}

func (x *GameUserRewardReply) Reset() {
	*x = GameUserRewardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserRewardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserRewardReply) ProtoMessage() {}

func (x *GameUserRewardReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserRewardReply.ProtoReflect.Descriptor instead.
func (*GameUserRewardReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{24}
}

func (x *GameUserRewardReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserRewardReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserRewardReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 游戏投注撤销
type GameUserBetCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel       int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                      // 钱包模式：1：单一钱包，2：转账钱包
	UserId            int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                     // 用户ID
	TripartiteGameId  int64  `protobuf:"varint,3,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`     // 三方游戏id
	RoundId           string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                   // 牌局 ID
	OrderNo           string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                   // 订单号(每笔记录唯一)
	CancelOrderNo     string `protobuf:"bytes,6,opt,name=cancel_order_no,json=cancelOrderNo,proto3" json:"cancel_order_no,omitempty"`               //撤消投注/派奖的原商户订单号
	CancelPlatOrderNo string `protobuf:"bytes,7,opt,name=cancel_plat_order_no,json=cancelPlatOrderNo,proto3" json:"cancel_plat_order_no,omitempty"` //撤消投注/派奖的原平台订单号
	OrderAmount       string `protobuf:"bytes,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`                       //撤单金额(6 位小数)
	CurrencyCode      string `protobuf:"bytes,9,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                    // 玩家货币code
	Timestamp         int64  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                            //时间戳（毫秒）
	OrderDesc         string `protobuf:"bytes,11,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`                            //撤单说明
	CancelType        int64  `protobuf:"varint,12,opt,name=cancel_type,json=cancelType,proto3" json:"cancel_type,omitempty"`                        //撤单类型：1 投注撤单，2 派奖撤单
	MsgId             string `protobuf:"bytes,13,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                        // mq的消息ID
}

func (x *GameUserBetCancelReq) Reset() {
	*x = GameUserBetCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserBetCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetCancelReq) ProtoMessage() {}

func (x *GameUserBetCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetCancelReq.ProtoReflect.Descriptor instead.
func (*GameUserBetCancelReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{25}
}

func (x *GameUserBetCancelReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameUserBetCancelReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserBetCancelReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameUserBetCancelReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GameUserBetCancelReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserBetCancelReq) GetCancelOrderNo() string {
	if x != nil {
		return x.CancelOrderNo
	}
	return ""
}

func (x *GameUserBetCancelReq) GetCancelPlatOrderNo() string {
	if x != nil {
		return x.CancelPlatOrderNo
	}
	return ""
}

func (x *GameUserBetCancelReq) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *GameUserBetCancelReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetCancelReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameUserBetCancelReq) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *GameUserBetCancelReq) GetCancelType() int64 {
	if x != nil {
		return x.CancelType
	}
	return 0
}

func (x *GameUserBetCancelReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

// 游戏投注撤销响应
type GameUserBetCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderId      string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                //订单ID
}

func (x *GameUserBetCancelReply) Reset() {
	*x = GameUserBetCancelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserBetCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetCancelReply) ProtoMessage() {}

func (x *GameUserBetCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetCancelReply.ProtoReflect.Descriptor instead.
func (*GameUserBetCancelReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{26}
}

func (x *GameUserBetCancelReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserBetCancelReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetCancelReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 游戏调整玩家余额(订单、活动等调整) 请求
type GameUserAdjustmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel          int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                              // 钱包模式：1：单一钱包，2：转账钱包
	UserId               int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 用户ID
	TripartitePlatformId int64  `protobuf:"varint,3,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方产商id
	TripartiteGameId     int64  `protobuf:"varint,4,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`             // 三方游戏id （可以为空）
	OrderNo              string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                           // 订单号(每笔记录唯一)
	AdjustAmounts        string `protobuf:"bytes,6,opt,name=adjust_amounts,json=adjustAmounts,proto3" json:"adjust_amounts,omitempty"`                         //交易金额，加：正数，减：负数
	AdjustDesc           string `protobuf:"bytes,7,opt,name=adjust_desc,json=adjustDesc,proto3" json:"adjust_desc,omitempty"`                                  //调整描述
	CurrencyCode         string `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            //货币Code
	Timestamp            int64  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                    //时间戳（毫秒）
	OrderId              string `protobuf:"bytes,11,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                          //内部订单ID
	MsgId                string `protobuf:"bytes,12,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`                                                // mq的消息ID
}

func (x *GameUserAdjustmentReq) Reset() {
	*x = GameUserAdjustmentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserAdjustmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserAdjustmentReq) ProtoMessage() {}

func (x *GameUserAdjustmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserAdjustmentReq.ProtoReflect.Descriptor instead.
func (*GameUserAdjustmentReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{27}
}

func (x *GameUserAdjustmentReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetAdjustAmounts() string {
	if x != nil {
		return x.AdjustAmounts
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetAdjustDesc() string {
	if x != nil {
		return x.AdjustDesc
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

// 游戏调整玩家余额(订单、活动等调整) 响应
type GameUserAdjustmentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderId      string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                //订单ID
}

func (x *GameUserAdjustmentReply) Reset() {
	*x = GameUserAdjustmentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserAdjustmentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserAdjustmentReply) ProtoMessage() {}

func (x *GameUserAdjustmentReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserAdjustmentReply.ProtoReflect.Descriptor instead.
func (*GameUserAdjustmentReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{28}
}

func (x *GameUserAdjustmentReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserAdjustmentReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserAdjustmentReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 游戏转账订单回调
type TransferCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                 //订单编号
	TransferType int64  `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"` //交易类型：1:转入 2:转出
	Status       int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                 //状态：100(处理中) 200(成功) -100(失败)
	Amount       string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`                                  //订单金额
	Description  string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                        //信息描述
}

func (x *TransferCallbackReq) Reset() {
	*x = TransferCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallbackReq) ProtoMessage() {}

func (x *TransferCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallbackReq.ProtoReflect.Descriptor instead.
func (*TransferCallbackReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{29}
}

func (x *TransferCallbackReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransferCallbackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TransferCallbackReq) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *TransferCallbackReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransferCallbackReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransferCallbackReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// 游戏转账订单回调响应
type TransferCallbackReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferCallbackReply) Reset() {
	*x = TransferCallbackReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCallbackReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallbackReply) ProtoMessage() {}

func (x *TransferCallbackReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallbackReply.ProtoReflect.Descriptor instead.
func (*TransferCallbackReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{30}
}

type AddTripartiteTransferRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                         // 内部转账订单号
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	GameId         int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                           // 游戏ID
	GamePlatformId int64  `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 平台ID
	CurrencyCode   string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`          // 货币代码
	Amount         int64  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`                                         // 操作金额
	Remark         string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`                                         // 备注说明
	TransferType   int64  `protobuf:"varint,13,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"`        // 交易类型：1:转入 2:转出
}

func (x *AddTripartiteTransferRecordReq) Reset() {
	*x = AddTripartiteTransferRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTripartiteTransferRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTripartiteTransferRecordReq) ProtoMessage() {}

func (x *AddTripartiteTransferRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTripartiteTransferRecordReq.ProtoReflect.Descriptor instead.
func (*AddTripartiteTransferRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{31}
}

func (x *AddTripartiteTransferRecordReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddTripartiteTransferRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddTripartiteTransferRecordReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *AddTripartiteTransferRecordReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *AddTripartiteTransferRecordReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddTripartiteTransferRecordReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddTripartiteTransferRecordReq) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AddTripartiteTransferRecordReq) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

type AddTripartiteTransferRecordStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                         // 关联的转账订单号
	GamePlatformId int64  `protobuf:"varint,2,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 平台ID
	UserId         int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           //用户ID
	TransferType   int64  `protobuf:"varint,5,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"`         //交易类型：1:转入 2:转出
	Status         int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                         //转账状态， 1:处理中 2:处理成功 3:处理失败
	Amount         int64  `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`                                         //订单金额
	Msg            string `protobuf:"bytes,8,opt,name=msg,proto3" json:"msg,omitempty"`                                                //信息
}

func (x *AddTripartiteTransferRecordStatusReq) Reset() {
	*x = AddTripartiteTransferRecordStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTripartiteTransferRecordStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTripartiteTransferRecordStatusReq) ProtoMessage() {}

func (x *AddTripartiteTransferRecordStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTripartiteTransferRecordStatusReq.ProtoReflect.Descriptor instead.
func (*AddTripartiteTransferRecordStatusReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{32}
}

func (x *AddTripartiteTransferRecordStatusReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddTripartiteTransferRecordStatusReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *AddTripartiteTransferRecordStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddTripartiteTransferRecordStatusReq) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *AddTripartiteTransferRecordStatusReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AddTripartiteTransferRecordStatusReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddTripartiteTransferRecordStatusReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TripartiteTransferRecordStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId        string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                         // 内部转账订单号
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	GameId         int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                           // 游戏ID
	GamePlatformId int64  `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 平台ID
}

func (x *TripartiteTransferRecordStatusReq) Reset() {
	*x = TripartiteTransferRecordStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripartiteTransferRecordStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripartiteTransferRecordStatusReq) ProtoMessage() {}

func (x *TripartiteTransferRecordStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripartiteTransferRecordStatusReq.ProtoReflect.Descriptor instead.
func (*TripartiteTransferRecordStatusReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{33}
}

func (x *TripartiteTransferRecordStatusReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TripartiteTransferRecordStatusReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TripartiteTransferRecordStatusReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *TripartiteTransferRecordStatusReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

type ProcessMessageTransferDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   // 用户ID
	OrderNo      string `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                 // 订单号
	Status       int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                 // 状态：1(处理中) 2(成功) 3(失败)
	TransferType int64  `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"` //交易类型：1:转入 2:转出
	Amount       int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                 //订单金额（处理之后的数据）
	Description  string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                        // 描述
}

func (x *ProcessMessageTransferDataReq) Reset() {
	*x = ProcessMessageTransferDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMessageTransferDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageTransferDataReq) ProtoMessage() {}

func (x *ProcessMessageTransferDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageTransferDataReq.ProtoReflect.Descriptor instead.
func (*ProcessMessageTransferDataReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{34}
}

func (x *ProcessMessageTransferDataReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcessMessageTransferDataReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ProcessMessageTransferDataReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcessMessageTransferDataReq) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *ProcessMessageTransferDataReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProcessMessageTransferDataReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProcessMessageTransferDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` //订单编号(内部)
	Status       int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                 //状态：1(处理中) 2(成功) 3(失败)
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WalletType   int64  `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`      // 钱包类型 1：用户钱包,2：代理钱包,3：奖励钱包,4：余额宝
	Balance      int64  `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`                              //用户余额
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
	GameId       int64  `protobuf:"varint,7,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                  // 游戏Id
	DealStatus   int64  `protobuf:"varint,8,opt,name=deal_status,json=dealStatus,proto3" json:"deal_status,omitempty"`      // 是否处理，1：已处理，2：未处理
}

func (x *ProcessMessageTransferDataReply) Reset() {
	*x = ProcessMessageTransferDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMessageTransferDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageTransferDataReply) ProtoMessage() {}

func (x *ProcessMessageTransferDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageTransferDataReply.ProtoReflect.Descriptor instead.
func (*ProcessMessageTransferDataReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{35}
}

func (x *ProcessMessageTransferDataReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ProcessMessageTransferDataReply) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProcessMessageTransferDataReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcessMessageTransferDataReply) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *ProcessMessageTransferDataReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ProcessMessageTransferDataReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *ProcessMessageTransferDataReply) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ProcessMessageTransferDataReply) GetDealStatus() int64 {
	if x != nil {
		return x.DealStatus
	}
	return 0
}

type ProcessMessageTransferSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Balance        int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`                                       //用户余额
	GameId         int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                           // 游戏Id
	OrderId        string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                         //订单编号
	GamePlatformId int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 平台ID
}

func (x *ProcessMessageTransferSendReq) Reset() {
	*x = ProcessMessageTransferSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMessageTransferSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageTransferSendReq) ProtoMessage() {}

func (x *ProcessMessageTransferSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageTransferSendReq.ProtoReflect.Descriptor instead.
func (*ProcessMessageTransferSendReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{36}
}

func (x *ProcessMessageTransferSendReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcessMessageTransferSendReq) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ProcessMessageTransferSendReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *ProcessMessageTransferSendReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ProcessMessageTransferSendReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

type ProcessMessageTransferSendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendStatus int64  `protobuf:"varint,1,opt,name=send_status,json=sendStatus,proto3" json:"send_status,omitempty"` // 是否发送，1：已发送，2：未发送
	OrderId    string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`           //订单编号
}

func (x *ProcessMessageTransferSendReply) Reset() {
	*x = ProcessMessageTransferSendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMessageTransferSendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageTransferSendReply) ProtoMessage() {}

func (x *ProcessMessageTransferSendReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageTransferSendReply.ProtoReflect.Descriptor instead.
func (*ProcessMessageTransferSendReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{37}
}

func (x *ProcessMessageTransferSendReply) GetSendStatus() int64 {
	if x != nil {
		return x.SendStatus
	}
	return 0
}

func (x *ProcessMessageTransferSendReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type TripartiteTransferRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                  string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                         // 内部转账订单号
	UserId                   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                           // 用户ID
	GameId                   int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                           // 游戏ID
	TripartiteGameId         int64  `protobuf:"varint,4,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`                           // 游戏ID
	GameName                 string `protobuf:"bytes,5,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                                      // 游戏ID
	GamePlatformId           int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                                 // 平台ID
	TripartiteGamePlatformId int64  `protobuf:"varint,7,opt,name=tripartite_game_platform_id,json=tripartiteGamePlatformId,proto3" json:"tripartite_game_platform_id,omitempty"` // 平台ID
	GamePlatformName         string `protobuf:"bytes,8,opt,name=game_platform_name,json=gamePlatformName,proto3" json:"game_platform_name,omitempty"`                            // 平台ID
	CurrencyCode             string `protobuf:"bytes,9,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                                          // 货币代码
	TransferMoney            int64  `protobuf:"varint,10,opt,name=transfer_money,json=transferMoney,proto3" json:"transfer_money,omitempty"`                                     // 转入/转出的金额
	Remark                   string `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark,omitempty"`                                                                         // 备注说明
	TransferType             int64  `protobuf:"varint,12,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"`                                        // 交易类型：1:转入 2:转出
	TransferStatus           int64  `protobuf:"varint,13,opt,name=transfer_status,json=transferStatus,proto3" json:"transfer_status,omitempty"`                                  //转账状态， 1:处理中 2:处理成功 3:处理失败
	TransferTime             int64  `protobuf:"varint,14,opt,name=transfer_time,json=transferTime,proto3" json:"transfer_time,omitempty"`
	EventTime                int64  `protobuf:"varint,15,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *TripartiteTransferRecord) Reset() {
	*x = TripartiteTransferRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripartiteTransferRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripartiteTransferRecord) ProtoMessage() {}

func (x *TripartiteTransferRecord) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripartiteTransferRecord.ProtoReflect.Descriptor instead.
func (*TripartiteTransferRecord) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{38}
}

func (x *TripartiteTransferRecord) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TripartiteTransferRecord) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TripartiteTransferRecord) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *TripartiteTransferRecord) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *TripartiteTransferRecord) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *TripartiteTransferRecord) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *TripartiteTransferRecord) GetTripartiteGamePlatformId() int64 {
	if x != nil {
		return x.TripartiteGamePlatformId
	}
	return 0
}

func (x *TripartiteTransferRecord) GetGamePlatformName() string {
	if x != nil {
		return x.GamePlatformName
	}
	return ""
}

func (x *TripartiteTransferRecord) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *TripartiteTransferRecord) GetTransferMoney() int64 {
	if x != nil {
		return x.TransferMoney
	}
	return 0
}

func (x *TripartiteTransferRecord) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TripartiteTransferRecord) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *TripartiteTransferRecord) GetTransferStatus() int64 {
	if x != nil {
		return x.TransferStatus
	}
	return 0
}

func (x *TripartiteTransferRecord) GetTransferTime() int64 {
	if x != nil {
		return x.TransferTime
	}
	return 0
}

func (x *TripartiteTransferRecord) GetEventTime() int64 {
	if x != nil {
		return x.EventTime
	}
	return 0
}

// 创建补偿失败的记录请求
type CreateCompensationRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	Amount       int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                // 金额（分）
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                // 原始订单号
	GameId       int64  `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                  // 游戏ID
	GameOrderNo  string `protobuf:"bytes,5,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"`  // 游戏方订单号（可选）
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息
	CurrencyCode string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
}

func (x *CreateCompensationRecordReq) Reset() {
	*x = CreateCompensationRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompensationRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompensationRecordReq) ProtoMessage() {}

func (x *CreateCompensationRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompensationRecordReq.ProtoReflect.Descriptor instead.
func (*CreateCompensationRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{39}
}

func (x *CreateCompensationRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateCompensationRecordReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateCompensationRecordReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *CreateCompensationRecordReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *CreateCompensationRecordReq) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *CreateCompensationRecordReq) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateCompensationRecordReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CreateCompensationRecordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 补偿记录ID
}

func (x *CreateCompensationRecordResp) Reset() {
	*x = CreateCompensationRecordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompensationRecordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompensationRecordResp) ProtoMessage() {}

func (x *CreateCompensationRecordResp) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompensationRecordResp.ProtoReflect.Descriptor instead.
func (*CreateCompensationRecordResp) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{40}
}

func (x *CreateCompensationRecordResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetGameDetailsByThirdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel      int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                  // 钱包类型
	TripartiteGameId int64  `protobuf:"varint,2,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"` // 三方游戏ID
	CurrencyCode     string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                //  货币code
	Timestamp        int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         //  毫秒
}

func (x *GetGameDetailsByThirdReq) Reset() {
	*x = GetGameDetailsByThirdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameDetailsByThirdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDetailsByThirdReq) ProtoMessage() {}

func (x *GetGameDetailsByThirdReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDetailsByThirdReq.ProtoReflect.Descriptor instead.
func (*GetGameDetailsByThirdReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{41}
}

func (x *GetGameDetailsByThirdReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GetGameDetailsByThirdReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GetGameDetailsByThirdReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetGameDetailsByThirdReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetGameDetailsByThirdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId             int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	TripartiteGameId   int64  `protobuf:"varint,2,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`
	Rank               int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	CurrencyCode       string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GamePlatformId     int64  `protobuf:"varint,5,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId     int64  `protobuf:"varint,6,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	GameName           string `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	IsFeatured         int64  `protobuf:"varint,9,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"` //  是否推荐(1:开启，2：关闭)
	IsJumpTab          int64  `protobuf:"varint,10,opt,name=is_jump_tab,json=isJumpTab,proto3" json:"is_jump_tab,omitempty"` //  是否开启跳转(1:开启，2：关闭)
	WalletModel        int64  `protobuf:"varint,13,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`
	HorizontalSupport  int64  `protobuf:"varint,14,opt,name=horizontal_support,json=horizontalSupport,proto3" json:"horizontal_support,omitempty"`
	VerticalSupport    int64  `protobuf:"varint,15,opt,name=vertical_support,json=verticalSupport,proto3" json:"vertical_support,omitempty"`
	TryGameSupport     int64  `protobuf:"varint,16,opt,name=try_game_support,json=tryGameSupport,proto3" json:"try_game_support,omitempty"`
	Style              string `protobuf:"bytes,17,opt,name=style,proto3" json:"style,omitempty"`
	IconStyle          int64  `protobuf:"varint,18,opt,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
	LogoUrl            string `protobuf:"bytes,19,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IconImageUrl       string `protobuf:"bytes,20,opt,name=icon_image_url,json=iconImageUrl,proto3" json:"icon_image_url,omitempty"`
	IsGameActive       int64  `protobuf:"varint,21,opt,name=is_game_active,json=isGameActive,proto3" json:"is_game_active,omitempty"`
	IsUnderMaintenance int64  `protobuf:"varint,22,opt,name=is_under_maintenance,json=isUnderMaintenance,proto3" json:"is_under_maintenance,omitempty"`
}

func (x *GetGameDetailsByThirdReply) Reset() {
	*x = GetGameDetailsByThirdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameDetailsByThirdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDetailsByThirdReply) ProtoMessage() {}

func (x *GetGameDetailsByThirdReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDetailsByThirdReply.ProtoReflect.Descriptor instead.
func (*GetGameDetailsByThirdReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{42}
}

func (x *GetGameDetailsByThirdReply) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetGameDetailsByThirdReply) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GetGameDetailsByThirdReply) GetIsFeatured() int64 {
	if x != nil {
		return x.IsFeatured
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetIsJumpTab() int64 {
	if x != nil {
		return x.IsJumpTab
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetHorizontalSupport() int64 {
	if x != nil {
		return x.HorizontalSupport
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetVerticalSupport() int64 {
	if x != nil {
		return x.VerticalSupport
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetTryGameSupport() int64 {
	if x != nil {
		return x.TryGameSupport
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *GetGameDetailsByThirdReply) GetIconStyle() int64 {
	if x != nil {
		return x.IconStyle
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GetGameDetailsByThirdReply) GetIconImageUrl() string {
	if x != nil {
		return x.IconImageUrl
	}
	return ""
}

func (x *GetGameDetailsByThirdReply) GetIsGameActive() int64 {
	if x != nil {
		return x.IsGameActive
	}
	return 0
}

func (x *GetGameDetailsByThirdReply) GetIsUnderMaintenance() int64 {
	if x != nil {
		return x.IsUnderMaintenance
	}
	return 0
}

type AddGameBetBaseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WalletType   int64  `protobuf:"varint,2,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`      // 钱包类型 1：用户钱包,2：代理钱包,3：奖励钱包,4：余额宝
	Balance      int64  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`                              //用户余额
	OrderId      string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                // 投注记录表内部订单号(order_id)
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
}

func (x *AddGameBetBaseReply) Reset() {
	*x = AddGameBetBaseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameBetBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameBetBaseReply) ProtoMessage() {}

func (x *AddGameBetBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameBetBaseReply.ProtoReflect.Descriptor instead.
func (*AddGameBetBaseReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{43}
}

func (x *AddGameBetBaseReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddGameBetBaseReply) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *AddGameBetBaseReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AddGameBetBaseReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddGameBetBaseReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type AddGameBetRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId                string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                 // 内部订单号
	UserId                 int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                   // 用户ID
	GameId                 int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                   // 游戏ID
	GamePlatformId         int64  `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                         // 平台ID
	GameCategoryId         int64  `protobuf:"varint,5,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                         // 分类ID
	BetAmount              int64  `protobuf:"varint,6,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                                          // 下注金额（处理之后的数据）
	TripartiteOrderId      string `protobuf:"bytes,7,opt,name=tripartite_order_id,json=tripartiteOrderId,proto3" json:"tripartite_order_id,omitempty"`                 // 订单ID（三方）
	RoundId                string `protobuf:"bytes,8,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                                 // 下注牌局ID（三方）
	BetTime                int64  `protobuf:"varint,9,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                                // 下注时间毫秒
	TripartiteOriginalData string `protobuf:"bytes,10,opt,name=tripartite_original_data,json=tripartiteOriginalData,proto3" json:"tripartite_original_data,omitempty"` // 三方原始数据
	PostBetBalance         int64  `protobuf:"varint,11,opt,name=post_bet_balance,json=postBetBalance,proto3" json:"post_bet_balance,omitempty"`                        // 投注后余额
}

func (x *AddGameBetRecordReq) Reset() {
	*x = AddGameBetRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameBetRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameBetRecordReq) ProtoMessage() {}

func (x *AddGameBetRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameBetRecordReq.ProtoReflect.Descriptor instead.
func (*AddGameBetRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{44}
}

func (x *AddGameBetRecordReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddGameBetRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddGameBetRecordReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *AddGameBetRecordReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *AddGameBetRecordReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *AddGameBetRecordReq) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *AddGameBetRecordReq) GetTripartiteOrderId() string {
	if x != nil {
		return x.TripartiteOrderId
	}
	return ""
}

func (x *AddGameBetRecordReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *AddGameBetRecordReq) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *AddGameBetRecordReq) GetTripartiteOriginalData() string {
	if x != nil {
		return x.TripartiteOriginalData
	}
	return ""
}

func (x *AddGameBetRecordReq) GetPostBetBalance() int64 {
	if x != nil {
		return x.PostBetBalance
	}
	return 0
}

type AddGameBetRecordReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletType   int64  `protobuf:"varint,1,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`      // 钱包类型 1：用户钱包,2：代理钱包,3：奖励钱包,4：余额宝
	Balance      int64  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`                              //用户余额
	OrderId      string `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                // 投注记录表内部订单号(order_id)
	BetRecordId  string `protobuf:"bytes,4,opt,name=bet_record_id,json=betRecordId,proto3" json:"bet_record_id,omitempty"`  // 投注记录表ID
	CurrencyCode string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
	UserId       int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddGameBetRecordReply) Reset() {
	*x = AddGameBetRecordReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameBetRecordReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameBetRecordReply) ProtoMessage() {}

func (x *AddGameBetRecordReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameBetRecordReply.ProtoReflect.Descriptor instead.
func (*AddGameBetRecordReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{45}
}

func (x *AddGameBetRecordReply) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *AddGameBetRecordReply) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AddGameBetRecordReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddGameBetRecordReply) GetBetRecordId() string {
	if x != nil {
		return x.BetRecordId
	}
	return ""
}

func (x *AddGameBetRecordReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddGameBetRecordReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type BatchAddGameBetRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddGameBetRecordReq []*AddGameBetRecordReq `protobuf:"bytes,1,rep,name=add_game_bet_record_req,json=addGameBetRecordReq,proto3" json:"add_game_bet_record_req,omitempty"`
}

func (x *BatchAddGameBetRecordReq) Reset() {
	*x = BatchAddGameBetRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddGameBetRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddGameBetRecordReq) ProtoMessage() {}

func (x *BatchAddGameBetRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddGameBetRecordReq.ProtoReflect.Descriptor instead.
func (*BatchAddGameBetRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{46}
}

func (x *BatchAddGameBetRecordReq) GetAddGameBetRecordReq() []*AddGameBetRecordReq {
	if x != nil {
		return x.AddGameBetRecordReq
	}
	return nil
}

type AddGameSettledRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId           string `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                 // 牌局ID（三方)
	RewardAmount      int64  `protobuf:"varint,2,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`                 // 派奖金额（处理之后的数据）
	TripartiteOrderId string `protobuf:"bytes,3,opt,name=tripartite_order_id,json=tripartiteOrderId,proto3" json:"tripartite_order_id,omitempty"` // 订单ID（三方）
	SettleTime        int64  `protobuf:"varint,4,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`                       // 结算时间毫秒
	UserId            int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                   // 用户ID
	BetId             string `protobuf:"bytes,6,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                       // 对应的投注 ID，如果没有就会取牌局 ID（三方)
	OrderId           string `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                 // 内部订单号(order_id)
}

func (x *AddGameSettledRecordReq) Reset() {
	*x = AddGameSettledRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameSettledRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameSettledRecordReq) ProtoMessage() {}

func (x *AddGameSettledRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameSettledRecordReq.ProtoReflect.Descriptor instead.
func (*AddGameSettledRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{47}
}

func (x *AddGameSettledRecordReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *AddGameSettledRecordReq) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *AddGameSettledRecordReq) GetTripartiteOrderId() string {
	if x != nil {
		return x.TripartiteOrderId
	}
	return ""
}

func (x *AddGameSettledRecordReq) GetSettleTime() int64 {
	if x != nil {
		return x.SettleTime
	}
	return 0
}

func (x *AddGameSettledRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddGameSettledRecordReq) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *AddGameSettledRecordReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type BatchAddGameSettledRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddGameSettledRecordReq []*AddGameSettledRecordReq `protobuf:"bytes,1,rep,name=add_game_settled_record_req,json=addGameSettledRecordReq,proto3" json:"add_game_settled_record_req,omitempty"`
}

func (x *BatchAddGameSettledRecordReq) Reset() {
	*x = BatchAddGameSettledRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAddGameSettledRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddGameSettledRecordReq) ProtoMessage() {}

func (x *BatchAddGameSettledRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddGameSettledRecordReq.ProtoReflect.Descriptor instead.
func (*BatchAddGameSettledRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{48}
}

func (x *BatchAddGameSettledRecordReq) GetAddGameSettledRecordReq() []*AddGameSettledRecordReq {
	if x != nil {
		return x.AddGameSettledRecordReq
	}
	return nil
}

type AddGameCancelRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户ID
	GameId               int64  `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                              // 游戏ID
	TripartiteGameId     int64  `protobuf:"varint,4,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`              // 三方游戏ID
	RoundId              string `protobuf:"bytes,6,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                                            // 牌局 ID
	OrderNo              string `protobuf:"bytes,7,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                            // 订单号(每笔记录唯一)
	CancelOrderNo        string `protobuf:"bytes,8,opt,name=cancel_order_no,json=cancelOrderNo,proto3" json:"cancel_order_no,omitempty"`                        //撤消投注/派奖的原商户订单号
	CancelPlatOrderNo    string `protobuf:"bytes,9,opt,name=cancel_plat_order_no,json=cancelPlatOrderNo,proto3" json:"cancel_plat_order_no,omitempty"`          //撤消投注/派奖的原平台订单号
	OrderAmount          int64  `protobuf:"varint,10,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`                              //撤单金额（处理之后的数据）
	CurrencyCode         string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 玩家货币code
	Timestamp            int64  `protobuf:"varint,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     //时间戳（毫秒）
	OrderDesc            string `protobuf:"bytes,13,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`                                     //撤单说明
	CancelType           int64  `protobuf:"varint,14,opt,name=cancel_type,json=cancelType,proto3" json:"cancel_type,omitempty"`                                 //撤单类型：1 投注撤单，2 派奖撤单
	GamePlatformId       int64  `protobuf:"varint,15,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                   //游戏厂商ID
	TripartitePlatformId int64  `protobuf:"varint,16,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` //第三方游戏厂商ID
}

func (x *AddGameCancelRecordReq) Reset() {
	*x = AddGameCancelRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameCancelRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameCancelRecordReq) ProtoMessage() {}

func (x *AddGameCancelRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameCancelRecordReq.ProtoReflect.Descriptor instead.
func (*AddGameCancelRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{49}
}

func (x *AddGameCancelRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetCancelOrderNo() string {
	if x != nil {
		return x.CancelOrderNo
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetCancelPlatOrderNo() string {
	if x != nil {
		return x.CancelPlatOrderNo
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *AddGameCancelRecordReq) GetCancelType() int64 {
	if x != nil {
		return x.CancelType
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *AddGameCancelRecordReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

type AddGameAdjustmentRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 用户ID
	GamePlatformId       int64  `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                   //游戏厂商ID
	TripartitePlatformId int64  `protobuf:"varint,4,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` //第三方游戏厂商ID
	OrderNo              string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                           // 订单号(每笔记录唯一)
	AdjustAmount         int64  `protobuf:"varint,6,opt,name=adjust_amount,json=adjustAmount,proto3" json:"adjust_amount,omitempty"`                           //调整金额（处理之后的数据）
	CurrencyCode         string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 玩家货币code
	Timestamp            int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                     //时间戳（毫秒）
	AdjustDesc           string `protobuf:"bytes,9,opt,name=adjust_desc,json=adjustDesc,proto3" json:"adjust_desc,omitempty"`                                  //调整说明
	OrderId              string `protobuf:"bytes,10,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                          // 内部订单号(order_id)
}

func (x *AddGameAdjustmentRecordReq) Reset() {
	*x = AddGameAdjustmentRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGameAdjustmentRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameAdjustmentRecordReq) ProtoMessage() {}

func (x *AddGameAdjustmentRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameAdjustmentRecordReq.ProtoReflect.Descriptor instead.
func (*AddGameAdjustmentRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{50}
}

func (x *AddGameAdjustmentRecordReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddGameAdjustmentRecordReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *AddGameAdjustmentRecordReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *AddGameAdjustmentRecordReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *AddGameAdjustmentRecordReq) GetAdjustAmount() int64 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *AddGameAdjustmentRecordReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddGameAdjustmentRecordReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AddGameAdjustmentRecordReq) GetAdjustDesc() string {
	if x != nil {
		return x.AdjustDesc
	}
	return ""
}

func (x *AddGameAdjustmentRecordReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type AddTransferGameBetRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordList []*TransferBetRecord `protobuf:"bytes,1,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty"` //下注订单列表
}

func (x *AddTransferGameBetRecordReq) Reset() {
	*x = AddTransferGameBetRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTransferGameBetRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTransferGameBetRecordReq) ProtoMessage() {}

func (x *AddTransferGameBetRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTransferGameBetRecordReq.ProtoReflect.Descriptor instead.
func (*AddTransferGameBetRecordReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{51}
}

func (x *AddTransferGameBetRecordReq) GetRecordList() []*TransferBetRecord {
	if x != nil {
		return x.RecordList
	}
	return nil
}

// 定义 SendGameBetBetMQReq 消息
type SendGameBetBetMQReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户ID
	UserAccount          string `protobuf:"bytes,2,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`                                // 用户账号
	CurrencyCode         string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                             // 货币代码
	BetAmount            int64  `protobuf:"varint,4,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                                     // 投注金额（不包含撤单金额）
	GameName             string `protobuf:"bytes,19,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                        // 游戏名称
	GameId               int64  `protobuf:"varint,7,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                              // 游戏ID
	BetTime              int64  `protobuf:"varint,10,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                          // 投注时间
	BetOrderId           string `protobuf:"bytes,16,opt,name=bet_order_id,json=betOrderId,proto3" json:"bet_order_id,omitempty"`                                // 投注ID
	TripartiteGameId     int64  `protobuf:"varint,18,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`             // 三方游戏ID
	GameCategoryId       int64  `protobuf:"varint,8,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                    // 游戏类型ID
	GameCategoryName     string `protobuf:"bytes,9,opt,name=game_category_name,json=gameCategoryName,proto3" json:"game_category_name,omitempty"`               // 游戏类型名称
	TripartiteCategoryId int64  `protobuf:"varint,15,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"` // 三方游戏类型ID
	PlatformId           int64  `protobuf:"varint,11,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`                                 // 游戏平台ID
	TripartitePlatformId int64  `protobuf:"varint,17,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方游戏平台ID
	PlatformName         string `protobuf:"bytes,12,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`                            // 游戏平台名称
}

func (x *SendGameBetBetMQReq) Reset() {
	*x = SendGameBetBetMQReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGameBetBetMQReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGameBetBetMQReq) ProtoMessage() {}

func (x *SendGameBetBetMQReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGameBetBetMQReq.ProtoReflect.Descriptor instead.
func (*SendGameBetBetMQReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{52}
}

func (x *SendGameBetBetMQReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *SendGameBetBetMQReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SendGameBetBetMQReq) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *SendGameBetBetMQReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetBetOrderId() string {
	if x != nil {
		return x.BetOrderId
	}
	return ""
}

func (x *SendGameBetBetMQReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetGameCategoryName() string {
	if x != nil {
		return x.GameCategoryName
	}
	return ""
}

func (x *SendGameBetBetMQReq) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetPlatformId() int64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *SendGameBetBetMQReq) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

// 定义 SendGameBetBetSettlementMQReq 消息
type SendGameBetBetSettlementMQReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户ID
	UserAccount          string `protobuf:"bytes,2,opt,name=user_account,json=userAccount,proto3" json:"user_account,omitempty"`                                // 用户账号
	CurrencyCode         string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                             // 货币代码
	BetAmount            int64  `protobuf:"varint,4,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                                     // 投注金额（不包含撤单金额）
	UserWinAmount        int64  `protobuf:"varint,5,opt,name=user_win_amount,json=userWinAmount,proto3" json:"user_win_amount,omitempty"`                       // 用户中奖金额
	ValidBetAmount       int64  `protobuf:"varint,6,opt,name=valid_bet_amount,json=validBetAmount,proto3" json:"valid_bet_amount,omitempty"`                    // 有效投注金额
	GameId               int64  `protobuf:"varint,7,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                              // 游戏ID
	TripartiteGameId     int64  `protobuf:"varint,18,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`             // 三方游戏ID
	GameCategoryId       int64  `protobuf:"varint,8,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                    // 游戏类型ID
	GameCategoryName     string `protobuf:"bytes,9,opt,name=game_category_name,json=gameCategoryName,proto3" json:"game_category_name,omitempty"`               // 游戏类型名称
	TripartiteCategoryId int64  `protobuf:"varint,10,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"` // 三方游戏类型ID
	PlatformId           int64  `protobuf:"varint,11,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`                                 // 游戏平台ID
	TripartitePlatformId int64  `protobuf:"varint,17,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方游戏平台ID
	PlatformName         string `protobuf:"bytes,12,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`                            // 游戏平台名称
	SettlementTime       int64  `protobuf:"varint,13,opt,name=settlement_time,json=settlementTime,proto3" json:"settlement_time,omitempty"`                     // 结算时间
	BonusAmount          int64  `protobuf:"varint,14,opt,name=bonus_amount,json=bonusAmount,proto3" json:"bonus_amount,omitempty"`                              // 派奖金额
	BetTime              int64  `protobuf:"varint,15,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                          // 投注时间
	BetOrderId           string `protobuf:"bytes,16,opt,name=bet_order_id,json=betOrderId,proto3" json:"bet_order_id,omitempty"`                                // 投注ID
	GameName             string `protobuf:"bytes,19,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                        // 游戏名称
	IsNotRepeat          bool   `protobuf:"varint,20,opt,name=is_not_repeat,json=isNotRepeat,proto3" json:"is_not_repeat,omitempty"`                            // 是否是重复的结算（一笔订单多笔结算的情况，只处理第一笔结算）
}

func (x *SendGameBetBetSettlementMQReq) Reset() {
	*x = SendGameBetBetSettlementMQReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendGameBetBetSettlementMQReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendGameBetBetSettlementMQReq) ProtoMessage() {}

func (x *SendGameBetBetSettlementMQReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendGameBetBetSettlementMQReq.ProtoReflect.Descriptor instead.
func (*SendGameBetBetSettlementMQReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{53}
}

func (x *SendGameBetBetSettlementMQReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetUserWinAmount() int64 {
	if x != nil {
		return x.UserWinAmount
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetValidBetAmount() int64 {
	if x != nil {
		return x.ValidBetAmount
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetGameCategoryName() string {
	if x != nil {
		return x.GameCategoryName
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetPlatformId() int64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetSettlementTime() int64 {
	if x != nil {
		return x.SettlementTime
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetBonusAmount() int64 {
	if x != nil {
		return x.BonusAmount
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *SendGameBetBetSettlementMQReq) GetBetOrderId() string {
	if x != nil {
		return x.BetOrderId
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *SendGameBetBetSettlementMQReq) GetIsNotRepeat() bool {
	if x != nil {
		return x.IsNotRepeat
	}
	return false
}

type AddRecentlyGamePlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	GameId int64 `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"` // 游戏ID
}

func (x *AddRecentlyGamePlayReq) Reset() {
	*x = AddRecentlyGamePlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRecentlyGamePlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRecentlyGamePlayReq) ProtoMessage() {}

func (x *AddRecentlyGamePlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRecentlyGamePlayReq.ProtoReflect.Descriptor instead.
func (*AddRecentlyGamePlayReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{54}
}

func (x *AddRecentlyGamePlayReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddRecentlyGamePlayReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

// 通过货币获取游戏类型请求参数--
type GetCategoryListByCurrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId   int64  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	LanguageId   string `protobuf:"bytes,4,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
}

func (x *GetCategoryListByCurrReq) Reset() {
	*x = GetCategoryListByCurrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryListByCurrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryListByCurrReq) ProtoMessage() {}

func (x *GetCategoryListByCurrReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryListByCurrReq.ProtoReflect.Descriptor instead.
func (*GetCategoryListByCurrReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{55}
}

func (x *GetCategoryListByCurrReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *GetCategoryListByCurrReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetCategoryListByCurrReq) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *GetCategoryListByCurrReq) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

type GetCategoryListByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*GameCategoryDetail `protobuf:"bytes,20,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetCategoryListByCurrReply) Reset() {
	*x = GetCategoryListByCurrReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryListByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryListByCurrReply) ProtoMessage() {}

func (x *GetCategoryListByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryListByCurrReply.ProtoReflect.Descriptor instead.
func (*GetCategoryListByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{56}
}

func (x *GetCategoryListByCurrReply) GetRows() []*GameCategoryDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GameCategoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键（自增 ID）
	GameCategoryId int64 `protobuf:"varint,1,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	// 三方游戏类型 ID
	TripartiteCategoryId int64 `protobuf:"varint,2,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"`
	// 排名（表示货币在列表中的排序位置）
	Rank int64 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// 货币代码（例如 "INR"）
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// 类型名称（JSON 格式）
	CategoryName string `protobuf:"bytes,5,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	// 类型开关（启用/禁用标志）
	CategorySwitch int64 `protobuf:"varint,6,opt,name=category_switch,json=categorySwitch,proto3" json:"category_switch,omitempty"`
	// 链接类型（1: 外部链接，2: 其他）
	LinkType int64 `protobuf:"varint,7,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// 链接地址
	LinkUrl string `protobuf:"bytes,8,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	// 打开方式（1: 默认，2: 外部 URL）
	OpenMethod int64 `protobuf:"varint,9,opt,name=open_method,json=openMethod,proto3" json:"open_method,omitempty"`
	// 图标地址
	IconUrl string `protobuf:"bytes,10,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// 首页显示行数
	HomeDisplayCount int64 `protobuf:"varint,11,opt,name=home_display_count,json=homeDisplayCount,proto3" json:"home_display_count,omitempty"`
	// 二级页面显示行数
	SecondPageDisplayCount int64 `protobuf:"varint,12,opt,name=second_page_display_count,json=secondPageDisplayCount,proto3" json:"second_page_display_count,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *GameCategoryDetail) Reset() {
	*x = GameCategoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCategoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCategoryDetail) ProtoMessage() {}

func (x *GameCategoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCategoryDetail.ProtoReflect.Descriptor instead.
func (*GameCategoryDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{57}
}

func (x *GameCategoryDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameCategoryDetail) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *GameCategoryDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameCategoryDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameCategoryDetail) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *GameCategoryDetail) GetCategorySwitch() int64 {
	if x != nil {
		return x.CategorySwitch
	}
	return 0
}

func (x *GameCategoryDetail) GetLinkType() int64 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *GameCategoryDetail) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *GameCategoryDetail) GetOpenMethod() int64 {
	if x != nil {
		return x.OpenMethod
	}
	return 0
}

func (x *GameCategoryDetail) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *GameCategoryDetail) GetHomeDisplayCount() int64 {
	if x != nil {
		return x.HomeDisplayCount
	}
	return 0
}

func (x *GameCategoryDetail) GetSecondPageDisplayCount() int64 {
	if x != nil {
		return x.SecondPageDisplayCount
	}
	return 0
}

func (x *GameCategoryDetail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type GetCategorySimpleListByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*GameCategorySimpleDetail `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetCategorySimpleListByCurrReply) Reset() {
	*x = GetCategorySimpleListByCurrReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategorySimpleListByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategorySimpleListByCurrReply) ProtoMessage() {}

func (x *GetCategorySimpleListByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategorySimpleListByCurrReply.ProtoReflect.Descriptor instead.
func (*GetCategorySimpleListByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{58}
}

func (x *GetCategorySimpleListByCurrReply) GetRows() []*GameCategorySimpleDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GameCategorySimpleDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCategoryId       int64  `protobuf:"varint,1,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                   // 主键（自增 ID）
	TripartiteCategoryId int64  `protobuf:"varint,2,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"` // 三方游戏类型 ID
	Rank                 int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`                                                               // 排名（表示货币在列表中的排序位置）
	CurrencyCode         string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 货币代码（例如 "INR"）
	CategoryName         string `protobuf:"bytes,5,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`                            // 类型名称（JSON 格式）
	IconUrl              string `protobuf:"bytes,10,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`                                          // 图标地址
}

func (x *GameCategorySimpleDetail) Reset() {
	*x = GameCategorySimpleDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameCategorySimpleDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCategorySimpleDetail) ProtoMessage() {}

func (x *GameCategorySimpleDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCategorySimpleDetail.ProtoReflect.Descriptor instead.
func (*GameCategorySimpleDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{59}
}

func (x *GameCategorySimpleDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameCategorySimpleDetail) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *GameCategorySimpleDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameCategorySimpleDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameCategorySimpleDetail) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *GameCategorySimpleDetail) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type CategoryNameBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageCode string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryNameBase) Reset() {
	*x = CategoryNameBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryNameBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryNameBase) ProtoMessage() {}

func (x *CategoryNameBase) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryNameBase.ProtoReflect.Descriptor instead.
func (*CategoryNameBase) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{60}
}

func (x *CategoryNameBase) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *CategoryNameBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 通过类型获取游戏列表请求参数
type GetGameListByCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GameCategoryId int64  `protobuf:"varint,3,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId         int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetGameListByCategoryReq) Reset() {
	*x = GetGameListByCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameListByCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListByCategoryReq) ProtoMessage() {}

func (x *GetGameListByCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListByCategoryReq.ProtoReflect.Descriptor instead.
func (*GetGameListByCategoryReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{61}
}

func (x *GetGameListByCategoryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetGameListByCategoryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 通过货币获取平台请求参数
type GetPlatformListByCurrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId           int64  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyCode         string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GameCategoryId       int64  `protobuf:"varint,3,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	TripartiteCategoryId int64  `protobuf:"varint,4,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"`
	UserId               int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetPlatformListByCurrReq) Reset() {
	*x = GetPlatformListByCurrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformListByCurrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformListByCurrReq) ProtoMessage() {}

func (x *GetPlatformListByCurrReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformListByCurrReq.ProtoReflect.Descriptor instead.
func (*GetPlatformListByCurrReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{62}
}

func (x *GetPlatformListByCurrReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *GetPlatformListByCurrReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetPlatformListByCurrReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetPlatformListByCurrReq) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *GetPlatformListByCurrReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 通过货币获取平台响应参数
type GetPlatformListByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*GamePlatformDetail `protobuf:"bytes,20,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetPlatformListByCurrReply) Reset() {
	*x = GetPlatformListByCurrReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformListByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformListByCurrReply) ProtoMessage() {}

func (x *GetPlatformListByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformListByCurrReply.ProtoReflect.Descriptor instead.
func (*GetPlatformListByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{63}
}

func (x *GetPlatformListByCurrReply) GetRows() []*GamePlatformDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 游戏平台详情
type GamePlatformDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePlatformId       int64                      `protobuf:"varint,1,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                   // 自增主键，唯一标识每条记录
	Rank                 int64                      `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                                                               // 排名，表示货币在列表中的排序位置
	TripartitePlatformId int64                      `protobuf:"varint,3,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方的游戏厂商ID
	GameCategoryId       int64                      `protobuf:"varint,4,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                   // 游戏类型ID
	PlatformName         string                     `protobuf:"bytes,5,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`                            // 平台名称
	CurrencyCode         string                     `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 货币代码，例如“INR”
	Style                string                     `protobuf:"bytes,7,opt,name=style,proto3" json:"style,omitempty"`                                                              // 版式风格
	MinimumEntry         float64                    `protobuf:"fixed64,8,opt,name=minimum_entry,json=minimumEntry,proto3" json:"minimum_entry,omitempty"`                          // 最低准入
	PromotionStyle       int64                      `protobuf:"varint,9,opt,name=promotion_style,json=promotionStyle,proto3" json:"promotion_style,omitempty"`                     // 宣传图样式1：默认,2：自定义
	Icon                 string                     `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`                                                               // 图标
	BackgroundColor      string                     `protobuf:"bytes,11,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`                  // 图片背景
	LogoUrl              string                     `protobuf:"bytes,12,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                          // 品牌LOGO
	PromotionImageUrl    string                     `protobuf:"bytes,13,opt,name=promotion_image_url,json=promotionImageUrl,proto3" json:"promotion_image_url,omitempty"`          // 宣传图URL
	HotImageUrl          string                     `protobuf:"bytes,14,opt,name=hot_image_url,json=hotImageUrl,proto3" json:"hot_image_url,omitempty"`                            // 热门图URL
	PlatformRedirection  []*PlatformRedirectionBase `protobuf:"bytes,15,rep,name=platform_redirection,json=platformRedirection,proto3" json:"platform_redirection,omitempty"`      // 平台跳转方式的展示
	GameNum              int64                      `protobuf:"varint,16,opt,name=game_num,json=gameNum,proto3" json:"game_num,omitempty"`                                         // 游戏数量
	IsPlatformActive     int64                      `protobuf:"varint,21,opt,name=is_platform_active,json=isPlatformActive,proto3" json:"is_platform_active,omitempty"`
	IsUnderMaintenance   int64                      `protobuf:"varint,22,opt,name=is_under_maintenance,json=isUnderMaintenance,proto3" json:"is_under_maintenance,omitempty"`
}

func (x *GamePlatformDetail) Reset() {
	*x = GamePlatformDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlatformDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlatformDetail) ProtoMessage() {}

func (x *GamePlatformDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlatformDetail.ProtoReflect.Descriptor instead.
func (*GamePlatformDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{64}
}

func (x *GamePlatformDetail) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GamePlatformDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GamePlatformDetail) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *GamePlatformDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GamePlatformDetail) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *GamePlatformDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GamePlatformDetail) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *GamePlatformDetail) GetMinimumEntry() float64 {
	if x != nil {
		return x.MinimumEntry
	}
	return 0
}

func (x *GamePlatformDetail) GetPromotionStyle() int64 {
	if x != nil {
		return x.PromotionStyle
	}
	return 0
}

func (x *GamePlatformDetail) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GamePlatformDetail) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *GamePlatformDetail) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetPromotionImageUrl() string {
	if x != nil {
		return x.PromotionImageUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetHotImageUrl() string {
	if x != nil {
		return x.HotImageUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetPlatformRedirection() []*PlatformRedirectionBase {
	if x != nil {
		return x.PlatformRedirection
	}
	return nil
}

func (x *GamePlatformDetail) GetGameNum() int64 {
	if x != nil {
		return x.GameNum
	}
	return 0
}

func (x *GamePlatformDetail) GetIsPlatformActive() int64 {
	if x != nil {
		return x.IsPlatformActive
	}
	return 0
}

func (x *GamePlatformDetail) GetIsUnderMaintenance() int64 {
	if x != nil {
		return x.IsUnderMaintenance
	}
	return 0
}

// 通过货币获取平台响应参数
type GetPlatListSimpleByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*GamePlatformSimpleDetail `protobuf:"bytes,20,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetPlatListSimpleByCurrReply) Reset() {
	*x = GetPlatListSimpleByCurrReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatListSimpleByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatListSimpleByCurrReply) ProtoMessage() {}

func (x *GetPlatListSimpleByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatListSimpleByCurrReply.ProtoReflect.Descriptor instead.
func (*GetPlatListSimpleByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{65}
}

func (x *GetPlatListSimpleByCurrReply) GetRows() []*GamePlatformSimpleDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 游戏平台详情
type GamePlatformSimpleDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePlatformId       int64  `protobuf:"varint,1,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                   // 自增主键，唯一标识每条记录
	Rank                 int64  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                                                               // 排名，表示货币在列表中的排序位置
	TripartitePlatformId int64  `protobuf:"varint,3,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方的游戏厂商ID
	GameCategoryId       int64  `protobuf:"varint,4,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                   // 游戏类型ID
	PlatformName         string `protobuf:"bytes,5,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`                            // 平台名称
	CurrencyCode         string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 货币代码，例如“INR”
	Icon                 string `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`                                                                // 平台图标
	LogoUrl              string `protobuf:"bytes,8,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                           // 品牌LOGO
}

func (x *GamePlatformSimpleDetail) Reset() {
	*x = GamePlatformSimpleDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlatformSimpleDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlatformSimpleDetail) ProtoMessage() {}

func (x *GamePlatformSimpleDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlatformSimpleDetail.ProtoReflect.Descriptor instead.
func (*GamePlatformSimpleDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{66}
}

func (x *GamePlatformSimpleDetail) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GamePlatformSimpleDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GamePlatformSimpleDetail) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *GamePlatformSimpleDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GamePlatformSimpleDetail) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *GamePlatformSimpleDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GamePlatformSimpleDetail) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GamePlatformSimpleDetail) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

// 平台跳转方式的基础类型
type PlatformRedirectionBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformOsType int64 `protobuf:"varint,1,opt,name=platform_os_type,json=platformOsType,proto3" json:"platform_os_type,omitempty"`
	OpenMethodType int64 `protobuf:"varint,2,opt,name=open_method_type,json=openMethodType,proto3" json:"open_method_type,omitempty"`
}

func (x *PlatformRedirectionBase) Reset() {
	*x = PlatformRedirectionBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformRedirectionBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformRedirectionBase) ProtoMessage() {}

func (x *PlatformRedirectionBase) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformRedirectionBase.ProtoReflect.Descriptor instead.
func (*PlatformRedirectionBase) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{67}
}

func (x *PlatformRedirectionBase) GetPlatformOsType() int64 {
	if x != nil {
		return x.PlatformOsType
	}
	return 0
}

func (x *PlatformRedirectionBase) GetOpenMethodType() int64 {
	if x != nil {
		return x.OpenMethodType
	}
	return 0
}

// 游戏详情
type GameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId             int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	TripartiteGameId   int64  `protobuf:"varint,2,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`
	Rank               int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	CurrencyCode       string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GamePlatformId     int64  `protobuf:"varint,5,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId     int64  `protobuf:"varint,6,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	GameName           string `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	IsFavorite         int64  `protobuf:"varint,8,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"` //  收藏状态(1:普通，2：收藏)
	IsFeatured         int64  `protobuf:"varint,9,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"` //  是否推荐(1:开启，2：关闭)
	IsJumpTab          int64  `protobuf:"varint,10,opt,name=is_jump_tab,json=isJumpTab,proto3" json:"is_jump_tab,omitempty"` //  是否开启跳转(1:开启，2：关闭)
	WalletModel        int64  `protobuf:"varint,13,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`
	HorizontalSupport  int64  `protobuf:"varint,14,opt,name=horizontal_support,json=horizontalSupport,proto3" json:"horizontal_support,omitempty"`
	VerticalSupport    int64  `protobuf:"varint,15,opt,name=vertical_support,json=verticalSupport,proto3" json:"vertical_support,omitempty"`
	TryGameSupport     int64  `protobuf:"varint,16,opt,name=try_game_support,json=tryGameSupport,proto3" json:"try_game_support,omitempty"`
	Style              string `protobuf:"bytes,17,opt,name=style,proto3" json:"style,omitempty"`
	IconStyle          int64  `protobuf:"varint,18,opt,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
	LogoUrl            string `protobuf:"bytes,19,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IconImageUrl       string `protobuf:"bytes,20,opt,name=icon_image_url,json=iconImageUrl,proto3" json:"icon_image_url,omitempty"`
	IsGameActive       int64  `protobuf:"varint,21,opt,name=is_game_active,json=isGameActive,proto3" json:"is_game_active,omitempty"`
	IsUnderMaintenance int64  `protobuf:"varint,22,opt,name=is_under_maintenance,json=isUnderMaintenance,proto3" json:"is_under_maintenance,omitempty"`
}

func (x *GameDetails) Reset() {
	*x = GameDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDetails) ProtoMessage() {}

func (x *GameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDetails.ProtoReflect.Descriptor instead.
func (*GameDetails) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{68}
}

func (x *GameDetails) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameDetails) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameDetails) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameDetails) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GameDetails) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameDetails) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameDetails) GetIsFavorite() int64 {
	if x != nil {
		return x.IsFavorite
	}
	return 0
}

func (x *GameDetails) GetIsFeatured() int64 {
	if x != nil {
		return x.IsFeatured
	}
	return 0
}

func (x *GameDetails) GetIsJumpTab() int64 {
	if x != nil {
		return x.IsJumpTab
	}
	return 0
}

func (x *GameDetails) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameDetails) GetHorizontalSupport() int64 {
	if x != nil {
		return x.HorizontalSupport
	}
	return 0
}

func (x *GameDetails) GetVerticalSupport() int64 {
	if x != nil {
		return x.VerticalSupport
	}
	return 0
}

func (x *GameDetails) GetTryGameSupport() int64 {
	if x != nil {
		return x.TryGameSupport
	}
	return 0
}

func (x *GameDetails) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *GameDetails) GetIconStyle() int64 {
	if x != nil {
		return x.IconStyle
	}
	return 0
}

func (x *GameDetails) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GameDetails) GetIconImageUrl() string {
	if x != nil {
		return x.IconImageUrl
	}
	return ""
}

func (x *GameDetails) GetIsGameActive() int64 {
	if x != nil {
		return x.IsGameActive
	}
	return 0
}

func (x *GameDetails) GetIsUnderMaintenance() int64 {
	if x != nil {
		return x.IsUnderMaintenance
	}
	return 0
}

type GameSimpleDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId           int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	TripartiteGameId int64  `protobuf:"varint,2,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`
	Rank             int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	CurrencyCode     string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GamePlatformId   int64  `protobuf:"varint,5,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId   int64  `protobuf:"varint,6,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	GameName         string `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	LogoUrl          string `protobuf:"bytes,19,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IconImageUrl     string `protobuf:"bytes,20,opt,name=icon_image_url,json=iconImageUrl,proto3" json:"icon_image_url,omitempty"`
}

func (x *GameSimpleDetails) Reset() {
	*x = GameSimpleDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSimpleDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSimpleDetails) ProtoMessage() {}

func (x *GameSimpleDetails) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSimpleDetails.ProtoReflect.Descriptor instead.
func (*GameSimpleDetails) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{69}
}

func (x *GameSimpleDetails) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameSimpleDetails) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameSimpleDetails) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameSimpleDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameSimpleDetails) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GameSimpleDetails) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameSimpleDetails) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameSimpleDetails) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GameSimpleDetails) GetIconImageUrl() string {
	if x != nil {
		return x.IconImageUrl
	}
	return ""
}

// 通过类型获取游戏列表响应参数
type GetGameDetailsListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*GameDetails `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetGameDetailsListReply) Reset() {
	*x = GetGameDetailsListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameDetailsListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDetailsListReply) ProtoMessage() {}

func (x *GetGameDetailsListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDetailsListReply.ProtoReflect.Descriptor instead.
func (*GetGameDetailsListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{70}
}

func (x *GetGameDetailsListReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameDetailsListReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameDetailsListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGameDetailsListReply) GetRows() []*GameDetails {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GetGameSimpleListBySearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64                `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64                `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*GameSimpleDetails `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetGameSimpleListBySearchReply) Reset() {
	*x = GetGameSimpleListBySearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameSimpleListBySearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameSimpleListBySearchReply) ProtoMessage() {}

func (x *GetGameSimpleListBySearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameSimpleListBySearchReply.ProtoReflect.Descriptor instead.
func (*GetGameSimpleListBySearchReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{71}
}

func (x *GetGameSimpleListBySearchReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameSimpleListBySearchReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameSimpleListBySearchReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGameSimpleListBySearchReply) GetRows() []*GameSimpleDetails {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 通过平台获取游戏列表请求参数
type GetGameListByPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GamePlatformId int64  `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId         int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetGameListByPlatformReq) Reset() {
	*x = GetGameListByPlatformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameListByPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListByPlatformReq) ProtoMessage() {}

func (x *GetGameListByPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListByPlatformReq.ProtoReflect.Descriptor instead.
func (*GetGameListByPlatformReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{72}
}

func (x *GetGameListByPlatformReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetGameListByPlatformReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GamePlatformDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId         int64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameCategoryId int64 `protobuf:"varint,2,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	GamePlatformId int64 `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
}

func (x *GamePlatformDetailsReq) Reset() {
	*x = GamePlatformDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlatformDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlatformDetailsReq) ProtoMessage() {}

func (x *GamePlatformDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlatformDetailsReq.ProtoReflect.Descriptor instead.
func (*GamePlatformDetailsReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{73}
}

func (x *GamePlatformDetailsReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GamePlatformDetailsReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GamePlatformDetailsReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

// 通过搜索获取游戏列表请求参数
type GetGameListBySearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchValue    string `protobuf:"bytes,3,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId         int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GamePlatformId int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId int64  `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
}

func (x *GetGameListBySearchReq) Reset() {
	*x = GetGameListBySearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameListBySearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListBySearchReq) ProtoMessage() {}

func (x *GetGameListBySearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListBySearchReq.ProtoReflect.Descriptor instead.
func (*GetGameListBySearchReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{74}
}

func (x *GetGameListBySearchReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListBySearchReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListBySearchReq) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *GetGameListBySearchReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetGameListBySearchReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameListBySearchReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameListBySearchReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

// 添加收藏
type GameHandelFavoriteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId       int64  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GameHandelFavoriteReq) Reset() {
	*x = GameHandelFavoriteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHandelFavoriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHandelFavoriteReq) ProtoMessage() {}

func (x *GameHandelFavoriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHandelFavoriteReq.ProtoReflect.Descriptor instead.
func (*GameHandelFavoriteReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{75}
}

func (x *GameHandelFavoriteReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameHandelFavoriteReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameHandelFavoriteReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过搜索获取游戏列表请求参数
type GetGameFavoriteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId         int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GamePlatformId int64 `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId int64 `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"` // 游戏类别ID
}

func (x *GetGameFavoriteListReq) Reset() {
	*x = GetGameFavoriteListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameFavoriteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameFavoriteListReq) ProtoMessage() {}

func (x *GetGameFavoriteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameFavoriteListReq.ProtoReflect.Descriptor instead.
func (*GetGameFavoriteListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{76}
}

func (x *GetGameFavoriteListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

type GetUserFavoriteIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserFavoriteIdsReq) Reset() {
	*x = GetUserFavoriteIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFavoriteIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFavoriteIdsReq) ProtoMessage() {}

func (x *GetUserFavoriteIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFavoriteIdsReq.ProtoReflect.Descriptor instead.
func (*GetUserFavoriteIdsReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{77}
}

func (x *GetUserFavoriteIdsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserFavoriteIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FavoriteIds map[int64]bool `protobuf:"bytes,1,rep,name=favoriteIds,proto3" json:"favoriteIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUserFavoriteIdsReply) Reset() {
	*x = GetUserFavoriteIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserFavoriteIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFavoriteIdsReply) ProtoMessage() {}

func (x *GetUserFavoriteIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFavoriteIdsReply.ProtoReflect.Descriptor instead.
func (*GetUserFavoriteIdsReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{78}
}

func (x *GetUserFavoriteIdsReply) GetFavoriteIds() map[int64]bool {
	if x != nil {
		return x.FavoriteIds
	}
	return nil
}

// 通过搜索获取游戏列表请求参数
type GetGameRecentlyListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId         int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GamePlatformId int64 `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId int64 `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"` // 游戏类别ID
}

func (x *GetGameRecentlyListReq) Reset() {
	*x = GetGameRecentlyListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameRecentlyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameRecentlyListReq) ProtoMessage() {}

func (x *GetGameRecentlyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameRecentlyListReq.ProtoReflect.Descriptor instead.
func (*GetGameRecentlyListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{79}
}

func (x *GetGameRecentlyListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameRecentlyListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameRecentlyListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameRecentlyListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameRecentlyListReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

// 热门游戏列表
type GetHotGameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GamePlatformId int64  `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId         int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameCategoryId int64  `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"` // 游戏类别ID
}

func (x *GetHotGameListReq) Reset() {
	*x = GetHotGameListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotGameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGameListReq) ProtoMessage() {}

func (x *GetHotGameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGameListReq.ProtoReflect.Descriptor instead.
func (*GetHotGameListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{80}
}

func (x *GetHotGameListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHotGameListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetHotGameListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetHotGameListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetHotGameListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetHotGameListReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

// 热门平台列表
type GetHotPlatformListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetHotPlatformListReq) Reset() {
	*x = GetHotPlatformListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotPlatformListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotPlatformListReq) ProtoMessage() {}

func (x *GetHotPlatformListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotPlatformListReq.ProtoReflect.Descriptor instead.
func (*GetHotPlatformListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{81}
}

func (x *GetHotPlatformListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetHotPlatformListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*GamePlatformDetail `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetHotPlatformListReply) Reset() {
	*x = GetHotPlatformListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHotPlatformListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotPlatformListReply) ProtoMessage() {}

func (x *GetHotPlatformListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotPlatformListReply.ProtoReflect.Descriptor instead.
func (*GetHotPlatformListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{82}
}

func (x *GetHotPlatformListReply) GetRows() []*GamePlatformDetail {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GameDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GameDetailsReq) Reset() {
	*x = GameDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDetailsReq) ProtoMessage() {}

func (x *GameDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDetailsReq.ProtoReflect.Descriptor instead.
func (*GameDetailsReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{83}
}

func (x *GameDetailsReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameDetailsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserBetRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page           int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                             // 页码
	PageSize       int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                     // 每页数量
	StartTime      int64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                  // 查询下注开始时间(毫秒)
	EndTime        int64  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                        // 查询下注结束时间(毫秒)
	GamePlatformId int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 游戏平台ID
	GameCategoryId int64  `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"` // 游戏类别ID
	GameId         int64  `protobuf:"varint,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                           // 游戏ID
	Status         int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                         // 状态: 0-全部，1-未结算，2-已结算，3-已撤单，4-无效
	SortOrder      int64  `protobuf:"varint,10,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                 // 排序方式: 1-正序，2-倒序(有效投注金额)
	CurrencyCode   string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetUserBetRecordListReq) Reset() {
	*x = GetUserBetRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBetRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBetRecordListReq) ProtoMessage() {}

func (x *GetUserBetRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBetRecordListReq.ProtoReflect.Descriptor instead.
func (*GetUserBetRecordListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{84}
}

func (x *GetUserBetRecordListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *GetUserBetRecordListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过类型获取游戏列表响应参数
type GetUserBetRecordListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Rows     []*BetRecordInfo `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetUserBetRecordListReply) Reset() {
	*x = GetUserBetRecordListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBetRecordListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBetRecordListReply) ProtoMessage() {}

func (x *GetUserBetRecordListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBetRecordListReply.ProtoReflect.Descriptor instead.
func (*GetUserBetRecordListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{85}
}

func (x *GetUserBetRecordListReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserBetRecordListReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUserBetRecordListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUserBetRecordListReply) GetRows() []*BetRecordInfo {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 投注详情
type BetRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId          string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                              // 注单编号
	BetTime          int64  `protobuf:"varint,2,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                             // 投注时间
	Status           int64  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                              // 状态: 1-未结算，2-已结算，3-已撤单，4-无效
	GamePlatformId   int64  `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`      // 游戏平台ID
	GamePlatformName string `protobuf:"bytes,5,opt,name=game_platform_name,json=gamePlatformName,proto3" json:"game_platform_name,omitempty"` // 游戏平台名称
	GameCategoryId   int64  `protobuf:"varint,6,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`      // 游戏类别ID
	GameCategoryName string `protobuf:"bytes,7,opt,name=game_category_name,json=gameCategoryName,proto3" json:"game_category_name,omitempty"` // 游戏类别名称
	GameId           int64  `protobuf:"varint,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                // 游戏ID
	GameName         string `protobuf:"bytes,9,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                           // 游戏名称
	OrderCount       string `protobuf:"bytes,10,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`                    // 注单数量
	BetAmount        int64  `protobuf:"varint,11,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                      // 投注金额
	ValidBetAmount   int64  `protobuf:"varint,12,opt,name=valid_bet_amount,json=validBetAmount,proto3" json:"valid_bet_amount,omitempty"`     // 有效投注金额
	UserWinLoss      int64  `protobuf:"varint,13,opt,name=user_win_loss,json=userWinLoss,proto3" json:"user_win_loss,omitempty"`              // 输赢金额
}

func (x *BetRecordInfo) Reset() {
	*x = BetRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetRecordInfo) ProtoMessage() {}

func (x *BetRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetRecordInfo.ProtoReflect.Descriptor instead.
func (*BetRecordInfo) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{86}
}

func (x *BetRecordInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *BetRecordInfo) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *BetRecordInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BetRecordInfo) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *BetRecordInfo) GetGamePlatformName() string {
	if x != nil {
		return x.GamePlatformName
	}
	return ""
}

func (x *BetRecordInfo) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *BetRecordInfo) GetGameCategoryName() string {
	if x != nil {
		return x.GameCategoryName
	}
	return ""
}

func (x *BetRecordInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetRecordInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *BetRecordInfo) GetOrderCount() string {
	if x != nil {
		return x.OrderCount
	}
	return ""
}

func (x *BetRecordInfo) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *BetRecordInfo) GetValidBetAmount() int64 {
	if x != nil {
		return x.ValidBetAmount
	}
	return 0
}

func (x *BetRecordInfo) GetUserWinLoss() int64 {
	if x != nil {
		return x.UserWinLoss
	}
	return 0
}

type GetUserBetRecordSummaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartTime      int64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                  // 查询下注开始时间(毫秒)
	EndTime        int64  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                        // 查询下注结束时间(毫秒)
	GamePlatformId int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"` // 游戏平台ID
	GameCategoryId int64  `protobuf:"varint,7,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"` // 游戏类别ID
	SortOrder      int64  `protobuf:"varint,10,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`                 // 排序方式: 1-正序，2-倒序(投注金额)
	CurrencyCode   string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetUserBetRecordSummaryReq) Reset() {
	*x = GetUserBetRecordSummaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBetRecordSummaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBetRecordSummaryReq) ProtoMessage() {}

func (x *GetUserBetRecordSummaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBetRecordSummaryReq.ProtoReflect.Descriptor instead.
func (*GetUserBetRecordSummaryReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{87}
}

func (x *GetUserBetRecordSummaryReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *GetUserBetRecordSummaryReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetUserBetRecordSummaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetSummaryList      []*BetSummaryInfo `protobuf:"bytes,1,rep,name=bet_summary_list,json=betSummaryList,proto3" json:"bet_summary_list,omitempty"`                   // 注单详情列表
	TotalOrderCount     int64             `protobuf:"varint,2,opt,name=total_order_count,json=totalOrderCount,proto3" json:"total_order_count,omitempty"`               // 注单数量
	TotalValidBetAmount int64             `protobuf:"varint,3,opt,name=total_valid_bet_amount,json=totalValidBetAmount,proto3" json:"total_valid_bet_amount,omitempty"` // 有效投注金额
	TotalLoseWinAmount  int64             `protobuf:"varint,4,opt,name=total_lose_win_amount,json=totalLoseWinAmount,proto3" json:"total_lose_win_amount,omitempty"`    // 输赢金额
}

func (x *GetUserBetRecordSummaryReply) Reset() {
	*x = GetUserBetRecordSummaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBetRecordSummaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBetRecordSummaryReply) ProtoMessage() {}

func (x *GetUserBetRecordSummaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBetRecordSummaryReply.ProtoReflect.Descriptor instead.
func (*GetUserBetRecordSummaryReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{88}
}

func (x *GetUserBetRecordSummaryReply) GetBetSummaryList() []*BetSummaryInfo {
	if x != nil {
		return x.BetSummaryList
	}
	return nil
}

func (x *GetUserBetRecordSummaryReply) GetTotalOrderCount() int64 {
	if x != nil {
		return x.TotalOrderCount
	}
	return 0
}

func (x *GetUserBetRecordSummaryReply) GetTotalValidBetAmount() int64 {
	if x != nil {
		return x.TotalValidBetAmount
	}
	return 0
}

func (x *GetUserBetRecordSummaryReply) GetTotalLoseWinAmount() int64 {
	if x != nil {
		return x.TotalLoseWinAmount
	}
	return 0
}

type BetSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetTime          string `protobuf:"bytes,1,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                              // 投注时间
	GamePlatformId   int64  `protobuf:"varint,2,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`      // 游戏平台ID
	GamePlatformName string `protobuf:"bytes,3,opt,name=game_platform_name,json=gamePlatformName,proto3" json:"game_platform_name,omitempty"` // 游戏平台名称
	GameCategoryId   int64  `protobuf:"varint,4,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`      // 游戏类别ID
	GameCategoryName string `protobuf:"bytes,5,opt,name=game_category_name,json=gameCategoryName,proto3" json:"game_category_name,omitempty"` // 游戏类别名称
	GameId           int64  `protobuf:"varint,6,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                // 游戏ID
	GameName         string `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                           // 游戏名称
	OrderCount       int64  `protobuf:"varint,8,opt,name=order_count,json=orderCount,proto3" json:"order_count,omitempty"`                    // 注单数量
	BetAmount        int64  `protobuf:"varint,9,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                       // 投注金额
	UserWinLoss      int64  `protobuf:"varint,10,opt,name=user_win_loss,json=userWinLoss,proto3" json:"user_win_loss,omitempty"`              // 输赢金额
}

func (x *BetSummaryInfo) Reset() {
	*x = BetSummaryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSummaryInfo) ProtoMessage() {}

func (x *BetSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSummaryInfo.ProtoReflect.Descriptor instead.
func (*BetSummaryInfo) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{89}
}

func (x *BetSummaryInfo) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *BetSummaryInfo) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *BetSummaryInfo) GetGamePlatformName() string {
	if x != nil {
		return x.GamePlatformName
	}
	return ""
}

func (x *BetSummaryInfo) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *BetSummaryInfo) GetGameCategoryName() string {
	if x != nil {
		return x.GameCategoryName
	}
	return ""
}

func (x *BetSummaryInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetSummaryInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *BetSummaryInfo) GetOrderCount() int64 {
	if x != nil {
		return x.OrderCount
	}
	return 0
}

func (x *BetSummaryInfo) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *BetSummaryInfo) GetUserWinLoss() int64 {
	if x != nil {
		return x.UserWinLoss
	}
	return 0
}

type GetHomeGameItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num             int64   `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	CurrencyCode    string  `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GameCategoryIds []int64 `protobuf:"varint,3,rep,packed,name=game_category_ids,json=gameCategoryIds,proto3" json:"game_category_ids,omitempty"`
	UserId          int64   `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetHomeGameItemReq) Reset() {
	*x = GetHomeGameItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomeGameItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomeGameItemReq) ProtoMessage() {}

func (x *GetHomeGameItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomeGameItemReq.ProtoReflect.Descriptor instead.
func (*GetHomeGameItemReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{90}
}

func (x *GetHomeGameItemReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *GetHomeGameItemReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetHomeGameItemReq) GetGameCategoryIds() []int64 {
	if x != nil {
		return x.GameCategoryIds
	}
	return nil
}

func (x *GetHomeGameItemReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type PlatformDetailsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GamePlatformDetail `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PlatformDetailsList) Reset() {
	*x = PlatformDetailsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformDetailsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformDetailsList) ProtoMessage() {}

func (x *PlatformDetailsList) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformDetailsList.ProtoReflect.Descriptor instead.
func (*PlatformDetailsList) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{91}
}

func (x *PlatformDetailsList) GetItems() []*GamePlatformDetail {
	if x != nil {
		return x.Items
	}
	return nil
}

type GameDetailsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*GameDetails `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GameDetailsList) Reset() {
	*x = GameDetailsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDetailsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDetailsList) ProtoMessage() {}

func (x *GameDetailsList) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDetailsList.ProtoReflect.Descriptor instead.
func (*GameDetailsList) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{92}
}

func (x *GameDetailsList) GetItems() []*GameDetails {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetHomePlatformItemsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeItem map[int64]*PlatformDetailsList `protobuf:"bytes,1,rep,name=home_item,json=homeItem,proto3" json:"home_item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetHomePlatformItemsReply) Reset() {
	*x = GetHomePlatformItemsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomePlatformItemsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomePlatformItemsReply) ProtoMessage() {}

func (x *GetHomePlatformItemsReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomePlatformItemsReply.ProtoReflect.Descriptor instead.
func (*GetHomePlatformItemsReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{93}
}

func (x *GetHomePlatformItemsReply) GetHomeItem() map[int64]*PlatformDetailsList {
	if x != nil {
		return x.HomeItem
	}
	return nil
}

type GetHomeGameItemsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeItem map[int64]*GameDetailsList `protobuf:"bytes,1,rep,name=home_item,json=homeItem,proto3" json:"home_item,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetHomeGameItemsReply) Reset() {
	*x = GetHomeGameItemsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomeGameItemsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomeGameItemsReply) ProtoMessage() {}

func (x *GetHomeGameItemsReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomeGameItemsReply.ProtoReflect.Descriptor instead.
func (*GetHomeGameItemsReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{94}
}

func (x *GetHomeGameItemsReply) GetHomeItem() map[int64]*GameDetailsList {
	if x != nil {
		return x.HomeItem
	}
	return nil
}

type GetGameConfInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
}

func (x *GetGameConfInfoReq) Reset() {
	*x = GetGameConfInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameConfInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameConfInfoReq) ProtoMessage() {}

func (x *GetGameConfInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameConfInfoReq.ProtoReflect.Descriptor instead.
func (*GetGameConfInfoReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{95}
}

func (x *GetGameConfInfoReq) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

type GetGameConfInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigValue string `protobuf:"bytes,1,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
}

func (x *GetGameConfInfoReply) Reset() {
	*x = GetGameConfInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameConfInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameConfInfoReply) ProtoMessage() {}

func (x *GetGameConfInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameConfInfoReply.ProtoReflect.Descriptor instead.
func (*GetGameConfInfoReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{96}
}

func (x *GetGameConfInfoReply) GetConfigValue() string {
	if x != nil {
		return x.ConfigValue
	}
	return ""
}

// 通过搜索获取游戏列表请求参数
type GetNewGameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                 int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchValue          string `protobuf:"bytes,3,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	CurrencyCode         string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	UserId               int64  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GamePlatformId       int64  `protobuf:"varint,6,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	TripartiteCategoryId int64  `protobuf:"varint,7,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"`
	Typology             int64  `protobuf:"varint,8,opt,name=typology,proto3" json:"typology,omitempty"` //  1 :热门，2：最近，3：收藏 0 全部 筛选的子类型
}

func (x *GetNewGameListReq) Reset() {
	*x = GetNewGameListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewGameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewGameListReq) ProtoMessage() {}

func (x *GetNewGameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewGameListReq.ProtoReflect.Descriptor instead.
func (*GetNewGameListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{97}
}

func (x *GetNewGameListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNewGameListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNewGameListReq) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *GetNewGameListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetNewGameListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetNewGameListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetNewGameListReq) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *GetNewGameListReq) GetTypology() int64 {
	if x != nil {
		return x.Typology
	}
	return 0
}

type GetNewGameListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total     int64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	TotalPage int64            `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	Rows      []*GameValueItem `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *GetNewGameListReply) Reset() {
	*x = GetNewGameListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewGameListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewGameListReply) ProtoMessage() {}

func (x *GetNewGameListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewGameListReply.ProtoReflect.Descriptor instead.
func (*GetNewGameListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{98}
}

func (x *GetNewGameListReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNewGameListReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNewGameListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetNewGameListReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetNewGameListReply) GetRows() []*GameValueItem {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GameValueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryType              int64   `protobuf:"varint,1,opt,name=category_type,json=categoryType,proto3" json:"category_type,omitempty"`                                            // 类别类型
	Rank                      int64   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                                                                                // 排名
	CurrencyCode              string  `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                                             // 货币代码
	GameCategoryId            int64   `protobuf:"varint,4,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                                    // 游戏类别ID
	GameId                    int64   `protobuf:"varint,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                                              // 游戏ID
	TripartiteGameId          int64   `protobuf:"varint,6,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`                              // 第三方游戏ID
	GameName                  string  `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                                         // 游戏名称
	GamePlatformId            int64   `protobuf:"varint,8,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                                    // 游戏平台ID
	TripartiteGamePlatformId  int64   `protobuf:"varint,9,opt,name=tripartite_game_platform_id,json=tripartiteGamePlatformId,proto3" json:"tripartite_game_platform_id,omitempty"`    // 第三方游戏平台ID
	GamePlatformName          string  `protobuf:"bytes,10,opt,name=game_platform_name,json=gamePlatformName,proto3" json:"game_platform_name,omitempty"`                              // 游戏平台名称
	IsFavorite                int64   `protobuf:"varint,11,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`                                                 // 是否收藏
	IsFeatured                int64   `protobuf:"varint,12,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`                                                 // 是否为特色游戏
	IsJumpTab                 int64   `protobuf:"varint,13,opt,name=is_jump_tab,json=isJumpTab,proto3" json:"is_jump_tab,omitempty"`                                                  // 是否跳转标签
	WalletModel               int64   `protobuf:"varint,14,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                                              // 钱包模式
	HorizontalSupport         int64   `protobuf:"varint,15,opt,name=horizontal_support,json=horizontalSupport,proto3" json:"horizontal_support,omitempty"`                            // 横屏支持
	VerticalSupport           int64   `protobuf:"varint,16,opt,name=vertical_support,json=verticalSupport,proto3" json:"vertical_support,omitempty"`                                  // 竖屏支持
	TryGameSupport            int64   `protobuf:"varint,17,opt,name=try_game_support,json=tryGameSupport,proto3" json:"try_game_support,omitempty"`                                   // 试玩支持
	PlatformMinimumEntry      float64 `protobuf:"fixed64,18,opt,name=platform_minimum_entry,json=platformMinimumEntry,proto3" json:"platform_minimum_entry,omitempty"`                // 平台最低准入
	PlatformPromotionStyle    int64   `protobuf:"varint,19,opt,name=platform_promotion_style,json=platformPromotionStyle,proto3" json:"platform_promotion_style,omitempty"`           // 平台促销风格
	PlatformIcon              string  `protobuf:"bytes,20,opt,name=platform_icon,json=platformIcon,proto3" json:"platform_icon,omitempty"`                                            // 平台图标
	PlatformBackgroundColor   string  `protobuf:"bytes,21,opt,name=platform_background_color,json=platformBackgroundColor,proto3" json:"platform_background_color,omitempty"`         // 平台背景颜色
	PlatformLogoUrl           string  `protobuf:"bytes,22,opt,name=platform_logo_url,json=platformLogoUrl,proto3" json:"platform_logo_url,omitempty"`                                 // 平台 Logo URL
	PlatformPromotionImageUrl string  `protobuf:"bytes,23,opt,name=platform_promotion_image_url,json=platformPromotionImageUrl,proto3" json:"platform_promotion_image_url,omitempty"` // 平台促销图片 URL
	PlatformHotImageUrl       string  `protobuf:"bytes,24,opt,name=platform_hot_image_url,json=platformHotImageUrl,proto3" json:"platform_hot_image_url,omitempty"`                   // 平台热门图片 URL
	GameIconStyle             int64   `protobuf:"varint,25,opt,name=game_icon_style,json=gameIconStyle,proto3" json:"game_icon_style,omitempty"`                                      // 图标风格
	GameLogoUrl               string  `protobuf:"bytes,26,opt,name=game_logo_url,json=gameLogoUrl,proto3" json:"game_logo_url,omitempty"`                                             // 游戏 Logo URL
	GameIconImageUrl          string  `protobuf:"bytes,27,opt,name=game_icon_image_url,json=gameIconImageUrl,proto3" json:"game_icon_image_url,omitempty"`                            // 游戏图标图片 URL
}

func (x *GameValueItem) Reset() {
	*x = GameValueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameValueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameValueItem) ProtoMessage() {}

func (x *GameValueItem) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameValueItem.ProtoReflect.Descriptor instead.
func (*GameValueItem) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{99}
}

func (x *GameValueItem) GetCategoryType() int64 {
	if x != nil {
		return x.CategoryType
	}
	return 0
}

func (x *GameValueItem) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameValueItem) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameValueItem) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameValueItem) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameValueItem) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameValueItem) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameValueItem) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GameValueItem) GetTripartiteGamePlatformId() int64 {
	if x != nil {
		return x.TripartiteGamePlatformId
	}
	return 0
}

func (x *GameValueItem) GetGamePlatformName() string {
	if x != nil {
		return x.GamePlatformName
	}
	return ""
}

func (x *GameValueItem) GetIsFavorite() int64 {
	if x != nil {
		return x.IsFavorite
	}
	return 0
}

func (x *GameValueItem) GetIsFeatured() int64 {
	if x != nil {
		return x.IsFeatured
	}
	return 0
}

func (x *GameValueItem) GetIsJumpTab() int64 {
	if x != nil {
		return x.IsJumpTab
	}
	return 0
}

func (x *GameValueItem) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameValueItem) GetHorizontalSupport() int64 {
	if x != nil {
		return x.HorizontalSupport
	}
	return 0
}

func (x *GameValueItem) GetVerticalSupport() int64 {
	if x != nil {
		return x.VerticalSupport
	}
	return 0
}

func (x *GameValueItem) GetTryGameSupport() int64 {
	if x != nil {
		return x.TryGameSupport
	}
	return 0
}

func (x *GameValueItem) GetPlatformMinimumEntry() float64 {
	if x != nil {
		return x.PlatformMinimumEntry
	}
	return 0
}

func (x *GameValueItem) GetPlatformPromotionStyle() int64 {
	if x != nil {
		return x.PlatformPromotionStyle
	}
	return 0
}

func (x *GameValueItem) GetPlatformIcon() string {
	if x != nil {
		return x.PlatformIcon
	}
	return ""
}

func (x *GameValueItem) GetPlatformBackgroundColor() string {
	if x != nil {
		return x.PlatformBackgroundColor
	}
	return ""
}

func (x *GameValueItem) GetPlatformLogoUrl() string {
	if x != nil {
		return x.PlatformLogoUrl
	}
	return ""
}

func (x *GameValueItem) GetPlatformPromotionImageUrl() string {
	if x != nil {
		return x.PlatformPromotionImageUrl
	}
	return ""
}

func (x *GameValueItem) GetPlatformHotImageUrl() string {
	if x != nil {
		return x.PlatformHotImageUrl
	}
	return ""
}

func (x *GameValueItem) GetGameIconStyle() int64 {
	if x != nil {
		return x.GameIconStyle
	}
	return 0
}

func (x *GameValueItem) GetGameLogoUrl() string {
	if x != nil {
		return x.GameLogoUrl
	}
	return ""
}

func (x *GameValueItem) GetGameIconImageUrl() string {
	if x != nil {
		return x.GameIconImageUrl
	}
	return ""
}

type GetGameTransferOrderStatusReplyOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   //用户ID
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                 //订单编号
	TransferType int64  `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"` //交易类型：1:转入 2:转出
	Status       int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                 //转账状态， 1:处理中 2:处理成功 3:处理失败
	Amounts      string `protobuf:"bytes,6,opt,name=amounts,proto3" json:"amounts,omitempty"`                                //订单金额
	Msg          string `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`                                        //信息
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) Reset() {
	*x = GetGameTransferOrderStatusReplyOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_game_v1_game_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReplyOrderInfo) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReplyOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReplyOrderInfo.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReplyOrderInfo) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{15, 1}
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetAmounts() string {
	if x != nil {
		return x.Amounts
	}
	return ""
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_game_v1_game_proto protoreflect.FileDescriptor

var file_game_v1_game_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x09, 0x0a,
	0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x70, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xed,
	0x02, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x2b,
	0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xce, 0x02, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x22, 0x2a, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xa1, 0x01, 0x0a,
	0x19, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0xd2, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x1a, 0x6e, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa9, 0x01, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x7b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x86, 0x04,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x8d, 0x03, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70,
	0x6f, 0x73, 0x74, 0x42, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x69, 0x5f,
	0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x77, 0x65, 0x69, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x11, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a,
	0x0e, 0x77, 0x65, 0x69, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x47, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcc, 0x03, 0x0a, 0x14,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x14,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f,
	0x03, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0x73, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x91, 0x02, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x9a, 0x01, 0x0a, 0x21, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x22, 0xca, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x02,
	0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1f, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbf, 0x04, 0x0a, 0x18, 0x54, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xc3, 0x05, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x42, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x62, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x54, 0x61, 0x62,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x9f, 0x03, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x42, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x52, 0x13, 0x61, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0xf5, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a,
	0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x5e, 0x0a,
	0x1b, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x17, 0x61, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x22, 0x8d, 0x04,
	0x0a, 0x16, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xd4, 0x02,
	0x0a, 0x1a, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc0, 0x04, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x42, 0x65, 0x74, 0x4d, 0x51, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x65, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x8c, 0x06, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x65, 0x74, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x51, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x69,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x22, 0x4a, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xa6,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xf0, 0x03, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x59, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x4b, 0x0a, 0x10, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd9, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75,
	0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xde, 0x05, 0x0a, 0x12, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a,
	0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x53, 0x0a, 0x14, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x22, 0xb1, 0x02, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x6f, 0x55, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6a, 0x75, 0x6d,
	0x70, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x4a,
	0x75, 0x6d, 0x70, 0x54, 0x61, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x11,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x22, 0x97, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x61, 0x6d,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x53, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xd6,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x42, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe6, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22,
	0xd1, 0x03, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62,
	0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf5, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41,
	0x0a, 0x10, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x62, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6f,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x59, 0x0a, 0x0d, 0x48, 0x6f, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48,
	0x6f, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x68, 0x6f,
	0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x55, 0x0a, 0x0d, 0x48, 0x6f, 0x6d, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b,
	0x65, 0x79, 0x22, 0x39, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x02,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x79, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x89, 0x09, 0x0a, 0x0d,
	0x47, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6a, 0x75, 0x6d, 0x70, 0x5f, 0x74, 0x61,
	0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x54,
	0x61, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x19, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x48, 0x6f, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x32, 0xa2, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x16, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x1f, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xba, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xfa, 0x04, 0x0a, 0x1f, 0x4c, 0x69,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x14, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x15, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x68, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x82, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61,
	0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x11,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xe2, 0x0b, 0x0a, 0x17,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x70, 0x63, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x54, 0x72,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x66, 0x0a, 0x21, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x1a, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x1a, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x1e, 0x54,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x6d, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x54, 0x68, 0x69, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x54, 0x0a, 0x18, 0x41, 0x64,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x44, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x42,
	0x65, 0x74, 0x4d, 0x51, 0x12, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x42, 0x65, 0x74, 0x4d, 0x51, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x65, 0x74, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x51, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x42, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x51, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4a, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x1a,
	0x53, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x6f, 0x50, 0x47, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x32, 0xd8, 0x10, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x12,
	0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x46,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_v1_game_proto_rawDescOnce sync.Once
	file_game_v1_game_proto_rawDescData = file_game_v1_game_proto_rawDesc
)

func file_game_v1_game_proto_rawDescGZIP() []byte {
	file_game_v1_game_proto_rawDescOnce.Do(func() {
		file_game_v1_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_v1_game_proto_rawDescData)
	})
	return file_game_v1_game_proto_rawDescData
}

var file_game_v1_game_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_game_v1_game_proto_goTypes = []interface{}{
	(*GameReq)(nil),                                  // 0: game.v1.GameReq
	(*GameReply)(nil),                                // 1: game.v1.GameReply
	(*SingleEnterGameReq)(nil),                       // 2: game.v1.SingleEnterGameReq
	(*SingleEnterGameReply)(nil),                     // 3: game.v1.SingleEnterGameReply
	(*SingleEnterGameTryReq)(nil),                    // 4: game.v1.SingleEnterGameTryReq
	(*SingleEnterGameTryReply)(nil),                  // 5: game.v1.SingleEnterGameTryReply
	(*TransferEnterGameReq)(nil),                     // 6: game.v1.TransferEnterGameReq
	(*TransferEnterGameReply)(nil),                   // 7: game.v1.TransferEnterGameReply
	(*WalletTransferInGameReq)(nil),                  // 8: game.v1.WalletTransferInGameReq
	(*WalletTransferInGameReply)(nil),                // 9: game.v1.WalletTransferInGameReply
	(*WalletTransferOutGameReq)(nil),                 // 10: game.v1.WalletTransferOutGameReq
	(*WalletTransferOutGameReply)(nil),               // 11: game.v1.WalletTransferOutGameReply
	(*GetWalletTransferBalanceReq)(nil),              // 12: game.v1.GetWalletTransferBalanceReq
	(*GetWalletTransferBalanceReply)(nil),            // 13: game.v1.GetWalletTransferBalanceReply
	(*GetGameTransferOrderStatusReq)(nil),            // 14: game.v1.GetGameTransferOrderStatusReq
	(*GetGameTransferOrderStatusReply)(nil),          // 15: game.v1.GetGameTransferOrderStatusReply
	(*GetGameTransferBetOrderListReq)(nil),           // 16: game.v1.GetGameTransferBetOrderListReq
	(*TransferBetRecord)(nil),                        // 17: game.v1.TransferBetRecord
	(*GetGameTransferBetOrderListReply)(nil),         // 18: game.v1.GetGameTransferBetOrderListReply
	(*GetK9GameAccessKeyReq)(nil),                    // 19: game.v1.GetK9GameAccessKeyReq
	(*GetK9GameAccessKeyReply)(nil),                  // 20: game.v1.GetK9GameAccessKeyReply
	(*GameUserBetReq)(nil),                           // 21: game.v1.GameUserBetReq
	(*GameUserBetReply)(nil),                         // 22: game.v1.GameUserBetReply
	(*GameUserRewardReq)(nil),                        // 23: game.v1.GameUserRewardReq
	(*GameUserRewardReply)(nil),                      // 24: game.v1.GameUserRewardReply
	(*GameUserBetCancelReq)(nil),                     // 25: game.v1.GameUserBetCancelReq
	(*GameUserBetCancelReply)(nil),                   // 26: game.v1.GameUserBetCancelReply
	(*GameUserAdjustmentReq)(nil),                    // 27: game.v1.GameUserAdjustmentReq
	(*GameUserAdjustmentReply)(nil),                  // 28: game.v1.GameUserAdjustmentReply
	(*TransferCallbackReq)(nil),                      // 29: game.v1.TransferCallbackReq
	(*TransferCallbackReply)(nil),                    // 30: game.v1.TransferCallbackReply
	(*AddTripartiteTransferRecordReq)(nil),           // 31: game.v1.AddTripartiteTransferRecordReq
	(*AddTripartiteTransferRecordStatusReq)(nil),     // 32: game.v1.AddTripartiteTransferRecordStatusReq
	(*TripartiteTransferRecordStatusReq)(nil),        // 33: game.v1.TripartiteTransferRecordStatusReq
	(*ProcessMessageTransferDataReq)(nil),            // 34: game.v1.ProcessMessageTransferDataReq
	(*ProcessMessageTransferDataReply)(nil),          // 35: game.v1.ProcessMessageTransferDataReply
	(*ProcessMessageTransferSendReq)(nil),            // 36: game.v1.ProcessMessageTransferSendReq
	(*ProcessMessageTransferSendReply)(nil),          // 37: game.v1.ProcessMessageTransferSendReply
	(*TripartiteTransferRecord)(nil),                 // 38: game.v1.TripartiteTransferRecord
	(*CreateCompensationRecordReq)(nil),              // 39: game.v1.CreateCompensationRecordReq
	(*CreateCompensationRecordResp)(nil),             // 40: game.v1.CreateCompensationRecordResp
	(*GetGameDetailsByThirdReq)(nil),                 // 41: game.v1.GetGameDetailsByThirdReq
	(*GetGameDetailsByThirdReply)(nil),               // 42: game.v1.GetGameDetailsByThirdReply
	(*AddGameBetBaseReply)(nil),                      // 43: game.v1.AddGameBetBaseReply
	(*AddGameBetRecordReq)(nil),                      // 44: game.v1.AddGameBetRecordReq
	(*AddGameBetRecordReply)(nil),                    // 45: game.v1.AddGameBetRecordReply
	(*BatchAddGameBetRecordReq)(nil),                 // 46: game.v1.BatchAddGameBetRecordReq
	(*AddGameSettledRecordReq)(nil),                  // 47: game.v1.AddGameSettledRecordReq
	(*BatchAddGameSettledRecordReq)(nil),             // 48: game.v1.BatchAddGameSettledRecordReq
	(*AddGameCancelRecordReq)(nil),                   // 49: game.v1.AddGameCancelRecordReq
	(*AddGameAdjustmentRecordReq)(nil),               // 50: game.v1.AddGameAdjustmentRecordReq
	(*AddTransferGameBetRecordReq)(nil),              // 51: game.v1.AddTransferGameBetRecordReq
	(*SendGameBetBetMQReq)(nil),                      // 52: game.v1.SendGameBetBetMQReq
	(*SendGameBetBetSettlementMQReq)(nil),            // 53: game.v1.SendGameBetBetSettlementMQReq
	(*AddRecentlyGamePlayReq)(nil),                   // 54: game.v1.AddRecentlyGamePlayReq
	(*GetCategoryListByCurrReq)(nil),                 // 55: game.v1.GetCategoryListByCurrReq
	(*GetCategoryListByCurrReply)(nil),               // 56: game.v1.GetCategoryListByCurrReply
	(*GameCategoryDetail)(nil),                       // 57: game.v1.GameCategoryDetail
	(*GetCategorySimpleListByCurrReply)(nil),         // 58: game.v1.GetCategorySimpleListByCurrReply
	(*GameCategorySimpleDetail)(nil),                 // 59: game.v1.GameCategorySimpleDetail
	(*CategoryNameBase)(nil),                         // 60: game.v1.CategoryNameBase
	(*GetGameListByCategoryReq)(nil),                 // 61: game.v1.GetGameListByCategoryReq
	(*GetPlatformListByCurrReq)(nil),                 // 62: game.v1.GetPlatformListByCurrReq
	(*GetPlatformListByCurrReply)(nil),               // 63: game.v1.GetPlatformListByCurrReply
	(*GamePlatformDetail)(nil),                       // 64: game.v1.GamePlatformDetail
	(*GetPlatListSimpleByCurrReply)(nil),             // 65: game.v1.GetPlatListSimpleByCurrReply
	(*GamePlatformSimpleDetail)(nil),                 // 66: game.v1.GamePlatformSimpleDetail
	(*PlatformRedirectionBase)(nil),                  // 67: game.v1.PlatformRedirectionBase
	(*GameDetails)(nil),                              // 68: game.v1.GameDetails
	(*GameSimpleDetails)(nil),                        // 69: game.v1.GameSimpleDetails
	(*GetGameDetailsListReply)(nil),                  // 70: game.v1.GetGameDetailsListReply
	(*GetGameSimpleListBySearchReply)(nil),           // 71: game.v1.GetGameSimpleListBySearchReply
	(*GetGameListByPlatformReq)(nil),                 // 72: game.v1.GetGameListByPlatformReq
	(*GamePlatformDetailsReq)(nil),                   // 73: game.v1.GamePlatformDetailsReq
	(*GetGameListBySearchReq)(nil),                   // 74: game.v1.GetGameListBySearchReq
	(*GameHandelFavoriteReq)(nil),                    // 75: game.v1.GameHandelFavoriteReq
	(*GetGameFavoriteListReq)(nil),                   // 76: game.v1.GetGameFavoriteListReq
	(*GetUserFavoriteIdsReq)(nil),                    // 77: game.v1.GetUserFavoriteIdsReq
	(*GetUserFavoriteIdsReply)(nil),                  // 78: game.v1.GetUserFavoriteIdsReply
	(*GetGameRecentlyListReq)(nil),                   // 79: game.v1.GetGameRecentlyListReq
	(*GetHotGameListReq)(nil),                        // 80: game.v1.GetHotGameListReq
	(*GetHotPlatformListReq)(nil),                    // 81: game.v1.GetHotPlatformListReq
	(*GetHotPlatformListReply)(nil),                  // 82: game.v1.GetHotPlatformListReply
	(*GameDetailsReq)(nil),                           // 83: game.v1.GameDetailsReq
	(*GetUserBetRecordListReq)(nil),                  // 84: game.v1.GetUserBetRecordListReq
	(*GetUserBetRecordListReply)(nil),                // 85: game.v1.GetUserBetRecordListReply
	(*BetRecordInfo)(nil),                            // 86: game.v1.BetRecordInfo
	(*GetUserBetRecordSummaryReq)(nil),               // 87: game.v1.GetUserBetRecordSummaryReq
	(*GetUserBetRecordSummaryReply)(nil),             // 88: game.v1.GetUserBetRecordSummaryReply
	(*BetSummaryInfo)(nil),                           // 89: game.v1.BetSummaryInfo
	(*GetHomeGameItemReq)(nil),                       // 90: game.v1.GetHomeGameItemReq
	(*PlatformDetailsList)(nil),                      // 91: game.v1.PlatformDetailsList
	(*GameDetailsList)(nil),                          // 92: game.v1.GameDetailsList
	(*GetHomePlatformItemsReply)(nil),                // 93: game.v1.GetHomePlatformItemsReply
	(*GetHomeGameItemsReply)(nil),                    // 94: game.v1.GetHomeGameItemsReply
	(*GetGameConfInfoReq)(nil),                       // 95: game.v1.GetGameConfInfoReq
	(*GetGameConfInfoReply)(nil),                     // 96: game.v1.GetGameConfInfoReply
	(*GetNewGameListReq)(nil),                        // 97: game.v1.GetNewGameListReq
	(*GetNewGameListReply)(nil),                      // 98: game.v1.GetNewGameListReply
	(*GameValueItem)(nil),                            // 99: game.v1.GameValueItem
	nil,                                              // 100: game.v1.GetGameTransferOrderStatusReply.OrdersEntry
	(*GetGameTransferOrderStatusReplyOrderInfo)(nil), // 101: game.v1.GetGameTransferOrderStatusReply.order_info
	nil, // 102: game.v1.GetUserFavoriteIdsReply.FavoriteIdsEntry
	nil, // 103: game.v1.GetHomePlatformItemsReply.HomeItemEntry
	nil, // 104: game.v1.GetHomeGameItemsReply.HomeItemEntry
}
var file_game_v1_game_proto_depIdxs = []int32{
	100, // 0: game.v1.GetGameTransferOrderStatusReply.orders:type_name -> game.v1.GetGameTransferOrderStatusReply.OrdersEntry
	17,  // 1: game.v1.GetGameTransferBetOrderListReply.bet_list:type_name -> game.v1.TransferBetRecord
	44,  // 2: game.v1.BatchAddGameBetRecordReq.add_game_bet_record_req:type_name -> game.v1.AddGameBetRecordReq
	47,  // 3: game.v1.BatchAddGameSettledRecordReq.add_game_settled_record_req:type_name -> game.v1.AddGameSettledRecordReq
	17,  // 4: game.v1.AddTransferGameBetRecordReq.record_list:type_name -> game.v1.TransferBetRecord
	57,  // 5: game.v1.GetCategoryListByCurrReply.rows:type_name -> game.v1.GameCategoryDetail
	59,  // 6: game.v1.GetCategorySimpleListByCurrReply.rows:type_name -> game.v1.GameCategorySimpleDetail
	64,  // 7: game.v1.GetPlatformListByCurrReply.rows:type_name -> game.v1.GamePlatformDetail
	67,  // 8: game.v1.GamePlatformDetail.platform_redirection:type_name -> game.v1.PlatformRedirectionBase
	66,  // 9: game.v1.GetPlatListSimpleByCurrReply.rows:type_name -> game.v1.GamePlatformSimpleDetail
	68,  // 10: game.v1.GetGameDetailsListReply.rows:type_name -> game.v1.GameDetails
	69,  // 11: game.v1.GetGameSimpleListBySearchReply.rows:type_name -> game.v1.GameSimpleDetails
	102, // 12: game.v1.GetUserFavoriteIdsReply.favoriteIds:type_name -> game.v1.GetUserFavoriteIdsReply.FavoriteIdsEntry
	64,  // 13: game.v1.GetHotPlatformListReply.rows:type_name -> game.v1.GamePlatformDetail
	86,  // 14: game.v1.GetUserBetRecordListReply.rows:type_name -> game.v1.BetRecordInfo
	89,  // 15: game.v1.GetUserBetRecordSummaryReply.bet_summary_list:type_name -> game.v1.BetSummaryInfo
	64,  // 16: game.v1.PlatformDetailsList.items:type_name -> game.v1.GamePlatformDetail
	68,  // 17: game.v1.GameDetailsList.items:type_name -> game.v1.GameDetails
	103, // 18: game.v1.GetHomePlatformItemsReply.home_item:type_name -> game.v1.GetHomePlatformItemsReply.HomeItemEntry
	104, // 19: game.v1.GetHomeGameItemsReply.home_item:type_name -> game.v1.GetHomeGameItemsReply.HomeItemEntry
	99,  // 20: game.v1.GetNewGameListReply.rows:type_name -> game.v1.GameValueItem
	101, // 21: game.v1.GetGameTransferOrderStatusReply.OrdersEntry.value:type_name -> game.v1.GetGameTransferOrderStatusReply.order_info
	91,  // 22: game.v1.GetHomePlatformItemsReply.HomeItemEntry.value:type_name -> game.v1.PlatformDetailsList
	92,  // 23: game.v1.GetHomeGameItemsReply.HomeItemEntry.value:type_name -> game.v1.GameDetailsList
	0,   // 24: game.v1.LiveGameExternalService.K9GameResourceListSync:input_type -> game.v1.GameReq
	0,   // 25: game.v1.LiveGameExternalService.K9GameTransferBetRecordListSync:input_type -> game.v1.GameReq
	2,   // 26: game.v1.LiveGameExternalSingleService.EnterGame:input_type -> game.v1.SingleEnterGameReq
	4,   // 27: game.v1.LiveGameExternalSingleService.EnterGameTry:input_type -> game.v1.SingleEnterGameTryReq
	6,   // 28: game.v1.LiveGameExternalTransferService.EnterGame:input_type -> game.v1.TransferEnterGameReq
	8,   // 29: game.v1.LiveGameExternalTransferService.WalletTransferInGame:input_type -> game.v1.WalletTransferInGameReq
	10,  // 30: game.v1.LiveGameExternalTransferService.WalletTransferOutGame:input_type -> game.v1.WalletTransferOutGameReq
	12,  // 31: game.v1.LiveGameExternalTransferService.GetWalletTransferBalance:input_type -> game.v1.GetWalletTransferBalanceReq
	14,  // 32: game.v1.LiveGameExternalTransferService.GetGameTransferOrderStatus:input_type -> game.v1.GetGameTransferOrderStatusReq
	16,  // 33: game.v1.LiveGameExternalTransferService.GetGameTransferBetOrderList:input_type -> game.v1.GetGameTransferBetOrderListReq
	19,  // 34: game.v1.LiveGameCallbackRpcService.GetK9GameAccessKey:input_type -> game.v1.GetK9GameAccessKeyReq
	21,  // 35: game.v1.LiveGameCallbackRpcService.GameUserBet:input_type -> game.v1.GameUserBetReq
	23,  // 36: game.v1.LiveGameCallbackRpcService.GameUserReward:input_type -> game.v1.GameUserRewardReq
	25,  // 37: game.v1.LiveGameCallbackRpcService.GameUserBetCancel:input_type -> game.v1.GameUserBetCancelReq
	27,  // 38: game.v1.LiveGameCallbackRpcService.GameUserAdjustment:input_type -> game.v1.GameUserAdjustmentReq
	29,  // 39: game.v1.LiveGameCallbackRpcService.TransferCallback:input_type -> game.v1.TransferCallbackReq
	31,  // 40: game.v1.LiveGameRpcInnerService.AddTripartiteTransferRecord:input_type -> game.v1.AddTripartiteTransferRecordReq
	32,  // 41: game.v1.LiveGameRpcInnerService.AddTripartiteTransferRecordStatus:input_type -> game.v1.AddTripartiteTransferRecordStatusReq
	34,  // 42: game.v1.LiveGameRpcInnerService.ProcessMessageTransferData:input_type -> game.v1.ProcessMessageTransferDataReq
	36,  // 43: game.v1.LiveGameRpcInnerService.ProcessMessageTransferSend:input_type -> game.v1.ProcessMessageTransferSendReq
	33,  // 44: game.v1.LiveGameRpcInnerService.TripartiteTransferRecordStatus:input_type -> game.v1.TripartiteTransferRecordStatusReq
	39,  // 45: game.v1.LiveGameRpcInnerService.CreateCompensationFailedRecord:input_type -> game.v1.CreateCompensationRecordReq
	41,  // 46: game.v1.LiveGameRpcInnerService.GetGameDetailsByThird:input_type -> game.v1.GetGameDetailsByThirdReq
	44,  // 47: game.v1.LiveGameRpcInnerService.AddGameBetRecord:input_type -> game.v1.AddGameBetRecordReq
	47,  // 48: game.v1.LiveGameRpcInnerService.AddGameSettledRecord:input_type -> game.v1.AddGameSettledRecordReq
	49,  // 49: game.v1.LiveGameRpcInnerService.AddGameCancelRecord:input_type -> game.v1.AddGameCancelRecordReq
	50,  // 50: game.v1.LiveGameRpcInnerService.AddGameAdjustmentRecord:input_type -> game.v1.AddGameAdjustmentRecordReq
	51,  // 51: game.v1.LiveGameRpcInnerService.AddTransferGameBetRecord:input_type -> game.v1.AddTransferGameBetRecordReq
	52,  // 52: game.v1.LiveGameRpcInnerService.SendGameBetBetMQ:input_type -> game.v1.SendGameBetBetMQReq
	53,  // 53: game.v1.LiveGameRpcInnerService.SendGameBetBetSettlementMQ:input_type -> game.v1.SendGameBetBetSettlementMQReq
	54,  // 54: game.v1.LiveGameRpcInnerService.AddRecentlyGamePlay:input_type -> game.v1.AddRecentlyGamePlayReq
	0,   // 55: game.v1.LiveGameRpcInnerService.SyncGameBetSummaryToPGTask:input_type -> game.v1.GameReq
	55,  // 56: game.v1.LiveGameRpcService.GetGameCategoryListByCurr:input_type -> game.v1.GetCategoryListByCurrReq
	55,  // 57: game.v1.LiveGameRpcService.GetGameCategorySimpleListByCurr:input_type -> game.v1.GetCategoryListByCurrReq
	61,  // 58: game.v1.LiveGameRpcService.GetGameListByCategory:input_type -> game.v1.GetGameListByCategoryReq
	62,  // 59: game.v1.LiveGameRpcService.GetPlatformListByCurr:input_type -> game.v1.GetPlatformListByCurrReq
	62,  // 60: game.v1.LiveGameRpcService.GetPlatListSimpleByCurr:input_type -> game.v1.GetPlatformListByCurrReq
	73,  // 61: game.v1.LiveGameRpcService.GetPlatformDetails:input_type -> game.v1.GamePlatformDetailsReq
	72,  // 62: game.v1.LiveGameRpcService.GetGameListByPlatform:input_type -> game.v1.GetGameListByPlatformReq
	74,  // 63: game.v1.LiveGameRpcService.GetGameListBySearch:input_type -> game.v1.GetGameListBySearchReq
	74,  // 64: game.v1.LiveGameRpcService.GetGameSimpleListBySearch:input_type -> game.v1.GetGameListBySearchReq
	75,  // 65: game.v1.LiveGameRpcService.GameAddFavorite:input_type -> game.v1.GameHandelFavoriteReq
	75,  // 66: game.v1.LiveGameRpcService.GameRemoveFavorite:input_type -> game.v1.GameHandelFavoriteReq
	76,  // 67: game.v1.LiveGameRpcService.GameFavoriteList:input_type -> game.v1.GetGameFavoriteListReq
	80,  // 68: game.v1.LiveGameRpcService.GetHotGameList:input_type -> game.v1.GetHotGameListReq
	79,  // 69: game.v1.LiveGameRpcService.GetRecentlyGameList:input_type -> game.v1.GetGameRecentlyListReq
	81,  // 70: game.v1.LiveGameRpcService.GetHotPlatformList:input_type -> game.v1.GetHotPlatformListReq
	83,  // 71: game.v1.LiveGameRpcService.GetGameDetails:input_type -> game.v1.GameDetailsReq
	77,  // 72: game.v1.LiveGameRpcService.GetUserFavoriteIds:input_type -> game.v1.GetUserFavoriteIdsReq
	84,  // 73: game.v1.LiveGameRpcService.GetUserBetRecordList:input_type -> game.v1.GetUserBetRecordListReq
	87,  // 74: game.v1.LiveGameRpcService.GetUserBetRecordSummary:input_type -> game.v1.GetUserBetRecordSummaryReq
	90,  // 75: game.v1.LiveGameRpcService.GetHomePlatformItems:input_type -> game.v1.GetHomeGameItemReq
	90,  // 76: game.v1.LiveGameRpcService.GetHomeGameItems:input_type -> game.v1.GetHomeGameItemReq
	90,  // 77: game.v1.LiveGameRpcService.GetHomeGameList:input_type -> game.v1.GetHomeGameItemReq
	95,  // 78: game.v1.LiveGameRpcService.GetGameConfInfo:input_type -> game.v1.GetGameConfInfoReq
	97,  // 79: game.v1.LiveGameRpcService.GetNewGameList:input_type -> game.v1.GetNewGameListReq
	1,   // 80: game.v1.LiveGameExternalService.K9GameResourceListSync:output_type -> game.v1.GameReply
	1,   // 81: game.v1.LiveGameExternalService.K9GameTransferBetRecordListSync:output_type -> game.v1.GameReply
	3,   // 82: game.v1.LiveGameExternalSingleService.EnterGame:output_type -> game.v1.SingleEnterGameReply
	5,   // 83: game.v1.LiveGameExternalSingleService.EnterGameTry:output_type -> game.v1.SingleEnterGameTryReply
	7,   // 84: game.v1.LiveGameExternalTransferService.EnterGame:output_type -> game.v1.TransferEnterGameReply
	9,   // 85: game.v1.LiveGameExternalTransferService.WalletTransferInGame:output_type -> game.v1.WalletTransferInGameReply
	11,  // 86: game.v1.LiveGameExternalTransferService.WalletTransferOutGame:output_type -> game.v1.WalletTransferOutGameReply
	13,  // 87: game.v1.LiveGameExternalTransferService.GetWalletTransferBalance:output_type -> game.v1.GetWalletTransferBalanceReply
	15,  // 88: game.v1.LiveGameExternalTransferService.GetGameTransferOrderStatus:output_type -> game.v1.GetGameTransferOrderStatusReply
	18,  // 89: game.v1.LiveGameExternalTransferService.GetGameTransferBetOrderList:output_type -> game.v1.GetGameTransferBetOrderListReply
	20,  // 90: game.v1.LiveGameCallbackRpcService.GetK9GameAccessKey:output_type -> game.v1.GetK9GameAccessKeyReply
	22,  // 91: game.v1.LiveGameCallbackRpcService.GameUserBet:output_type -> game.v1.GameUserBetReply
	24,  // 92: game.v1.LiveGameCallbackRpcService.GameUserReward:output_type -> game.v1.GameUserRewardReply
	26,  // 93: game.v1.LiveGameCallbackRpcService.GameUserBetCancel:output_type -> game.v1.GameUserBetCancelReply
	28,  // 94: game.v1.LiveGameCallbackRpcService.GameUserAdjustment:output_type -> game.v1.GameUserAdjustmentReply
	30,  // 95: game.v1.LiveGameCallbackRpcService.TransferCallback:output_type -> game.v1.TransferCallbackReply
	1,   // 96: game.v1.LiveGameRpcInnerService.AddTripartiteTransferRecord:output_type -> game.v1.GameReply
	1,   // 97: game.v1.LiveGameRpcInnerService.AddTripartiteTransferRecordStatus:output_type -> game.v1.GameReply
	35,  // 98: game.v1.LiveGameRpcInnerService.ProcessMessageTransferData:output_type -> game.v1.ProcessMessageTransferDataReply
	37,  // 99: game.v1.LiveGameRpcInnerService.ProcessMessageTransferSend:output_type -> game.v1.ProcessMessageTransferSendReply
	38,  // 100: game.v1.LiveGameRpcInnerService.TripartiteTransferRecordStatus:output_type -> game.v1.TripartiteTransferRecord
	40,  // 101: game.v1.LiveGameRpcInnerService.CreateCompensationFailedRecord:output_type -> game.v1.CreateCompensationRecordResp
	42,  // 102: game.v1.LiveGameRpcInnerService.GetGameDetailsByThird:output_type -> game.v1.GetGameDetailsByThirdReply
	45,  // 103: game.v1.LiveGameRpcInnerService.AddGameBetRecord:output_type -> game.v1.AddGameBetRecordReply
	43,  // 104: game.v1.LiveGameRpcInnerService.AddGameSettledRecord:output_type -> game.v1.AddGameBetBaseReply
	43,  // 105: game.v1.LiveGameRpcInnerService.AddGameCancelRecord:output_type -> game.v1.AddGameBetBaseReply
	43,  // 106: game.v1.LiveGameRpcInnerService.AddGameAdjustmentRecord:output_type -> game.v1.AddGameBetBaseReply
	1,   // 107: game.v1.LiveGameRpcInnerService.AddTransferGameBetRecord:output_type -> game.v1.GameReply
	1,   // 108: game.v1.LiveGameRpcInnerService.SendGameBetBetMQ:output_type -> game.v1.GameReply
	1,   // 109: game.v1.LiveGameRpcInnerService.SendGameBetBetSettlementMQ:output_type -> game.v1.GameReply
	1,   // 110: game.v1.LiveGameRpcInnerService.AddRecentlyGamePlay:output_type -> game.v1.GameReply
	1,   // 111: game.v1.LiveGameRpcInnerService.SyncGameBetSummaryToPGTask:output_type -> game.v1.GameReply
	56,  // 112: game.v1.LiveGameRpcService.GetGameCategoryListByCurr:output_type -> game.v1.GetCategoryListByCurrReply
	58,  // 113: game.v1.LiveGameRpcService.GetGameCategorySimpleListByCurr:output_type -> game.v1.GetCategorySimpleListByCurrReply
	70,  // 114: game.v1.LiveGameRpcService.GetGameListByCategory:output_type -> game.v1.GetGameDetailsListReply
	63,  // 115: game.v1.LiveGameRpcService.GetPlatformListByCurr:output_type -> game.v1.GetPlatformListByCurrReply
	65,  // 116: game.v1.LiveGameRpcService.GetPlatListSimpleByCurr:output_type -> game.v1.GetPlatListSimpleByCurrReply
	64,  // 117: game.v1.LiveGameRpcService.GetPlatformDetails:output_type -> game.v1.GamePlatformDetail
	70,  // 118: game.v1.LiveGameRpcService.GetGameListByPlatform:output_type -> game.v1.GetGameDetailsListReply
	70,  // 119: game.v1.LiveGameRpcService.GetGameListBySearch:output_type -> game.v1.GetGameDetailsListReply
	71,  // 120: game.v1.LiveGameRpcService.GetGameSimpleListBySearch:output_type -> game.v1.GetGameSimpleListBySearchReply
	1,   // 121: game.v1.LiveGameRpcService.GameAddFavorite:output_type -> game.v1.GameReply
	1,   // 122: game.v1.LiveGameRpcService.GameRemoveFavorite:output_type -> game.v1.GameReply
	70,  // 123: game.v1.LiveGameRpcService.GameFavoriteList:output_type -> game.v1.GetGameDetailsListReply
	70,  // 124: game.v1.LiveGameRpcService.GetHotGameList:output_type -> game.v1.GetGameDetailsListReply
	70,  // 125: game.v1.LiveGameRpcService.GetRecentlyGameList:output_type -> game.v1.GetGameDetailsListReply
	82,  // 126: game.v1.LiveGameRpcService.GetHotPlatformList:output_type -> game.v1.GetHotPlatformListReply
	68,  // 127: game.v1.LiveGameRpcService.GetGameDetails:output_type -> game.v1.GameDetails
	78,  // 128: game.v1.LiveGameRpcService.GetUserFavoriteIds:output_type -> game.v1.GetUserFavoriteIdsReply
	85,  // 129: game.v1.LiveGameRpcService.GetUserBetRecordList:output_type -> game.v1.GetUserBetRecordListReply
	88,  // 130: game.v1.LiveGameRpcService.GetUserBetRecordSummary:output_type -> game.v1.GetUserBetRecordSummaryReply
	93,  // 131: game.v1.LiveGameRpcService.GetHomePlatformItems:output_type -> game.v1.GetHomePlatformItemsReply
	94,  // 132: game.v1.LiveGameRpcService.GetHomeGameItems:output_type -> game.v1.GetHomeGameItemsReply
	92,  // 133: game.v1.LiveGameRpcService.GetHomeGameList:output_type -> game.v1.GameDetailsList
	96,  // 134: game.v1.LiveGameRpcService.GetGameConfInfo:output_type -> game.v1.GetGameConfInfoReply
	98,  // 135: game.v1.LiveGameRpcService.GetNewGameList:output_type -> game.v1.GetNewGameListReply
	80,  // [80:136] is the sub-list for method output_type
	24,  // [24:80] is the sub-list for method input_type
	24,  // [24:24] is the sub-list for extension type_name
	24,  // [24:24] is the sub-list for extension extendee
	0,   // [0:24] is the sub-list for field type_name
}

func init() { file_game_v1_game_proto_init() }
func file_game_v1_game_proto_init() {
	if File_game_v1_game_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_game_v1_game_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEnterGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEnterGameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEnterGameTryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEnterGameTryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferEnterGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferEnterGameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferInGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferInGameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferOutGameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletTransferOutGameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletTransferBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletTransferBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameTransferOrderStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameTransferOrderStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameTransferBetOrderListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferBetRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameTransferBetOrderListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK9GameAccessKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK9GameAccessKeyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserBetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserBetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserRewardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserBetCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserBetCancelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserAdjustmentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserAdjustmentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCallbackReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTripartiteTransferRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTripartiteTransferRecordStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TripartiteTransferRecordStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMessageTransferDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMessageTransferDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMessageTransferSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMessageTransferSendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TripartiteTransferRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompensationRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompensationRecordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameDetailsByThirdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameDetailsByThirdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameBetBaseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameBetRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameBetRecordReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddGameBetRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameSettledRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAddGameSettledRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameCancelRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGameAdjustmentRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTransferGameBetRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGameBetBetMQReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendGameBetBetSettlementMQReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRecentlyGamePlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryListByCurrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryListByCurrReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameCategoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategorySimpleListByCurrReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameCategorySimpleDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryNameBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameListByCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformListByCurrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformListByCurrReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlatformDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatListSimpleByCurrReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlatformSimpleDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformRedirectionBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSimpleDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameDetailsListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameSimpleListBySearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameListByPlatformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlatformDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameListBySearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHandelFavoriteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameFavoriteListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFavoriteIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserFavoriteIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameRecentlyListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotGameListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotPlatformListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHotPlatformListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBetRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBetRecordListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBetRecordSummaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBetRecordSummaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSummaryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomeGameItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformDetailsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDetailsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomePlatformItemsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomeGameItemsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameConfInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameConfInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewGameListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewGameListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameValueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_game_v1_game_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGameTransferOrderStatusReplyOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_v1_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_game_v1_game_proto_goTypes,
		DependencyIndexes: file_game_v1_game_proto_depIdxs,
		MessageInfos:      file_game_v1_game_proto_msgTypes,
	}.Build()
	File_game_v1_game_proto = out.File
	file_game_v1_game_proto_rawDesc = nil
	file_game_v1_game_proto_goTypes = nil
	file_game_v1_game_proto_depIdxs = nil
}
