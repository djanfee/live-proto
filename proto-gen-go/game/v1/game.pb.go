// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: game/v1/game.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameReq) Reset() {
	*x = GameReq{}
	mi := &file_game_v1_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReq) ProtoMessage() {}

func (x *GameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReq.ProtoReflect.Descriptor instead.
func (*GameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{0}
}

type GameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameReply) Reset() {
	*x = GameReply{}
	mi := &file_game_v1_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameReply) ProtoMessage() {}

func (x *GameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameReply.ProtoReflect.Descriptor instead.
func (*GameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{1}
}

type SingleEnterGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	ShowScene    string `protobuf:"bytes,8,opt,name=show_scene,json=showScene,proto3" json:"show_scene,omitempty"`          //游戏进入场景
	OsType       string `protobuf:"bytes,9,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,10,opt,name=referer,proto3" json:"referer,omitempty"`                              //请求页面
	UserIp       string `protobuf:"bytes,11,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
}

func (x *SingleEnterGameReq) Reset() {
	*x = SingleEnterGameReq{}
	mi := &file_game_v1_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleEnterGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameReq) ProtoMessage() {}

func (x *SingleEnterGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameReq.ProtoReflect.Descriptor instead.
func (*SingleEnterGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{2}
}

func (x *SingleEnterGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *SingleEnterGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *SingleEnterGameReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SingleEnterGameReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *SingleEnterGameReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SingleEnterGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SingleEnterGameReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SingleEnterGameReq) GetShowScene() string {
	if x != nil {
		return x.ShowScene
	}
	return ""
}

func (x *SingleEnterGameReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *SingleEnterGameReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *SingleEnterGameReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type SingleEnterGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *SingleEnterGameReply) Reset() {
	*x = SingleEnterGameReply{}
	mi := &file_game_v1_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleEnterGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameReply) ProtoMessage() {}

func (x *SingleEnterGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameReply.ProtoReflect.Descriptor instead.
func (*SingleEnterGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{3}
}

func (x *SingleEnterGameReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SingleEnterGameTryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	OsType       string `protobuf:"bytes,8,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,9,opt,name=referer,proto3" json:"referer,omitempty"`                               //请求页面
	UserIp       string `protobuf:"bytes,10,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
	Nickname     string `protobuf:"bytes,11,opt,name=nickname,proto3" json:"nickname,omitempty"`
	UserAvatar   string `protobuf:"bytes,12,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
}

func (x *SingleEnterGameTryReq) Reset() {
	*x = SingleEnterGameTryReq{}
	mi := &file_game_v1_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleEnterGameTryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameTryReq) ProtoMessage() {}

func (x *SingleEnterGameTryReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameTryReq.ProtoReflect.Descriptor instead.
func (*SingleEnterGameTryReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{4}
}

func (x *SingleEnterGameTryReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SingleEnterGameTryReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SingleEnterGameTryReq) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

type SingleEnterGameTryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *SingleEnterGameTryReply) Reset() {
	*x = SingleEnterGameTryReply{}
	mi := &file_game_v1_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleEnterGameTryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEnterGameTryReply) ProtoMessage() {}

func (x *SingleEnterGameTryReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEnterGameTryReply.ProtoReflect.Descriptor instead.
func (*SingleEnterGameTryReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{5}
}

func (x *SingleEnterGameTryReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TransferEnterGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	UserToken    string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`          //用户TOKEN
	Language     string `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`                             //语言
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Param        string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`                                   //参数
	ShowScene    string `protobuf:"bytes,8,opt,name=show_scene,json=showScene,proto3" json:"show_scene,omitempty"`          //游戏进入场景
	OsType       string `protobuf:"bytes,9,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`                   //类型 “web” or “android” or "h5" or "ios"
	Referer      string `protobuf:"bytes,10,opt,name=referer,proto3" json:"referer,omitempty"`                              //请求页面
	UserIp       string `protobuf:"bytes,11,opt,name=user_ip,json=userIp,proto3" json:"user_ip,omitempty"`                  //玩家IP
}

func (x *TransferEnterGameReq) Reset() {
	*x = TransferEnterGameReq{}
	mi := &file_game_v1_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferEnterGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferEnterGameReq) ProtoMessage() {}

func (x *TransferEnterGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferEnterGameReq.ProtoReflect.Descriptor instead.
func (*TransferEnterGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{6}
}

func (x *TransferEnterGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *TransferEnterGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *TransferEnterGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransferEnterGameReq) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *TransferEnterGameReq) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *TransferEnterGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *TransferEnterGameReq) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *TransferEnterGameReq) GetShowScene() string {
	if x != nil {
		return x.ShowScene
	}
	return ""
}

func (x *TransferEnterGameReq) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *TransferEnterGameReq) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *TransferEnterGameReq) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

type TransferEnterGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` //游戏地址
}

func (x *TransferEnterGameReply) Reset() {
	*x = TransferEnterGameReply{}
	mi := &file_game_v1_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferEnterGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferEnterGameReply) ProtoMessage() {}

func (x *TransferEnterGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferEnterGameReply.ProtoReflect.Descriptor instead.
func (*TransferEnterGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{7}
}

func (x *TransferEnterGameReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WalletTransferInGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	BillNo       string `protobuf:"bytes,4,opt,name=bill_no,json=billNo,proto3" json:"bill_no,omitempty"`                   //转入账单编号
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       int64  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`                                //金额  整数且大于0
}

func (x *WalletTransferInGameReq) Reset() {
	*x = WalletTransferInGameReq{}
	mi := &file_game_v1_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransferInGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferInGameReq) ProtoMessage() {}

func (x *WalletTransferInGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferInGameReq.ProtoReflect.Descriptor instead.
func (*WalletTransferInGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{8}
}

func (x *WalletTransferInGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *WalletTransferInGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *WalletTransferInGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferInGameReq) GetBillNo() string {
	if x != nil {
		return x.BillNo
	}
	return ""
}

func (x *WalletTransferInGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WalletTransferInGameReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type WalletTransferInGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                               //成功状态， true：成功，false 失败
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 //用户ID
	Amount      int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                               //金额
	GameOrderNo string `protobuf:"bytes,4,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"` //转入订单编号
	ErrMsg      string `protobuf:"bytes,5,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                  //失败消息
}

func (x *WalletTransferInGameReply) Reset() {
	*x = WalletTransferInGameReply{}
	mi := &file_game_v1_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransferInGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferInGameReply) ProtoMessage() {}

func (x *WalletTransferInGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferInGameReply.ProtoReflect.Descriptor instead.
func (*WalletTransferInGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{9}
}

func (x *WalletTransferInGameReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WalletTransferInGameReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferInGameReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WalletTransferInGameReply) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *WalletTransferInGameReply) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type WalletTransferOutGameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	GameOrderNo  string `protobuf:"bytes,4,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"`  //转入订单编号
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`                                 //金额
}

func (x *WalletTransferOutGameReq) Reset() {
	*x = WalletTransferOutGameReq{}
	mi := &file_game_v1_game_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransferOutGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferOutGameReq) ProtoMessage() {}

func (x *WalletTransferOutGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferOutGameReq.ProtoReflect.Descriptor instead.
func (*WalletTransferOutGameReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{10}
}

func (x *WalletTransferOutGameReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferOutGameReq) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *WalletTransferOutGameReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WalletTransferOutGameReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type WalletTransferOutGameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                               //成功状态， true：成功，false 失败
	UserId      int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 //用户ID
	Amount      string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                //金额
	GameOrderNo string `protobuf:"bytes,4,opt,name=game_order_no,json=gameOrderNo,proto3" json:"game_order_no,omitempty"` //转出订单编号
	ErrMsg      string `protobuf:"bytes,5,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                  //失败消息
}

func (x *WalletTransferOutGameReply) Reset() {
	*x = WalletTransferOutGameReply{}
	mi := &file_game_v1_game_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletTransferOutGameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletTransferOutGameReply) ProtoMessage() {}

func (x *WalletTransferOutGameReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletTransferOutGameReply.ProtoReflect.Descriptor instead.
func (*WalletTransferOutGameReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{11}
}

func (x *WalletTransferOutGameReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WalletTransferOutGameReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WalletTransferOutGameReply) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *WalletTransferOutGameReply) GetGameOrderNo() string {
	if x != nil {
		return x.GameOrderNo
	}
	return ""
}

func (x *WalletTransferOutGameReply) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type GetWalletTransferBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  int64  `protobuf:"varint,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"`   //游戏平台key  唯一标识
	GameKey      int64  `protobuf:"varint,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`               //游戏标志
	UserId       int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
}

func (x *GetWalletTransferBalanceReq) Reset() {
	*x = GetWalletTransferBalanceReq{}
	mi := &file_game_v1_game_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletTransferBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransferBalanceReq) ProtoMessage() {}

func (x *GetWalletTransferBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransferBalanceReq.ProtoReflect.Descriptor instead.
func (*GetWalletTransferBalanceReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{12}
}

func (x *GetWalletTransferBalanceReq) GetPlatformKey() int64 {
	if x != nil {
		return x.PlatformKey
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetGameKey() int64 {
	if x != nil {
		return x.GameKey
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetWalletTransferBalanceReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetWalletTransferBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  //用户ID
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币Code
	Amount       string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`                                 //金额
}

func (x *GetWalletTransferBalanceReply) Reset() {
	*x = GetWalletTransferBalanceReply{}
	mi := &file_game_v1_game_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWalletTransferBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletTransferBalanceReply) ProtoMessage() {}

func (x *GetWalletTransferBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletTransferBalanceReply.ProtoReflect.Descriptor instead.
func (*GetWalletTransferBalanceReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{13}
}

func (x *GetWalletTransferBalanceReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetWalletTransferBalanceReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetWalletTransferBalanceReply) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetGameTransferOrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey string   `protobuf:"bytes,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"` //游戏平台key  唯一标识
	OrderNo     []string `protobuf:"bytes,2,rep,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`             //订单编号 最多100个
}

func (x *GetGameTransferOrderStatusReq) Reset() {
	*x = GetGameTransferOrderStatusReq{}
	mi := &file_game_v1_game_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferOrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReq) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReq.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{14}
}

func (x *GetGameTransferOrderStatusReq) GetPlatformKey() string {
	if x != nil {
		return x.PlatformKey
	}
	return ""
}

func (x *GetGameTransferOrderStatusReq) GetOrderNo() []string {
	if x != nil {
		return x.OrderNo
	}
	return nil
}

type GetGameTransferOrderStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders map[string]*GetGameTransferOrderStatusReplyOrderInfo `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetGameTransferOrderStatusReply) Reset() {
	*x = GetGameTransferOrderStatusReply{}
	mi := &file_game_v1_game_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferOrderStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReply) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReply.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{15}
}

func (x *GetGameTransferOrderStatusReply) GetOrders() map[string]*GetGameTransferOrderStatusReplyOrderInfo {
	if x != nil {
		return x.Orders
	}
	return nil
}

type GetGameTransferBetOrderListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime  string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间 查询玩家投注记录，按最后更新时间查询，最多查询上一个月数据。
	EndTime    string `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间 投注记录统一使用 UTC 时区，且投注记录会有 2 分钟左右的延迟，请查询当前时间前
	PageNumber int64  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
}

func (x *GetGameTransferBetOrderListReq) Reset() {
	*x = GetGameTransferBetOrderListReq{}
	mi := &file_game_v1_game_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferBetOrderListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferBetOrderListReq) ProtoMessage() {}

func (x *GetGameTransferBetOrderListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferBetOrderListReq.ProtoReflect.Descriptor instead.
func (*GetGameTransferBetOrderListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{16}
}

func (x *GetGameTransferBetOrderListReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReq) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReq) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetGameTransferBetOrderListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPage      int64                                      `protobuf:"varint,1,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`               //总页数
	CurrentPage    int64                                      `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`         //当前页数
	LastUpdateDate string                                     `protobuf:"bytes,3,opt,name=lastUpdate_date,json=lastUpdateDate,proto3" json:"lastUpdate_date,omitempty"` //本批次数据的最后更新时间
	BetList        []*GetGameTransferBetOrderListReplyBetInfo `protobuf:"bytes,4,rep,name=bet_list,json=betList,proto3" json:"bet_list,omitempty"`                      //订单列表
}

func (x *GetGameTransferBetOrderListReply) Reset() {
	*x = GetGameTransferBetOrderListReply{}
	mi := &file_game_v1_game_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferBetOrderListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferBetOrderListReply) ProtoMessage() {}

func (x *GetGameTransferBetOrderListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferBetOrderListReply.ProtoReflect.Descriptor instead.
func (*GetGameTransferBetOrderListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{17}
}

func (x *GetGameTransferBetOrderListReply) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

func (x *GetGameTransferBetOrderListReply) GetCurrentPage() int64 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *GetGameTransferBetOrderListReply) GetLastUpdateDate() string {
	if x != nil {
		return x.LastUpdateDate
	}
	return ""
}

func (x *GetGameTransferBetOrderListReply) GetBetList() []*GetGameTransferBetOrderListReplyBetInfo {
	if x != nil {
		return x.BetList
	}
	return nil
}

// 获取K9游戏接入key
type GetK9GameAccessKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1：单一钱包，2：转账钱包
}

func (x *GetK9GameAccessKeyReq) Reset() {
	*x = GetK9GameAccessKeyReq{}
	mi := &file_game_v1_game_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetK9GameAccessKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK9GameAccessKeyReq) ProtoMessage() {}

func (x *GetK9GameAccessKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK9GameAccessKeyReq.ProtoReflect.Descriptor instead.
func (*GetK9GameAccessKeyReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{18}
}

func (x *GetK9GameAccessKeyReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 获取K9游戏接入key
type GetK9GameAccessKeyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
}

func (x *GetK9GameAccessKeyReply) Reset() {
	*x = GetK9GameAccessKeyReply{}
	mi := &file_game_v1_game_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetK9GameAccessKeyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK9GameAccessKeyReply) ProtoMessage() {}

func (x *GetK9GameAccessKeyReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK9GameAccessKeyReply.ProtoReflect.Descriptor instead.
func (*GetK9GameAccessKeyReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{19}
}

func (x *GetK9GameAccessKeyReply) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

// 游戏投注创建请求
type GameUserBetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletModel      int64  `protobuf:"varint,1,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`                  // 钱包模式：1：单一钱包，2：转账钱包
	UserId           int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	TripartiteGameId int64  `protobuf:"varint,3,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"` // 三方游戏id
	RoundId          string `protobuf:"bytes,4,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                               // 牌局 ID
	OrderNo          string `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                               // 投注订单号(每笔记录唯一)
	Amount           string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`                                                //投注金额(6 位小数)
	CurrencyCode     string `protobuf:"bytes,7,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                // 玩家货币code
	Timestamp        int64  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                         //时间戳（毫秒）
}

func (x *GameUserBetReq) Reset() {
	*x = GameUserBetReq{}
	mi := &file_game_v1_game_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetReq) ProtoMessage() {}

func (x *GameUserBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetReq.ProtoReflect.Descriptor instead.
func (*GameUserBetReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{20}
}

func (x *GameUserBetReq) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameUserBetReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserBetReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameUserBetReq) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GameUserBetReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserBetReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GameUserBetReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 游戏投注创建回应
type GameUserBetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //用户余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                //订单编号(数据表的order_id)
	OrderId      string `protobuf:"bytes,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                //订单ID(数据表主键ID)
}

func (x *GameUserBetReply) Reset() {
	*x = GameUserBetReply{}
	mi := &file_game_v1_game_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserBetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetReply) ProtoMessage() {}

func (x *GameUserBetReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetReply.ProtoReflect.Descriptor instead.
func (*GameUserBetReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{21}
}

func (x *GameUserBetReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserBetReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetReply) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserBetReply) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 游戏订单派奖创建
type GameUserRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey  string `protobuf:"bytes,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"` // 游戏平台key  唯一标识
	GameKey      string `protobuf:"bytes,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`             //游戏标志，如果不属于某个游戏，传入platform_key
	TradeId      string `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`             // 交易ID
	UserId       uint64 `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeAmounts string `protobuf:"bytes,5,opt,name=trade_amounts,json=tradeAmounts,proto3" json:"trade_amounts,omitempty"`   //交易金额，非负值
	BetSessionId string `protobuf:"bytes,6,opt,name=bet_session_id,json=betSessionId,proto3" json:"bet_session_id,omitempty"` //投注会话ID，没有可不填
	OrderDesc    string `protobuf:"bytes,7,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`            //订单描述
	CurrencyCode string `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`   //货币Code
}

func (x *GameUserRewardReq) Reset() {
	*x = GameUserRewardReq{}
	mi := &file_game_v1_game_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserRewardReq) ProtoMessage() {}

func (x *GameUserRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserRewardReq.ProtoReflect.Descriptor instead.
func (*GameUserRewardReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{22}
}

func (x *GameUserRewardReq) GetPlatformKey() string {
	if x != nil {
		return x.PlatformKey
	}
	return ""
}

func (x *GameUserRewardReq) GetGameKey() string {
	if x != nil {
		return x.GameKey
	}
	return ""
}

func (x *GameUserRewardReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *GameUserRewardReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserRewardReq) GetTradeAmounts() string {
	if x != nil {
		return x.TradeAmounts
	}
	return ""
}

func (x *GameUserRewardReq) GetBetSessionId() string {
	if x != nil {
		return x.BetSessionId
	}
	return ""
}

func (x *GameUserRewardReq) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *GameUserRewardReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GameUserRewardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` //货币代码
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                //订单编号
	OrderId      int64  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`               //订单ID
	Repeated     bool   `protobuf:"varint,5,opt,name=repeated,proto3" json:"repeated,omitempty"`                            //是否重复
}

func (x *GameUserRewardReply) Reset() {
	*x = GameUserRewardReply{}
	mi := &file_game_v1_game_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserRewardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserRewardReply) ProtoMessage() {}

func (x *GameUserRewardReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserRewardReply.ProtoReflect.Descriptor instead.
func (*GameUserRewardReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{23}
}

func (x *GameUserRewardReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserRewardReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserRewardReply) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserRewardReply) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GameUserRewardReply) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

// 游戏投注撤销
type GameUserBetCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey     string `protobuf:"bytes,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"` // 游戏平台key  唯一标识
	GameKey         string `protobuf:"bytes,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`             //游戏标志
	UserId          uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeId         string `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                           // 交易ID
	TradeAmounts    string `protobuf:"bytes,5,opt,name=trade_amounts,json=tradeAmounts,proto3" json:"trade_amounts,omitempty"`            //交易金额，非负值
	OriginalTradeId string `protobuf:"bytes,6,opt,name=original_trade_id,json=originalTradeId,proto3" json:"original_trade_id,omitempty"` //原订单交易ID
}

func (x *GameUserBetCancelReq) Reset() {
	*x = GameUserBetCancelReq{}
	mi := &file_game_v1_game_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserBetCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetCancelReq) ProtoMessage() {}

func (x *GameUserBetCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetCancelReq.ProtoReflect.Descriptor instead.
func (*GameUserBetCancelReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{24}
}

func (x *GameUserBetCancelReq) GetPlatformKey() string {
	if x != nil {
		return x.PlatformKey
	}
	return ""
}

func (x *GameUserBetCancelReq) GetGameKey() string {
	if x != nil {
		return x.GameKey
	}
	return ""
}

func (x *GameUserBetCancelReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserBetCancelReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *GameUserBetCancelReq) GetTradeAmounts() string {
	if x != nil {
		return x.TradeAmounts
	}
	return ""
}

func (x *GameUserBetCancelReq) GetOriginalTradeId() string {
	if x != nil {
		return x.OriginalTradeId
	}
	return ""
}

// 游戏投注撤销响应
type GameUserBetCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额，非负值
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                //订单编号
	OrderId      int64  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`               //订单ID
	Repeated     bool   `protobuf:"varint,5,opt,name=repeated,proto3" json:"repeated,omitempty"`                            //是否重复
}

func (x *GameUserBetCancelReply) Reset() {
	*x = GameUserBetCancelReply{}
	mi := &file_game_v1_game_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserBetCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserBetCancelReply) ProtoMessage() {}

func (x *GameUserBetCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserBetCancelReply.ProtoReflect.Descriptor instead.
func (*GameUserBetCancelReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{25}
}

func (x *GameUserBetCancelReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserBetCancelReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserBetCancelReply) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserBetCancelReply) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GameUserBetCancelReply) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

// 游戏调整玩家余额(订单、活动等调整) 请求
type GameUserAdjustmentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformKey   string `protobuf:"bytes,1,opt,name=platform_key,json=platformKey,proto3" json:"platform_key,omitempty"` // 游戏平台key  唯一标识
	GameKey       string `protobuf:"bytes,2,opt,name=game_key,json=gameKey,proto3" json:"game_key,omitempty"`             // 游戏key  唯一标识 可以为空
	UserId        uint64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeId       string `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                   // 交易ID
	AdjustAmounts string `protobuf:"bytes,5,opt,name=adjust_amounts,json=adjustAmounts,proto3" json:"adjust_amounts,omitempty"` //交易金额，加：正数，减：负数
	BetSessionId  string `protobuf:"bytes,6,opt,name=bet_session_id,json=betSessionId,proto3" json:"bet_session_id,omitempty"`  //投注会话ID
	AdjustDesc    string `protobuf:"bytes,7,opt,name=adjust_desc,json=adjustDesc,proto3" json:"adjust_desc,omitempty"`          //调整描述
	CurrencyCode  string `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`    //货币Code
}

func (x *GameUserAdjustmentReq) Reset() {
	*x = GameUserAdjustmentReq{}
	mi := &file_game_v1_game_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserAdjustmentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserAdjustmentReq) ProtoMessage() {}

func (x *GameUserAdjustmentReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserAdjustmentReq.ProtoReflect.Descriptor instead.
func (*GameUserAdjustmentReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{26}
}

func (x *GameUserAdjustmentReq) GetPlatformKey() string {
	if x != nil {
		return x.PlatformKey
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetGameKey() string {
	if x != nil {
		return x.GameKey
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameUserAdjustmentReq) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetAdjustAmounts() string {
	if x != nil {
		return x.AdjustAmounts
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetBetSessionId() string {
	if x != nil {
		return x.BetSessionId
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetAdjustDesc() string {
	if x != nil {
		return x.AdjustDesc
	}
	return ""
}

func (x *GameUserAdjustmentReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 游戏调整玩家余额(订单、活动等调整) 响应
type GameUserAdjustmentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance      string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`                               //余额
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 货币代码
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                //订单编号
	OrderId      int64  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`               //订单ID
	Repeated     bool   `protobuf:"varint,5,opt,name=repeated,proto3" json:"repeated,omitempty"`                            //是否重复
}

func (x *GameUserAdjustmentReply) Reset() {
	*x = GameUserAdjustmentReply{}
	mi := &file_game_v1_game_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUserAdjustmentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserAdjustmentReply) ProtoMessage() {}

func (x *GameUserAdjustmentReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserAdjustmentReply.ProtoReflect.Descriptor instead.
func (*GameUserAdjustmentReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{27}
}

func (x *GameUserAdjustmentReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GameUserAdjustmentReply) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameUserAdjustmentReply) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GameUserAdjustmentReply) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *GameUserAdjustmentReply) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

// 游戏转账订单回调
type TransferCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                 //订单编号
	TransferType int64  `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"` //交易类型：1:转入 2:转出
	Status       bool   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                 //成功状态， true：成功，false 失败
	Amounts      string `protobuf:"bytes,6,opt,name=amounts,proto3" json:"amounts,omitempty"`                                //订单金额
	Msg          string `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`                                        //信息描述
}

func (x *TransferCallbackReq) Reset() {
	*x = TransferCallbackReq{}
	mi := &file_game_v1_game_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallbackReq) ProtoMessage() {}

func (x *TransferCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallbackReq.ProtoReflect.Descriptor instead.
func (*TransferCallbackReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{28}
}

func (x *TransferCallbackReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TransferCallbackReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *TransferCallbackReq) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *TransferCallbackReq) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TransferCallbackReq) GetAmounts() string {
	if x != nil {
		return x.Amounts
	}
	return ""
}

func (x *TransferCallbackReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 游戏转账订单回调响应
type TransferCallbackReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferCallbackReply) Reset() {
	*x = TransferCallbackReply{}
	mi := &file_game_v1_game_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferCallbackReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCallbackReply) ProtoMessage() {}

func (x *TransferCallbackReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCallbackReply.ProtoReflect.Descriptor instead.
func (*TransferCallbackReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{29}
}

// 通过货币获取游戏类型请求参数
type GetCategoryListByCurrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId   int64  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetCategoryListByCurrReq) Reset() {
	*x = GetCategoryListByCurrReq{}
	mi := &file_game_v1_game_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryListByCurrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryListByCurrReq) ProtoMessage() {}

func (x *GetCategoryListByCurrReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryListByCurrReq.ProtoReflect.Descriptor instead.
func (*GetCategoryListByCurrReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{30}
}

func (x *GetCategoryListByCurrReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *GetCategoryListByCurrReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetCategoryListByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GameCategoryDetail `protobuf:"bytes,20,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetCategoryListByCurrReply) Reset() {
	*x = GetCategoryListByCurrReply{}
	mi := &file_game_v1_game_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryListByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryListByCurrReply) ProtoMessage() {}

func (x *GetCategoryListByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryListByCurrReply.ProtoReflect.Descriptor instead.
func (*GetCategoryListByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{31}
}

func (x *GetCategoryListByCurrReply) GetList() []*GameCategoryDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type GameCategoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键（自增 ID）
	GameCategoryId int64 `protobuf:"varint,1,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	// 三方游戏类型 ID
	TripartiteCategoryId int64 `protobuf:"varint,2,opt,name=tripartite_category_id,json=tripartiteCategoryId,proto3" json:"tripartite_category_id,omitempty"`
	// 排名（表示货币在列表中的排序位置）
	Rank int64 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	// 货币代码（例如 "INR"）
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// 类型名称（JSON 格式）
	CategoryName []*CategoryNameBase `protobuf:"bytes,5,rep,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"` // 如果需要，可以考虑存储 JSON 字符串或使用更详细的结构
	// 类型开关（启用/禁用标志）
	CategorySwitch int64 `protobuf:"varint,6,opt,name=category_switch,json=categorySwitch,proto3" json:"category_switch,omitempty"`
	// 链接类型（1: 外部链接，2: 其他）
	LinkType int64 `protobuf:"varint,7,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	// 链接地址
	LinkUrl string `protobuf:"bytes,8,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	// 打开方式（1: 默认，2: 外部 URL）
	OpenMethod int64 `protobuf:"varint,9,opt,name=open_method,json=openMethod,proto3" json:"open_method,omitempty"`
	// 图标地址
	IconUrl string `protobuf:"bytes,10,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	// 首页显示行数
	HomeDisplayCount int64 `protobuf:"varint,11,opt,name=home_display_count,json=homeDisplayCount,proto3" json:"home_display_count,omitempty"`
	// 二级页面显示行数
	SecondPageDisplayCount int64 `protobuf:"varint,12,opt,name=second_page_display_count,json=secondPageDisplayCount,proto3" json:"second_page_display_count,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,13,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *GameCategoryDetail) Reset() {
	*x = GameCategoryDetail{}
	mi := &file_game_v1_game_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameCategoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameCategoryDetail) ProtoMessage() {}

func (x *GameCategoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameCategoryDetail.ProtoReflect.Descriptor instead.
func (*GameCategoryDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{32}
}

func (x *GameCategoryDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameCategoryDetail) GetTripartiteCategoryId() int64 {
	if x != nil {
		return x.TripartiteCategoryId
	}
	return 0
}

func (x *GameCategoryDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameCategoryDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameCategoryDetail) GetCategoryName() []*CategoryNameBase {
	if x != nil {
		return x.CategoryName
	}
	return nil
}

func (x *GameCategoryDetail) GetCategorySwitch() int64 {
	if x != nil {
		return x.CategorySwitch
	}
	return 0
}

func (x *GameCategoryDetail) GetLinkType() int64 {
	if x != nil {
		return x.LinkType
	}
	return 0
}

func (x *GameCategoryDetail) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *GameCategoryDetail) GetOpenMethod() int64 {
	if x != nil {
		return x.OpenMethod
	}
	return 0
}

func (x *GameCategoryDetail) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *GameCategoryDetail) GetHomeDisplayCount() int64 {
	if x != nil {
		return x.HomeDisplayCount
	}
	return 0
}

func (x *GameCategoryDetail) GetSecondPageDisplayCount() int64 {
	if x != nil {
		return x.SecondPageDisplayCount
	}
	return 0
}

func (x *GameCategoryDetail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CategoryNameBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language int64  `protobuf:"varint,1,opt,name=language,proto3" json:"language,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CategoryNameBase) Reset() {
	*x = CategoryNameBase{}
	mi := &file_game_v1_game_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryNameBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryNameBase) ProtoMessage() {}

func (x *CategoryNameBase) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryNameBase.ProtoReflect.Descriptor instead.
func (*CategoryNameBase) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{33}
}

func (x *CategoryNameBase) GetLanguage() int64 {
	if x != nil {
		return x.Language
	}
	return 0
}

func (x *CategoryNameBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 通过类型获取游戏列表请求参数
type GetGameListByCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GameCategoryId int64  `protobuf:"varint,3,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetGameListByCategoryReq) Reset() {
	*x = GetGameListByCategoryReq{}
	mi := &file_game_v1_game_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameListByCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListByCategoryReq) ProtoMessage() {}

func (x *GetGameListByCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListByCategoryReq.ProtoReflect.Descriptor instead.
func (*GetGameListByCategoryReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{34}
}

func (x *GetGameListByCategoryReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GetGameListByCategoryReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过货币获取平台请求参数
type GetPlatformListByCurrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId   int64  `protobuf:"varint,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CurrencyCode string `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetPlatformListByCurrReq) Reset() {
	*x = GetPlatformListByCurrReq{}
	mi := &file_game_v1_game_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlatformListByCurrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformListByCurrReq) ProtoMessage() {}

func (x *GetPlatformListByCurrReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformListByCurrReq.ProtoReflect.Descriptor instead.
func (*GetPlatformListByCurrReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{35}
}

func (x *GetPlatformListByCurrReq) GetCurrencyId() int64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *GetPlatformListByCurrReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过货币获取平台响应参数
type GetPlatformListByCurrReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GamePlatformDetail `protobuf:"bytes,20,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetPlatformListByCurrReply) Reset() {
	*x = GetPlatformListByCurrReply{}
	mi := &file_game_v1_game_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlatformListByCurrReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformListByCurrReply) ProtoMessage() {}

func (x *GetPlatformListByCurrReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformListByCurrReply.ProtoReflect.Descriptor instead.
func (*GetPlatformListByCurrReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{36}
}

func (x *GetPlatformListByCurrReply) GetList() []*GamePlatformDetail {
	if x != nil {
		return x.List
	}
	return nil
}

// 游戏平台详情
type GamePlatformDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamePlatformId       int64                      `protobuf:"varint,1,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                   // 自增主键，唯一标识每条记录
	Rank                 int64                      `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`                                                               // 排名，表示货币在列表中的排序位置
	TripartitePlatformId int64                      `protobuf:"varint,3,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方的游戏厂商ID
	GameCategoryId       int64                      `protobuf:"varint,4,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`                   // 游戏类型ID
	PlatformName         string                     `protobuf:"bytes,5,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`                            // 平台名称
	CurrencyCode         string                     `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 货币代码，例如“INR”
	Style                string                     `protobuf:"bytes,7,opt,name=style,proto3" json:"style,omitempty"`                                                              // 版式风格
	MinimumEntry         float64                    `protobuf:"fixed64,8,opt,name=minimum_entry,json=minimumEntry,proto3" json:"minimum_entry,omitempty"`                          // 最低准入
	PromotionStyle       int64                      `protobuf:"varint,9,opt,name=promotion_style,json=promotionStyle,proto3" json:"promotion_style,omitempty"`                     // 宣传图样式1：默认,2：自定义
	Icon                 string                     `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`                                                               // 图标
	BackgroundColor      string                     `protobuf:"bytes,11,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`                  // 图片背景
	LogoUrl              string                     `protobuf:"bytes,12,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`                                          // 品牌LOGO
	PromotionImageUrl    string                     `protobuf:"bytes,13,opt,name=promotion_image_url,json=promotionImageUrl,proto3" json:"promotion_image_url,omitempty"`          // 宣传图URL
	HotImageUrl          string                     `protobuf:"bytes,14,opt,name=hot_image_url,json=hotImageUrl,proto3" json:"hot_image_url,omitempty"`                            // 热门图URL
	PlatformRedirection  []*PlatformRedirectionBase `protobuf:"bytes,15,rep,name=platform_redirection,json=platformRedirection,proto3" json:"platform_redirection,omitempty"`      // 平台跳转方式的展示
	GameNum              int64                      `protobuf:"varint,16,opt,name=game_num,json=gameNum,proto3" json:"game_num,omitempty"`                                         // 游戏数量
}

func (x *GamePlatformDetail) Reset() {
	*x = GamePlatformDetail{}
	mi := &file_game_v1_game_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlatformDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlatformDetail) ProtoMessage() {}

func (x *GamePlatformDetail) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlatformDetail.ProtoReflect.Descriptor instead.
func (*GamePlatformDetail) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{37}
}

func (x *GamePlatformDetail) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GamePlatformDetail) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GamePlatformDetail) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *GamePlatformDetail) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GamePlatformDetail) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *GamePlatformDetail) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GamePlatformDetail) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *GamePlatformDetail) GetMinimumEntry() float64 {
	if x != nil {
		return x.MinimumEntry
	}
	return 0
}

func (x *GamePlatformDetail) GetPromotionStyle() int64 {
	if x != nil {
		return x.PromotionStyle
	}
	return 0
}

func (x *GamePlatformDetail) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GamePlatformDetail) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *GamePlatformDetail) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetPromotionImageUrl() string {
	if x != nil {
		return x.PromotionImageUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetHotImageUrl() string {
	if x != nil {
		return x.HotImageUrl
	}
	return ""
}

func (x *GamePlatformDetail) GetPlatformRedirection() []*PlatformRedirectionBase {
	if x != nil {
		return x.PlatformRedirection
	}
	return nil
}

func (x *GamePlatformDetail) GetGameNum() int64 {
	if x != nil {
		return x.GameNum
	}
	return 0
}

// 平台跳转方式的基础类型
type PlatformRedirectionBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformOsType int64 `protobuf:"varint,1,opt,name=platform_os_type,json=platformOsType,proto3" json:"platform_os_type,omitempty"`
	OpenMethodType int64 `protobuf:"varint,2,opt,name=open_method_type,json=openMethodType,proto3" json:"open_method_type,omitempty"`
}

func (x *PlatformRedirectionBase) Reset() {
	*x = PlatformRedirectionBase{}
	mi := &file_game_v1_game_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlatformRedirectionBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformRedirectionBase) ProtoMessage() {}

func (x *PlatformRedirectionBase) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformRedirectionBase.ProtoReflect.Descriptor instead.
func (*PlatformRedirectionBase) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{38}
}

func (x *PlatformRedirectionBase) GetPlatformOsType() int64 {
	if x != nil {
		return x.PlatformOsType
	}
	return 0
}

func (x *PlatformRedirectionBase) GetOpenMethodType() int64 {
	if x != nil {
		return x.OpenMethodType
	}
	return 0
}

// 游戏详情
type GameDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId            int64  `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	TripartiteGameId  int64  `protobuf:"varint,2,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`
	Rank              int64  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	CurrencyCode      string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	GamePlatformId    int64  `protobuf:"varint,5,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	GameCategoryId    int64  `protobuf:"varint,6,opt,name=game_category_id,json=gameCategoryId,proto3" json:"game_category_id,omitempty"`
	GameName          string `protobuf:"bytes,7,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	WalletModel       int64  `protobuf:"varint,13,opt,name=wallet_model,json=walletModel,proto3" json:"wallet_model,omitempty"`
	HorizontalSupport int64  `protobuf:"varint,14,opt,name=horizontal_support,json=horizontalSupport,proto3" json:"horizontal_support,omitempty"`
	VerticalSupport   int64  `protobuf:"varint,15,opt,name=vertical_support,json=verticalSupport,proto3" json:"vertical_support,omitempty"`
	TryGameSupport    int64  `protobuf:"varint,16,opt,name=try_game_support,json=tryGameSupport,proto3" json:"try_game_support,omitempty"`
	Style             string `protobuf:"bytes,17,opt,name=style,proto3" json:"style,omitempty"`
	IconStyle         int64  `protobuf:"varint,18,opt,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`
	LogoUrl           string `protobuf:"bytes,19,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IconImageUrl      string `protobuf:"bytes,20,opt,name=icon_image_url,json=iconImageUrl,proto3" json:"icon_image_url,omitempty"`
}

func (x *GameDetails) Reset() {
	*x = GameDetails{}
	mi := &file_game_v1_game_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDetails) ProtoMessage() {}

func (x *GameDetails) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDetails.ProtoReflect.Descriptor instead.
func (*GameDetails) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{39}
}

func (x *GameDetails) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameDetails) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

func (x *GameDetails) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GameDetails) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GameDetails) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GameDetails) GetGameCategoryId() int64 {
	if x != nil {
		return x.GameCategoryId
	}
	return 0
}

func (x *GameDetails) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GameDetails) GetWalletModel() int64 {
	if x != nil {
		return x.WalletModel
	}
	return 0
}

func (x *GameDetails) GetHorizontalSupport() int64 {
	if x != nil {
		return x.HorizontalSupport
	}
	return 0
}

func (x *GameDetails) GetVerticalSupport() int64 {
	if x != nil {
		return x.VerticalSupport
	}
	return 0
}

func (x *GameDetails) GetTryGameSupport() int64 {
	if x != nil {
		return x.TryGameSupport
	}
	return 0
}

func (x *GameDetails) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *GameDetails) GetIconStyle() int64 {
	if x != nil {
		return x.IconStyle
	}
	return 0
}

func (x *GameDetails) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *GameDetails) GetIconImageUrl() string {
	if x != nil {
		return x.IconImageUrl
	}
	return ""
}

// 通过类型获取游戏列表响应参数
type GetGameDetailsListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int64          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total    int64          `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	List     []*GameDetails `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetGameDetailsListReply) Reset() {
	*x = GetGameDetailsListReply{}
	mi := &file_game_v1_game_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameDetailsListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameDetailsListReply) ProtoMessage() {}

func (x *GetGameDetailsListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameDetailsListReply.ProtoReflect.Descriptor instead.
func (*GetGameDetailsListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{40}
}

func (x *GetGameDetailsListReply) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameDetailsListReply) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameDetailsListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetGameDetailsListReply) GetList() []*GameDetails {
	if x != nil {
		return x.List
	}
	return nil
}

// 通过平台获取游戏列表请求参数
type GetGameListByPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GamePlatformId int64  `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetGameListByPlatformReq) Reset() {
	*x = GetGameListByPlatformReq{}
	mi := &file_game_v1_game_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameListByPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListByPlatformReq) ProtoMessage() {}

func (x *GetGameListByPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListByPlatformReq.ProtoReflect.Descriptor instead.
func (*GetGameListByPlatformReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{41}
}

func (x *GetGameListByPlatformReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetGameListByPlatformReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过搜索获取游戏列表请求参数
type GetGameListBySearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	SearchValue  string `protobuf:"bytes,3,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	CurrencyCode string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetGameListBySearchReq) Reset() {
	*x = GetGameListBySearchReq{}
	mi := &file_game_v1_game_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameListBySearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameListBySearchReq) ProtoMessage() {}

func (x *GetGameListBySearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameListBySearchReq.ProtoReflect.Descriptor instead.
func (*GetGameListBySearchReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{42}
}

func (x *GetGameListBySearchReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameListBySearchReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameListBySearchReq) GetSearchValue() string {
	if x != nil {
		return x.SearchValue
	}
	return ""
}

func (x *GetGameListBySearchReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 添加收藏
type GameHandelFavoriteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId       int64  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CurrencyCode string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GameHandelFavoriteReq) Reset() {
	*x = GameHandelFavoriteReq{}
	mi := &file_game_v1_game_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameHandelFavoriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHandelFavoriteReq) ProtoMessage() {}

func (x *GameHandelFavoriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHandelFavoriteReq.ProtoReflect.Descriptor instead.
func (*GameHandelFavoriteReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{43}
}

func (x *GameHandelFavoriteReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameHandelFavoriteReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *GameHandelFavoriteReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 通过搜索获取游戏列表请求参数
type GetGameFavoriteListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	UserId         int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GamePlatformId int64 `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
}

func (x *GetGameFavoriteListReq) Reset() {
	*x = GetGameFavoriteListReq{}
	mi := &file_game_v1_game_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameFavoriteListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameFavoriteListReq) ProtoMessage() {}

func (x *GetGameFavoriteListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameFavoriteListReq.ProtoReflect.Descriptor instead.
func (*GetGameFavoriteListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{44}
}

func (x *GetGameFavoriteListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameFavoriteListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

// 热门游戏列表
type GetHotGameListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           int64  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	GamePlatformId int64  `protobuf:"varint,3,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`
	CurrencyCode   string `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetHotGameListReq) Reset() {
	*x = GetHotGameListReq{}
	mi := &file_game_v1_game_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotGameListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotGameListReq) ProtoMessage() {}

func (x *GetHotGameListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotGameListReq.ProtoReflect.Descriptor instead.
func (*GetHotGameListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{45}
}

func (x *GetHotGameListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHotGameListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetHotGameListReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *GetHotGameListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

// 热门平台列表
type GetHotPlatformListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
}

func (x *GetHotPlatformListReq) Reset() {
	*x = GetHotPlatformListReq{}
	mi := &file_game_v1_game_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotPlatformListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotPlatformListReq) ProtoMessage() {}

func (x *GetHotPlatformListReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotPlatformListReq.ProtoReflect.Descriptor instead.
func (*GetHotPlatformListReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{46}
}

func (x *GetHotPlatformListReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetHotPlatformListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GamePlatformDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetHotPlatformListReply) Reset() {
	*x = GetHotPlatformListReply{}
	mi := &file_game_v1_game_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHotPlatformListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHotPlatformListReply) ProtoMessage() {}

func (x *GetHotPlatformListReply) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHotPlatformListReply.ProtoReflect.Descriptor instead.
func (*GetHotPlatformListReply) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{47}
}

func (x *GetHotPlatformListReply) GetList() []*GamePlatformDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type GameDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId int64 `protobuf:"varint,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *GameDetailsReq) Reset() {
	*x = GameDetailsReq{}
	mi := &file_game_v1_game_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDetailsReq) ProtoMessage() {}

func (x *GameDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDetailsReq.ProtoReflect.Descriptor instead.
func (*GameDetailsReq) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{48}
}

func (x *GameDetailsReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

type GetGameTransferOrderStatusReplyOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   //用户ID
	OrderNo      string `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                 //订单编号
	TransferType int64  `protobuf:"varint,4,opt,name=transfer_type,json=transferType,proto3" json:"transfer_type,omitempty"` //交易类型：1:转入 2:转出
	Status       int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                 //转账状态， 0:处理中 1:处理成功 2:处理失败
	Amounts      string `protobuf:"bytes,6,opt,name=amounts,proto3" json:"amounts,omitempty"`                                //订单金额
	Msg          string `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`                                        //信息
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) Reset() {
	*x = GetGameTransferOrderStatusReplyOrderInfo{}
	mi := &file_game_v1_game_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferOrderStatusReplyOrderInfo) ProtoMessage() {}

func (x *GetGameTransferOrderStatusReplyOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferOrderStatusReplyOrderInfo.ProtoReflect.Descriptor instead.
func (*GetGameTransferOrderStatusReplyOrderInfo) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{15, 1}
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetTransferType() int64 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetAmounts() string {
	if x != nil {
		return x.Amounts
	}
	return ""
}

func (x *GetGameTransferOrderStatusReplyOrderInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetGameTransferBetOrderListReplyBetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                   // 记录 ID
	MerchantKey          string `protobuf:"bytes,2,opt,name=merchant_key,json=merchantKey,proto3" json:"merchant_key,omitempty"`                               // 商户 KEY
	UserId               string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 玩家唯一标识
	TrilateralPlatformId int64  `protobuf:"varint,4,opt,name=trilateral_platform_id,json=trilateralPlatformId,proto3" json:"trilateral_platform_id,omitempty"` // 厂商 ID
	TrilateralGameId     int64  `protobuf:"varint,5,opt,name=trilateral_game_id,json=trilateralGameId,proto3" json:"trilateral_game_id,omitempty"`             // 游戏 ID
	GameName             string `protobuf:"bytes,6,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`                                        // 游戏名称
	BetId                string `protobuf:"bytes,7,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                                 // 投注 ID
	Currency             string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`                                                        // 货币
	Status               int64  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                                           // 投注状态（1 未结算 2 已结算 3 已取消 4 无效）
	BetTime              string `protobuf:"bytes,10,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                          // 投注时间（字符串）
	SettleTime           string `protobuf:"bytes,11,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`                                 // 结算时间（字符串）
	UpdateTime           string `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                 // 最后更新时间（字符串）
	BetDetail            string `protobuf:"bytes,13,opt,name=bet_detail,json=betDetail,proto3" json:"bet_detail,omitempty"`                                    // 投注记录详细，JSON 字符串
	BetAmount            string `protobuf:"bytes,14,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                                    // 投注金额（作为字符串）
	PayAmount            string `protobuf:"bytes,15,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`                                    // 赔付金额（作为字符串）
	ProfitLoss           string `protobuf:"bytes,16,opt,name=profit_loss,json=profitLoss,proto3" json:"profit_loss,omitempty"`                                 // 输赢金额（作为字符串）
}

func (x *GetGameTransferBetOrderListReplyBetInfo) Reset() {
	*x = GetGameTransferBetOrderListReplyBetInfo{}
	mi := &file_game_v1_game_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGameTransferBetOrderListReplyBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGameTransferBetOrderListReplyBetInfo) ProtoMessage() {}

func (x *GetGameTransferBetOrderListReplyBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_game_v1_game_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGameTransferBetOrderListReplyBetInfo.ProtoReflect.Descriptor instead.
func (*GetGameTransferBetOrderListReplyBetInfo) Descriptor() ([]byte, []int) {
	return file_game_v1_game_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetMerchantKey() string {
	if x != nil {
		return x.MerchantKey
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetTrilateralPlatformId() int64 {
	if x != nil {
		return x.TrilateralPlatformId
	}
	return 0
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetTrilateralGameId() int64 {
	if x != nil {
		return x.TrilateralGameId
	}
	return 0
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetBetTime() string {
	if x != nil {
		return x.BetTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetSettleTime() string {
	if x != nil {
		return x.SettleTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetBetDetail() string {
	if x != nil {
		return x.BetDetail
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetPayAmount() string {
	if x != nil {
		return x.PayAmount
	}
	return ""
}

func (x *GetGameTransferBetOrderListReplyBetInfo) GetProfitLoss() string {
	if x != nil {
		return x.ProfitLoss
	}
	return ""
}

var File_game_v1_game_proto protoreflect.FileDescriptor

var file_game_v1_game_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x09, 0x0a,
	0x07, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x22, 0x0b, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xcc, 0x02, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x70, 0x22, 0x28, 0x0a, 0x14, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xed,
	0x02, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x2b,
	0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xce, 0x02, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x22, 0x2a, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69,
	0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x99, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x6e, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xa9, 0x01, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x7b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdc, 0x05, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x08,
	0x62, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x62, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xfd, 0x03, 0x0a, 0x08,
	0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72,
	0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b,
	0x39, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x87, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xa6, 0x01, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x60, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8b, 0x04,
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x42, 0x0a, 0x10, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfe, 0x04,
	0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x53,
	0x0a, 0x14, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x13,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x6d,
	0x0a, 0x17, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b, 0x04,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x72, 0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x72, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x61, 0x6d,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3c,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x32, 0x59, 0x0a, 0x17, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x16, 0x4b, 0x39, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xba,
	0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x47, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xfa, 0x04, 0x0a, 0x1f,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4b, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x14,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x15, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x68, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0x82, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x39,
	0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x39, 0x47, 0x61, 0x6d,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x12, 0x17,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53,
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x1c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xc1, 0x07,
	0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72,
	0x72, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43,
	0x75, 0x72, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x21, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x65, 0x6c, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_game_v1_game_proto_rawDescOnce sync.Once
	file_game_v1_game_proto_rawDescData = file_game_v1_game_proto_rawDesc
)

func file_game_v1_game_proto_rawDescGZIP() []byte {
	file_game_v1_game_proto_rawDescOnce.Do(func() {
		file_game_v1_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_v1_game_proto_rawDescData)
	})
	return file_game_v1_game_proto_rawDescData
}

var file_game_v1_game_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_game_v1_game_proto_goTypes = []any{
	(*GameReq)(nil),                                  // 0: game.v1.GameReq
	(*GameReply)(nil),                                // 1: game.v1.GameReply
	(*SingleEnterGameReq)(nil),                       // 2: game.v1.SingleEnterGameReq
	(*SingleEnterGameReply)(nil),                     // 3: game.v1.SingleEnterGameReply
	(*SingleEnterGameTryReq)(nil),                    // 4: game.v1.SingleEnterGameTryReq
	(*SingleEnterGameTryReply)(nil),                  // 5: game.v1.SingleEnterGameTryReply
	(*TransferEnterGameReq)(nil),                     // 6: game.v1.TransferEnterGameReq
	(*TransferEnterGameReply)(nil),                   // 7: game.v1.TransferEnterGameReply
	(*WalletTransferInGameReq)(nil),                  // 8: game.v1.WalletTransferInGameReq
	(*WalletTransferInGameReply)(nil),                // 9: game.v1.WalletTransferInGameReply
	(*WalletTransferOutGameReq)(nil),                 // 10: game.v1.WalletTransferOutGameReq
	(*WalletTransferOutGameReply)(nil),               // 11: game.v1.WalletTransferOutGameReply
	(*GetWalletTransferBalanceReq)(nil),              // 12: game.v1.GetWalletTransferBalanceReq
	(*GetWalletTransferBalanceReply)(nil),            // 13: game.v1.GetWalletTransferBalanceReply
	(*GetGameTransferOrderStatusReq)(nil),            // 14: game.v1.GetGameTransferOrderStatusReq
	(*GetGameTransferOrderStatusReply)(nil),          // 15: game.v1.GetGameTransferOrderStatusReply
	(*GetGameTransferBetOrderListReq)(nil),           // 16: game.v1.GetGameTransferBetOrderListReq
	(*GetGameTransferBetOrderListReply)(nil),         // 17: game.v1.GetGameTransferBetOrderListReply
	(*GetK9GameAccessKeyReq)(nil),                    // 18: game.v1.GetK9GameAccessKeyReq
	(*GetK9GameAccessKeyReply)(nil),                  // 19: game.v1.GetK9GameAccessKeyReply
	(*GameUserBetReq)(nil),                           // 20: game.v1.GameUserBetReq
	(*GameUserBetReply)(nil),                         // 21: game.v1.GameUserBetReply
	(*GameUserRewardReq)(nil),                        // 22: game.v1.GameUserRewardReq
	(*GameUserRewardReply)(nil),                      // 23: game.v1.GameUserRewardReply
	(*GameUserBetCancelReq)(nil),                     // 24: game.v1.GameUserBetCancelReq
	(*GameUserBetCancelReply)(nil),                   // 25: game.v1.GameUserBetCancelReply
	(*GameUserAdjustmentReq)(nil),                    // 26: game.v1.GameUserAdjustmentReq
	(*GameUserAdjustmentReply)(nil),                  // 27: game.v1.GameUserAdjustmentReply
	(*TransferCallbackReq)(nil),                      // 28: game.v1.TransferCallbackReq
	(*TransferCallbackReply)(nil),                    // 29: game.v1.TransferCallbackReply
	(*GetCategoryListByCurrReq)(nil),                 // 30: game.v1.GetCategoryListByCurrReq
	(*GetCategoryListByCurrReply)(nil),               // 31: game.v1.GetCategoryListByCurrReply
	(*GameCategoryDetail)(nil),                       // 32: game.v1.GameCategoryDetail
	(*CategoryNameBase)(nil),                         // 33: game.v1.CategoryNameBase
	(*GetGameListByCategoryReq)(nil),                 // 34: game.v1.GetGameListByCategoryReq
	(*GetPlatformListByCurrReq)(nil),                 // 35: game.v1.GetPlatformListByCurrReq
	(*GetPlatformListByCurrReply)(nil),               // 36: game.v1.GetPlatformListByCurrReply
	(*GamePlatformDetail)(nil),                       // 37: game.v1.GamePlatformDetail
	(*PlatformRedirectionBase)(nil),                  // 38: game.v1.PlatformRedirectionBase
	(*GameDetails)(nil),                              // 39: game.v1.GameDetails
	(*GetGameDetailsListReply)(nil),                  // 40: game.v1.GetGameDetailsListReply
	(*GetGameListByPlatformReq)(nil),                 // 41: game.v1.GetGameListByPlatformReq
	(*GetGameListBySearchReq)(nil),                   // 42: game.v1.GetGameListBySearchReq
	(*GameHandelFavoriteReq)(nil),                    // 43: game.v1.GameHandelFavoriteReq
	(*GetGameFavoriteListReq)(nil),                   // 44: game.v1.GetGameFavoriteListReq
	(*GetHotGameListReq)(nil),                        // 45: game.v1.GetHotGameListReq
	(*GetHotPlatformListReq)(nil),                    // 46: game.v1.GetHotPlatformListReq
	(*GetHotPlatformListReply)(nil),                  // 47: game.v1.GetHotPlatformListReply
	(*GameDetailsReq)(nil),                           // 48: game.v1.GameDetailsReq
	nil,                                              // 49: game.v1.GetGameTransferOrderStatusReply.OrdersEntry
	(*GetGameTransferOrderStatusReplyOrderInfo)(nil), // 50: game.v1.GetGameTransferOrderStatusReply.order_info
	(*GetGameTransferBetOrderListReplyBetInfo)(nil),  // 51: game.v1.GetGameTransferBetOrderListReply.bet_info
}
var file_game_v1_game_proto_depIdxs = []int32{
	49, // 0: game.v1.GetGameTransferOrderStatusReply.orders:type_name -> game.v1.GetGameTransferOrderStatusReply.OrdersEntry
	51, // 1: game.v1.GetGameTransferBetOrderListReply.bet_list:type_name -> game.v1.GetGameTransferBetOrderListReply.bet_info
	32, // 2: game.v1.GetCategoryListByCurrReply.list:type_name -> game.v1.GameCategoryDetail
	33, // 3: game.v1.GameCategoryDetail.category_name:type_name -> game.v1.CategoryNameBase
	37, // 4: game.v1.GetPlatformListByCurrReply.list:type_name -> game.v1.GamePlatformDetail
	38, // 5: game.v1.GamePlatformDetail.platform_redirection:type_name -> game.v1.PlatformRedirectionBase
	39, // 6: game.v1.GetGameDetailsListReply.list:type_name -> game.v1.GameDetails
	37, // 7: game.v1.GetHotPlatformListReply.list:type_name -> game.v1.GamePlatformDetail
	50, // 8: game.v1.GetGameTransferOrderStatusReply.OrdersEntry.value:type_name -> game.v1.GetGameTransferOrderStatusReply.order_info
	0,  // 9: game.v1.LiveGameExternalService.K9GameResourceListSync:input_type -> game.v1.GameReq
	2,  // 10: game.v1.LiveGameExternalSingleService.EnterGame:input_type -> game.v1.SingleEnterGameReq
	4,  // 11: game.v1.LiveGameExternalSingleService.EnterGameTry:input_type -> game.v1.SingleEnterGameTryReq
	6,  // 12: game.v1.LiveGameExternalTransferService.EnterGame:input_type -> game.v1.TransferEnterGameReq
	8,  // 13: game.v1.LiveGameExternalTransferService.WalletTransferInGame:input_type -> game.v1.WalletTransferInGameReq
	10, // 14: game.v1.LiveGameExternalTransferService.WalletTransferOutGame:input_type -> game.v1.WalletTransferOutGameReq
	12, // 15: game.v1.LiveGameExternalTransferService.GetWalletTransferBalance:input_type -> game.v1.GetWalletTransferBalanceReq
	14, // 16: game.v1.LiveGameExternalTransferService.GetGameTransferOrderStatus:input_type -> game.v1.GetGameTransferOrderStatusReq
	16, // 17: game.v1.LiveGameExternalTransferService.GetGameTransferBetOrderList:input_type -> game.v1.GetGameTransferBetOrderListReq
	18, // 18: game.v1.LiveGameCallbackRpcService.GetK9GameAccessKey:input_type -> game.v1.GetK9GameAccessKeyReq
	20, // 19: game.v1.LiveGameCallbackRpcService.GameUserBet:input_type -> game.v1.GameUserBetReq
	22, // 20: game.v1.LiveGameCallbackRpcService.GameUserReward:input_type -> game.v1.GameUserRewardReq
	24, // 21: game.v1.LiveGameCallbackRpcService.GameUserBetCancel:input_type -> game.v1.GameUserBetCancelReq
	26, // 22: game.v1.LiveGameCallbackRpcService.GameUserAdjustment:input_type -> game.v1.GameUserAdjustmentReq
	28, // 23: game.v1.LiveGameCallbackRpcService.TransferCallback:input_type -> game.v1.TransferCallbackReq
	30, // 24: game.v1.LiveGameRpcService.GetGameCategoryListByCurr:input_type -> game.v1.GetCategoryListByCurrReq
	34, // 25: game.v1.LiveGameRpcService.GetGameListByCategory:input_type -> game.v1.GetGameListByCategoryReq
	35, // 26: game.v1.LiveGameRpcService.GetPlatformListByCurr:input_type -> game.v1.GetPlatformListByCurrReq
	41, // 27: game.v1.LiveGameRpcService.GetGameListByPlatform:input_type -> game.v1.GetGameListByPlatformReq
	42, // 28: game.v1.LiveGameRpcService.GetGameListBySearch:input_type -> game.v1.GetGameListBySearchReq
	43, // 29: game.v1.LiveGameRpcService.GameAddFavorite:input_type -> game.v1.GameHandelFavoriteReq
	43, // 30: game.v1.LiveGameRpcService.GameRemoveFavorite:input_type -> game.v1.GameHandelFavoriteReq
	44, // 31: game.v1.LiveGameRpcService.GameFavoriteList:input_type -> game.v1.GetGameFavoriteListReq
	45, // 32: game.v1.LiveGameRpcService.GetHotGameList:input_type -> game.v1.GetHotGameListReq
	46, // 33: game.v1.LiveGameRpcService.GetHotPlatformList:input_type -> game.v1.GetHotPlatformListReq
	48, // 34: game.v1.LiveGameRpcService.GetGameDetails:input_type -> game.v1.GameDetailsReq
	1,  // 35: game.v1.LiveGameExternalService.K9GameResourceListSync:output_type -> game.v1.GameReply
	3,  // 36: game.v1.LiveGameExternalSingleService.EnterGame:output_type -> game.v1.SingleEnterGameReply
	5,  // 37: game.v1.LiveGameExternalSingleService.EnterGameTry:output_type -> game.v1.SingleEnterGameTryReply
	7,  // 38: game.v1.LiveGameExternalTransferService.EnterGame:output_type -> game.v1.TransferEnterGameReply
	9,  // 39: game.v1.LiveGameExternalTransferService.WalletTransferInGame:output_type -> game.v1.WalletTransferInGameReply
	11, // 40: game.v1.LiveGameExternalTransferService.WalletTransferOutGame:output_type -> game.v1.WalletTransferOutGameReply
	13, // 41: game.v1.LiveGameExternalTransferService.GetWalletTransferBalance:output_type -> game.v1.GetWalletTransferBalanceReply
	15, // 42: game.v1.LiveGameExternalTransferService.GetGameTransferOrderStatus:output_type -> game.v1.GetGameTransferOrderStatusReply
	17, // 43: game.v1.LiveGameExternalTransferService.GetGameTransferBetOrderList:output_type -> game.v1.GetGameTransferBetOrderListReply
	19, // 44: game.v1.LiveGameCallbackRpcService.GetK9GameAccessKey:output_type -> game.v1.GetK9GameAccessKeyReply
	21, // 45: game.v1.LiveGameCallbackRpcService.GameUserBet:output_type -> game.v1.GameUserBetReply
	23, // 46: game.v1.LiveGameCallbackRpcService.GameUserReward:output_type -> game.v1.GameUserRewardReply
	25, // 47: game.v1.LiveGameCallbackRpcService.GameUserBetCancel:output_type -> game.v1.GameUserBetCancelReply
	27, // 48: game.v1.LiveGameCallbackRpcService.GameUserAdjustment:output_type -> game.v1.GameUserAdjustmentReply
	29, // 49: game.v1.LiveGameCallbackRpcService.TransferCallback:output_type -> game.v1.TransferCallbackReply
	31, // 50: game.v1.LiveGameRpcService.GetGameCategoryListByCurr:output_type -> game.v1.GetCategoryListByCurrReply
	40, // 51: game.v1.LiveGameRpcService.GetGameListByCategory:output_type -> game.v1.GetGameDetailsListReply
	36, // 52: game.v1.LiveGameRpcService.GetPlatformListByCurr:output_type -> game.v1.GetPlatformListByCurrReply
	40, // 53: game.v1.LiveGameRpcService.GetGameListByPlatform:output_type -> game.v1.GetGameDetailsListReply
	40, // 54: game.v1.LiveGameRpcService.GetGameListBySearch:output_type -> game.v1.GetGameDetailsListReply
	1,  // 55: game.v1.LiveGameRpcService.GameAddFavorite:output_type -> game.v1.GameReply
	1,  // 56: game.v1.LiveGameRpcService.GameRemoveFavorite:output_type -> game.v1.GameReply
	40, // 57: game.v1.LiveGameRpcService.GameFavoriteList:output_type -> game.v1.GetGameDetailsListReply
	40, // 58: game.v1.LiveGameRpcService.GetHotGameList:output_type -> game.v1.GetGameDetailsListReply
	47, // 59: game.v1.LiveGameRpcService.GetHotPlatformList:output_type -> game.v1.GetHotPlatformListReply
	39, // 60: game.v1.LiveGameRpcService.GetGameDetails:output_type -> game.v1.GameDetails
	35, // [35:61] is the sub-list for method output_type
	9,  // [9:35] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_game_v1_game_proto_init() }
func file_game_v1_game_proto_init() {
	if File_game_v1_game_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_v1_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_game_v1_game_proto_goTypes,
		DependencyIndexes: file_game_v1_game_proto_depIdxs,
		MessageInfos:      file_game_v1_game_proto_msgTypes,
	}.Build()
	File_game_v1_game_proto = out.File
	file_game_v1_game_proto_rawDesc = nil
	file_game_v1_game_proto_goTypes = nil
	file_game_v1_game_proto_depIdxs = nil
}
