// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: manage/v1/manage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveManageRpcService_GetLegalTenderInfo_FullMethodName    = "/manage.v1.LiveManageRpcService/GetLegalTenderInfo"
	LiveManageRpcService_GetCurrInfoById_FullMethodName       = "/manage.v1.LiveManageRpcService/GetCurrInfoById"
	LiveManageRpcService_GetIPGeolocation_FullMethodName      = "/manage.v1.LiveManageRpcService/GetIPGeolocation"
	LiveManageRpcService_BatchGetIPGeolocation_FullMethodName = "/manage.v1.LiveManageRpcService/BatchGetIPGeolocation"
	LiveManageRpcService_CheckIPRisk_FullMethodName           = "/manage.v1.LiveManageRpcService/CheckIPRisk"
	LiveManageRpcService_BatchCheckIPRisk_FullMethodName      = "/manage.v1.LiveManageRpcService/BatchCheckIPRisk"
	LiveManageRpcService_GetIPStatsByCountry_FullMethodName   = "/manage.v1.LiveManageRpcService/GetIPStatsByCountry"
)

// LiveManageRpcServiceClient is the client API for LiveManageRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveManageRpcServiceClient interface {
	// 获取法定货币信息
	GetLegalTenderInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*CurrencyDetailReplyList, error)
	// 通过货币ID获取货币信息
	GetCurrInfoById(ctx context.Context, in *GetCurrInfoByIDReq, opts ...grpc.CallOption) (*CurrencyDetailReply, error)
	// =============== IP相关接口 ===============
	// 获取单个IP地理位置信息
	GetIPGeolocation(ctx context.Context, in *GetIPGeolocationReq, opts ...grpc.CallOption) (*GetIPGeolocationReply, error)
	// 批量获取IP地理位置信息
	BatchGetIPGeolocation(ctx context.Context, in *BatchGetIPGeolocationReq, opts ...grpc.CallOption) (*BatchGetIPGeolocationReply, error)
	// 检查单个IP风险
	CheckIPRisk(ctx context.Context, in *CheckIPRiskReq, opts ...grpc.CallOption) (*CheckIPRiskReply, error)
	// 批量检查IP风险
	BatchCheckIPRisk(ctx context.Context, in *BatchCheckIPRiskReq, opts ...grpc.CallOption) (*BatchCheckIPRiskReply, error)
	// 根据国家获取IP统计信息
	GetIPStatsByCountry(ctx context.Context, in *GetIPStatsByCountryReq, opts ...grpc.CallOption) (*GetIPStatsByCountryReply, error)
}

type liveManageRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveManageRpcServiceClient(cc grpc.ClientConnInterface) LiveManageRpcServiceClient {
	return &liveManageRpcServiceClient{cc}
}

func (c *liveManageRpcServiceClient) GetLegalTenderInfo(ctx context.Context, in *ManageReq, opts ...grpc.CallOption) (*CurrencyDetailReplyList, error) {
	out := new(CurrencyDetailReplyList)
	err := c.cc.Invoke(ctx, LiveManageRpcService_GetLegalTenderInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) GetCurrInfoById(ctx context.Context, in *GetCurrInfoByIDReq, opts ...grpc.CallOption) (*CurrencyDetailReply, error) {
	out := new(CurrencyDetailReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_GetCurrInfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) GetIPGeolocation(ctx context.Context, in *GetIPGeolocationReq, opts ...grpc.CallOption) (*GetIPGeolocationReply, error) {
	out := new(GetIPGeolocationReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_GetIPGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) BatchGetIPGeolocation(ctx context.Context, in *BatchGetIPGeolocationReq, opts ...grpc.CallOption) (*BatchGetIPGeolocationReply, error) {
	out := new(BatchGetIPGeolocationReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_BatchGetIPGeolocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) CheckIPRisk(ctx context.Context, in *CheckIPRiskReq, opts ...grpc.CallOption) (*CheckIPRiskReply, error) {
	out := new(CheckIPRiskReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_CheckIPRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) BatchCheckIPRisk(ctx context.Context, in *BatchCheckIPRiskReq, opts ...grpc.CallOption) (*BatchCheckIPRiskReply, error) {
	out := new(BatchCheckIPRiskReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_BatchCheckIPRisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveManageRpcServiceClient) GetIPStatsByCountry(ctx context.Context, in *GetIPStatsByCountryReq, opts ...grpc.CallOption) (*GetIPStatsByCountryReply, error) {
	out := new(GetIPStatsByCountryReply)
	err := c.cc.Invoke(ctx, LiveManageRpcService_GetIPStatsByCountry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveManageRpcServiceServer is the server API for LiveManageRpcService service.
// All implementations must embed UnimplementedLiveManageRpcServiceServer
// for forward compatibility
type LiveManageRpcServiceServer interface {
	// 获取法定货币信息
	GetLegalTenderInfo(context.Context, *ManageReq) (*CurrencyDetailReplyList, error)
	// 通过货币ID获取货币信息
	GetCurrInfoById(context.Context, *GetCurrInfoByIDReq) (*CurrencyDetailReply, error)
	// =============== IP相关接口 ===============
	// 获取单个IP地理位置信息
	GetIPGeolocation(context.Context, *GetIPGeolocationReq) (*GetIPGeolocationReply, error)
	// 批量获取IP地理位置信息
	BatchGetIPGeolocation(context.Context, *BatchGetIPGeolocationReq) (*BatchGetIPGeolocationReply, error)
	// 检查单个IP风险
	CheckIPRisk(context.Context, *CheckIPRiskReq) (*CheckIPRiskReply, error)
	// 批量检查IP风险
	BatchCheckIPRisk(context.Context, *BatchCheckIPRiskReq) (*BatchCheckIPRiskReply, error)
	// 根据国家获取IP统计信息
	GetIPStatsByCountry(context.Context, *GetIPStatsByCountryReq) (*GetIPStatsByCountryReply, error)
	mustEmbedUnimplementedLiveManageRpcServiceServer()
}

// UnimplementedLiveManageRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveManageRpcServiceServer struct {
}

func (UnimplementedLiveManageRpcServiceServer) GetLegalTenderInfo(context.Context, *ManageReq) (*CurrencyDetailReplyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalTenderInfo not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) GetCurrInfoById(context.Context, *GetCurrInfoByIDReq) (*CurrencyDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrInfoById not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) GetIPGeolocation(context.Context, *GetIPGeolocationReq) (*GetIPGeolocationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPGeolocation not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) BatchGetIPGeolocation(context.Context, *BatchGetIPGeolocationReq) (*BatchGetIPGeolocationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetIPGeolocation not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) CheckIPRisk(context.Context, *CheckIPRiskReq) (*CheckIPRiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIPRisk not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) BatchCheckIPRisk(context.Context, *BatchCheckIPRiskReq) (*BatchCheckIPRiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckIPRisk not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) GetIPStatsByCountry(context.Context, *GetIPStatsByCountryReq) (*GetIPStatsByCountryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPStatsByCountry not implemented")
}
func (UnimplementedLiveManageRpcServiceServer) mustEmbedUnimplementedLiveManageRpcServiceServer() {}

// UnsafeLiveManageRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveManageRpcServiceServer will
// result in compilation errors.
type UnsafeLiveManageRpcServiceServer interface {
	mustEmbedUnimplementedLiveManageRpcServiceServer()
}

func RegisterLiveManageRpcServiceServer(s grpc.ServiceRegistrar, srv LiveManageRpcServiceServer) {
	s.RegisterService(&LiveManageRpcService_ServiceDesc, srv)
}

func _LiveManageRpcService_GetLegalTenderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).GetLegalTenderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_GetLegalTenderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).GetLegalTenderInfo(ctx, req.(*ManageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_GetCurrInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrInfoByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).GetCurrInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_GetCurrInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).GetCurrInfoById(ctx, req.(*GetCurrInfoByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_GetIPGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPGeolocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).GetIPGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_GetIPGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).GetIPGeolocation(ctx, req.(*GetIPGeolocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_BatchGetIPGeolocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetIPGeolocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).BatchGetIPGeolocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_BatchGetIPGeolocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).BatchGetIPGeolocation(ctx, req.(*BatchGetIPGeolocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_CheckIPRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIPRiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).CheckIPRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_CheckIPRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).CheckIPRisk(ctx, req.(*CheckIPRiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_BatchCheckIPRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckIPRiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).BatchCheckIPRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_BatchCheckIPRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).BatchCheckIPRisk(ctx, req.(*BatchCheckIPRiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveManageRpcService_GetIPStatsByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPStatsByCountryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveManageRpcServiceServer).GetIPStatsByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveManageRpcService_GetIPStatsByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveManageRpcServiceServer).GetIPStatsByCountry(ctx, req.(*GetIPStatsByCountryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveManageRpcService_ServiceDesc is the grpc.ServiceDesc for LiveManageRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveManageRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.v1.LiveManageRpcService",
	HandlerType: (*LiveManageRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLegalTenderInfo",
			Handler:    _LiveManageRpcService_GetLegalTenderInfo_Handler,
		},
		{
			MethodName: "GetCurrInfoById",
			Handler:    _LiveManageRpcService_GetCurrInfoById_Handler,
		},
		{
			MethodName: "GetIPGeolocation",
			Handler:    _LiveManageRpcService_GetIPGeolocation_Handler,
		},
		{
			MethodName: "BatchGetIPGeolocation",
			Handler:    _LiveManageRpcService_BatchGetIPGeolocation_Handler,
		},
		{
			MethodName: "CheckIPRisk",
			Handler:    _LiveManageRpcService_CheckIPRisk_Handler,
		},
		{
			MethodName: "BatchCheckIPRisk",
			Handler:    _LiveManageRpcService_BatchCheckIPRisk_Handler,
		},
		{
			MethodName: "GetIPStatsByCountry",
			Handler:    _LiveManageRpcService_GetIPStatsByCountry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage/v1/manage.proto",
}
