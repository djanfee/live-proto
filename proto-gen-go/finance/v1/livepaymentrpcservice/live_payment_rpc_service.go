// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: finance.proto

package livepaymentrpcservice

import (
	"context"

	"github.com/hanyougame/live-proto/proto-gen-go/finance/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAudit                      = v1.AddAudit
	AddAuditReq                   = v1.AddAuditReq
	AddAuditResp                  = v1.AddAuditResp
	AddWithdrawLimitReq           = v1.AddWithdrawLimitReq
	AddWithdrawLimitResp          = v1.AddWithdrawLimitResp
	AuditInfo                     = v1.AuditInfo
	BalanceReq                    = v1.BalanceReq
	BalanceResp                   = v1.BalanceResp
	BatchAddAuditReq              = v1.BatchAddAuditReq
	BatchAddAuditResp             = v1.BatchAddAuditResp
	ExchangeRateReq               = v1.ExchangeRateReq
	ExchangeRateResp              = v1.ExchangeRateResp
	GetAuditInfoReq               = v1.GetAuditInfoReq
	GetAuditInfoResp              = v1.GetAuditInfoResp
	GetAuditListReq               = v1.GetAuditListReq
	GetAuditListResp              = v1.GetAuditListResp
	PayInReq                      = v1.PayInReq
	PayInResp                     = v1.PayInResp
	PayInStatusReq                = v1.PayInStatusReq
	PayInStatusResp               = v1.PayInStatusResp
	PayOutReq                     = v1.PayOutReq
	PayOutResp                    = v1.PayOutResp
	PayOutStatusReq               = v1.PayOutStatusReq
	PayOutStatusResp              = v1.PayOutStatusResp
	RechargeReq                   = v1.RechargeReq
	RechargeResp                  = v1.RechargeResp
	UpdateAuditAmountReq          = v1.UpdateAuditAmountReq
	UpdateAuditAmountResp         = v1.UpdateAuditAmountResp
	UpdateWithdrawLimitAmountReq  = v1.UpdateWithdrawLimitAmountReq
	UpdateWithdrawLimitAmountResp = v1.UpdateWithdrawLimitAmountResp
	WithdrawReq                   = v1.WithdrawReq
	WithdrawResp                  = v1.WithdrawResp

	LivePaymentRpcService interface {
		PayIn(ctx context.Context, in *PayInReq, opts ...grpc.CallOption) (*PayInResp, error)
		PayOut(ctx context.Context, in *PayOutReq, opts ...grpc.CallOption) (*PayOutResp, error)
		PayInStatus(ctx context.Context, in *PayInStatusReq, opts ...grpc.CallOption) (*PayInStatusResp, error)
		PayOutStatus(ctx context.Context, in *PayOutStatusReq, opts ...grpc.CallOption) (*PayOutStatusResp, error)
		Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error)
		Recharge(ctx context.Context, in *RechargeReq, opts ...grpc.CallOption) (*RechargeResp, error)
		Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error)
	}

	defaultLivePaymentRpcService struct {
		cli zrpc.Client
	}
)

func NewLivePaymentRpcService(cli zrpc.Client) LivePaymentRpcService {
	return &defaultLivePaymentRpcService{
		cli: cli,
	}
}

func (m *defaultLivePaymentRpcService) PayIn(ctx context.Context, in *PayInReq, opts ...grpc.CallOption) (*PayInResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.PayIn(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) PayOut(ctx context.Context, in *PayOutReq, opts ...grpc.CallOption) (*PayOutResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.PayOut(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) PayInStatus(ctx context.Context, in *PayInStatusReq, opts ...grpc.CallOption) (*PayInStatusResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.PayInStatus(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) PayOutStatus(ctx context.Context, in *PayOutStatusReq, opts ...grpc.CallOption) (*PayOutStatusResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.PayOutStatus(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) Balance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.Balance(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) Recharge(ctx context.Context, in *RechargeReq, opts ...grpc.CallOption) (*RechargeResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.Recharge(ctx, in, opts...)
}

func (m *defaultLivePaymentRpcService) Withdraw(ctx context.Context, in *WithdrawReq, opts ...grpc.CallOption) (*WithdrawResp, error) {
	client := v1.NewLivePaymentRpcServiceClient(m.cli.Conn())
	return client.Withdraw(ctx, in, opts...)
}
