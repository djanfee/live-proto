// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: activity/v1/activity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveActivityInnerService_RedPacketCampaignEvent_FullMethodName = "/activity.v1.LiveActivityInnerService/RedPacketCampaignEvent"
)

// LiveActivityInnerServiceClient is the client API for LiveActivityInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveActivityInnerServiceClient interface {
	// 抢红包活动事件
	RedPacketCampaignEvent(ctx context.Context, in *RedPacketCampaignEventReq, opts ...grpc.CallOption) (*ActivityReply, error)
}

type liveActivityInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveActivityInnerServiceClient(cc grpc.ClientConnInterface) LiveActivityInnerServiceClient {
	return &liveActivityInnerServiceClient{cc}
}

func (c *liveActivityInnerServiceClient) RedPacketCampaignEvent(ctx context.Context, in *RedPacketCampaignEventReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivityReply)
	err := c.cc.Invoke(ctx, LiveActivityInnerService_RedPacketCampaignEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveActivityInnerServiceServer is the server API for LiveActivityInnerService service.
// All implementations must embed UnimplementedLiveActivityInnerServiceServer
// for forward compatibility.
type LiveActivityInnerServiceServer interface {
	// 抢红包活动事件
	RedPacketCampaignEvent(context.Context, *RedPacketCampaignEventReq) (*ActivityReply, error)
	mustEmbedUnimplementedLiveActivityInnerServiceServer()
}

// UnimplementedLiveActivityInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveActivityInnerServiceServer struct{}

func (UnimplementedLiveActivityInnerServiceServer) RedPacketCampaignEvent(context.Context, *RedPacketCampaignEventReq) (*ActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketCampaignEvent not implemented")
}
func (UnimplementedLiveActivityInnerServiceServer) mustEmbedUnimplementedLiveActivityInnerServiceServer() {
}
func (UnimplementedLiveActivityInnerServiceServer) testEmbeddedByValue() {}

// UnsafeLiveActivityInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveActivityInnerServiceServer will
// result in compilation errors.
type UnsafeLiveActivityInnerServiceServer interface {
	mustEmbedUnimplementedLiveActivityInnerServiceServer()
}

func RegisterLiveActivityInnerServiceServer(s grpc.ServiceRegistrar, srv LiveActivityInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveActivityInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveActivityInnerService_ServiceDesc, srv)
}

func _LiveActivityInnerService_RedPacketCampaignEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketCampaignEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveActivityInnerServiceServer).RedPacketCampaignEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveActivityInnerService_RedPacketCampaignEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveActivityInnerServiceServer).RedPacketCampaignEvent(ctx, req.(*RedPacketCampaignEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveActivityInnerService_ServiceDesc is the grpc.ServiceDesc for LiveActivityInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveActivityInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.v1.LiveActivityInnerService",
	HandlerType: (*LiveActivityInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RedPacketCampaignEvent",
			Handler:    _LiveActivityInnerService_RedPacketCampaignEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/v1/activity.proto",
}
