// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.3
// source: activity/v1/activity.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN  EventType = 0
	EventType_BET      EventType = 1 // 打码
	EventType_RECHARGE EventType = 2 // 充值
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "UNKNOWN",
		1: "BET",
		2: "RECHARGE",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":  0,
		"BET":      1,
		"RECHARGE": 2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_activity_v1_activity_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_activity_v1_activity_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{0}
}

// 新增 SpinType 枚举
type SpinType int32

const (
	SpinType_SPIN_TYPE_UNKNOWN SpinType = 0
	SpinType_SPIN_TYPE_SILVER  SpinType = 1 // 白银转盘
	SpinType_SPIN_TYPE_GOLD    SpinType = 2 // 黄金转盘
	SpinType_SPIN_TYPE_DIAMOND SpinType = 3 // 钻石转盘
)

// Enum value maps for SpinType.
var (
	SpinType_name = map[int32]string{
		0: "SPIN_TYPE_UNKNOWN",
		1: "SPIN_TYPE_SILVER",
		2: "SPIN_TYPE_GOLD",
		3: "SPIN_TYPE_DIAMOND",
	}
	SpinType_value = map[string]int32{
		"SPIN_TYPE_UNKNOWN": 0,
		"SPIN_TYPE_SILVER":  1,
		"SPIN_TYPE_GOLD":    2,
		"SPIN_TYPE_DIAMOND": 3,
	}
)

func (x SpinType) Enum() *SpinType {
	p := new(SpinType)
	*p = x
	return p
}

func (x SpinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpinType) Descriptor() protoreflect.EnumDescriptor {
	return file_activity_v1_activity_proto_enumTypes[1].Descriptor()
}

func (SpinType) Type() protoreflect.EnumType {
	return &file_activity_v1_activity_proto_enumTypes[1]
}

func (x SpinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpinType.Descriptor instead.
func (SpinType) EnumDescriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{1}
}

type ActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivityReq) Reset() {
	*x = ActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReq) ProtoMessage() {}

func (x *ActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReq.ProtoReflect.Descriptor instead.
func (*ActivityReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{0}
}

type ActivityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivityReply) Reset() {
	*x = ActivityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReply) ProtoMessage() {}

func (x *ActivityReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReply.ProtoReflect.Descriptor instead.
func (*ActivityReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{1}
}

type RewardListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RewardData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // 奖励数据列表
}

func (x *RewardListReply) Reset() {
	*x = RewardListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardListReply) ProtoMessage() {}

func (x *RewardListReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardListReply.ProtoReflect.Descriptor instead.
func (*RewardListReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{2}
}

func (x *RewardListReply) GetData() []*RewardData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RewardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                  // 用户id
	Reward     int32    `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`                                               // 奖励金额
	RewardTime int32    `protobuf:"varint,3,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"`                     // 奖励时间
	SpinType   SpinType `protobuf:"varint,4,opt,name=spin_type,json=spinType,proto3,enum=activity.v1.SpinType" json:"spin_type,omitempty"` // 转盘类型
}

func (x *RewardData) Reset() {
	*x = RewardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardData) ProtoMessage() {}

func (x *RewardData) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardData.ProtoReflect.Descriptor instead.
func (*RewardData) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{3}
}

func (x *RewardData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RewardData) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *RewardData) GetRewardTime() int32 {
	if x != nil {
		return x.RewardTime
	}
	return 0
}

func (x *RewardData) GetSpinType() SpinType {
	if x != nil {
		return x.SpinType
	}
	return SpinType_SPIN_TYPE_UNKNOWN
}

type GetLuckyPointListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	ActivityId int64 `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
}

func (x *GetLuckyPointListReq) Reset() {
	*x = GetLuckyPointListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLuckyPointListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointListReq) ProtoMessage() {}

func (x *GetLuckyPointListReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointListReq.ProtoReflect.Descriptor instead.
func (*GetLuckyPointListReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{4}
}

func (x *GetLuckyPointListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetLuckyPointListReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type RewardListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActivityId int64 `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
}

func (x *RewardListReq) Reset() {
	*x = RewardListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardListReq) ProtoMessage() {}

func (x *RewardListReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardListReq.ProtoReflect.Descriptor instead.
func (*RewardListReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{5}
}

func (x *RewardListReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type LuckyPointsUsedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpinType    SpinType          `protobuf:"varint,1,opt,name=spin_type,json=spinType,proto3,enum=activity.v1.SpinType" json:"spin_type,omitempty"`                                          // 转盘类型
	UsedList    []*UseLuckyPoint  `protobuf:"bytes,2,rep,name=UsedList,proto3" json:"UsedList,omitempty"`                                                                                     // 使用的幸运值列表
	UserId      int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                          // 用户id
	CreateAt    int32             `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                                    // 创建时间
	Detail      map[string]string `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	UserName    string            `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                                                     // 用户名
	PointBefore int64             `protobuf:"varint,7,opt,name=point_before,json=pointBefore,proto3" json:"point_before,omitempty"`                                                           // 领取前的幸运值
	PointAfter  int64             `protobuf:"varint,8,opt,name=point_after,json=pointAfter,proto3" json:"point_after,omitempty"`                                                              // 领取后的幸运值
	Point       int32             `protobuf:"varint,9,opt,name=point,proto3" json:"point,omitempty"`                                                                                          // 幸运值
}

func (x *LuckyPointsUsedItem) Reset() {
	*x = LuckyPointsUsedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyPointsUsedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsUsedItem) ProtoMessage() {}

func (x *LuckyPointsUsedItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsUsedItem.ProtoReflect.Descriptor instead.
func (*LuckyPointsUsedItem) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{6}
}

func (x *LuckyPointsUsedItem) GetSpinType() SpinType {
	if x != nil {
		return x.SpinType
	}
	return SpinType_SPIN_TYPE_UNKNOWN
}

func (x *LuckyPointsUsedItem) GetUsedList() []*UseLuckyPoint {
	if x != nil {
		return x.UsedList
	}
	return nil
}

func (x *LuckyPointsUsedItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckyPointsUsedItem) GetCreateAt() int32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *LuckyPointsUsedItem) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *LuckyPointsUsedItem) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LuckyPointsUsedItem) GetPointBefore() int64 {
	if x != nil {
		return x.PointBefore
	}
	return 0
}

func (x *LuckyPointsUsedItem) GetPointAfter() int64 {
	if x != nil {
		return x.PointAfter
	}
	return 0
}

func (x *LuckyPointsUsedItem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type LuckyPointsUsedListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LuckyPointsUsedItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LuckyPointsUsedListReply) Reset() {
	*x = LuckyPointsUsedListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyPointsUsedListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsUsedListReply) ProtoMessage() {}

func (x *LuckyPointsUsedListReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsUsedListReply.ProtoReflect.Descriptor instead.
func (*LuckyPointsUsedListReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{7}
}

func (x *LuckyPointsUsedListReply) GetData() []*LuckyPointsUsedItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type LuckyPointsAddItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                          // 用户id
	Point       int32             `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`                                                                                          // 幸运值
	CreateAt    int32             `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                                    // 创建时间
	ClaimId     int32             `protobuf:"varint,4,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`                                                                       // 领取id
	Detail      map[string]string `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	UserName    string            `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                                                     // 用户名
	PointBefore int64             `protobuf:"varint,7,opt,name=point_before,json=pointBefore,proto3" json:"point_before,omitempty"`                                                           // 领取前的幸运值
	PointAfter  int64             `protobuf:"varint,8,opt,name=point_after,json=pointAfter,proto3" json:"point_after,omitempty"`                                                              // 领取后的幸运值
	Condition   string            `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition,omitempty"`                                                                                   // 条件
}

func (x *LuckyPointsAddItem) Reset() {
	*x = LuckyPointsAddItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyPointsAddItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsAddItem) ProtoMessage() {}

func (x *LuckyPointsAddItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsAddItem.ProtoReflect.Descriptor instead.
func (*LuckyPointsAddItem) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{8}
}

func (x *LuckyPointsAddItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckyPointsAddItem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *LuckyPointsAddItem) GetCreateAt() int32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *LuckyPointsAddItem) GetClaimId() int32 {
	if x != nil {
		return x.ClaimId
	}
	return 0
}

func (x *LuckyPointsAddItem) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *LuckyPointsAddItem) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LuckyPointsAddItem) GetPointBefore() int64 {
	if x != nil {
		return x.PointBefore
	}
	return 0
}

func (x *LuckyPointsAddItem) GetPointAfter() int64 {
	if x != nil {
		return x.PointAfter
	}
	return 0
}

func (x *LuckyPointsAddItem) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type LuckyPointsAddListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LuckyPointsAddItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *LuckyPointsAddListReply) Reset() {
	*x = LuckyPointsAddListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckyPointsAddListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsAddListReply) ProtoMessage() {}

func (x *LuckyPointsAddListReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsAddListReply.ProtoReflect.Descriptor instead.
func (*LuckyPointsAddListReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{9}
}

func (x *LuckyPointsAddListReply) GetData() []*LuckyPointsAddItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type UseLuckyPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimId int32 `protobuf:"varint,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"` // 领取id
	Point   int32 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`                    // 幸运值
}

func (x *UseLuckyPoint) Reset() {
	*x = UseLuckyPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseLuckyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLuckyPoint) ProtoMessage() {}

func (x *UseLuckyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLuckyPoint.ProtoReflect.Descriptor instead.
func (*UseLuckyPoint) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{10}
}

func (x *UseLuckyPoint) GetClaimId() int32 {
	if x != nil {
		return x.ClaimId
	}
	return 0
}

func (x *UseLuckyPoint) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type UseLuckyPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                          // 用户id
	ActivityId int64             `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                                                              // 活动id
	Reward     int32             `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`                                                                                        // 奖励金额
	Point      int32             `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`                                                                                          // 消耗的总幸运值
	SpinType   SpinType          `protobuf:"varint,5,opt,name=spin_type,json=spinType,proto3,enum=activity.v1.SpinType" json:"spin_type,omitempty"`                                          // 转盘类型
	Detail     map[string]string `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
}

func (x *UseLuckyPointReq) Reset() {
	*x = UseLuckyPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseLuckyPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLuckyPointReq) ProtoMessage() {}

func (x *UseLuckyPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLuckyPointReq.ProtoReflect.Descriptor instead.
func (*UseLuckyPointReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{11}
}

func (x *UseLuckyPointReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UseLuckyPointReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *UseLuckyPointReq) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *UseLuckyPointReq) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *UseLuckyPointReq) GetSpinType() SpinType {
	if x != nil {
		return x.SpinType
	}
	return SpinType_SPIN_TYPE_UNKNOWN
}

func (x *UseLuckyPointReq) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetLuckyPointReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     []int64 `protobuf:"varint,1,rep,packed,name=user_id,json=userId,proto3" json:"user_id,omitempty"`      // 用户id
	ActivityId int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
}

func (x *GetLuckyPointReq) Reset() {
	*x = GetLuckyPointReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLuckyPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointReq) ProtoMessage() {}

func (x *GetLuckyPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointReq.ProtoReflect.Descriptor instead.
func (*GetLuckyPointReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{12}
}

func (x *GetLuckyPointReq) GetUserId() []int64 {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *GetLuckyPointReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type GetLuckyPointItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`             // 总幸运值
	ExpiredCount   int64 `protobuf:"varint,2,opt,name=expired_count,json=expiredCount,proto3" json:"expired_count,omitempty"`       // 过期幸运值
	AvailableCount int64 `protobuf:"varint,3,opt,name=available_count,json=availableCount,proto3" json:"available_count,omitempty"` // 可用幸运值
	UsedCount      int64 `protobuf:"varint,4,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`                // 已使用幸运值
	UserId         int64 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户id
}

func (x *GetLuckyPointItem) Reset() {
	*x = GetLuckyPointItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLuckyPointItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointItem) ProtoMessage() {}

func (x *GetLuckyPointItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointItem.ProtoReflect.Descriptor instead.
func (*GetLuckyPointItem) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{13}
}

func (x *GetLuckyPointItem) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetLuckyPointItem) GetExpiredCount() int64 {
	if x != nil {
		return x.ExpiredCount
	}
	return 0
}

func (x *GetLuckyPointItem) GetAvailableCount() int64 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *GetLuckyPointItem) GetUsedCount() int64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *GetLuckyPointItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetLuckyPointReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetLuckyPointItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // 用户幸运值列表
}

func (x *GetLuckyPointReply) Reset() {
	*x = GetLuckyPointReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLuckyPointReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointReply) ProtoMessage() {}

func (x *GetLuckyPointReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointReply.ProtoReflect.Descriptor instead.
func (*GetLuckyPointReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{14}
}

func (x *GetLuckyPointReply) GetData() []*GetLuckyPointItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddLuckyValReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	ActivityId int64  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	ExpireTime int32  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // // 过期时间
	Point      int32  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`                             // 幸运值
	Condition  string `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`                      // 条件
	EventType  string `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`     // 事件类型
	EventData  string `protobuf:"bytes,7,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`     // 事件数据
}

func (x *AddLuckyValReq) Reset() {
	*x = AddLuckyValReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLuckyValReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLuckyValReq) ProtoMessage() {}

func (x *AddLuckyValReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLuckyValReq.ProtoReflect.Descriptor instead.
func (*AddLuckyValReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{15}
}

func (x *AddLuckyValReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddLuckyValReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *AddLuckyValReq) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *AddLuckyValReq) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *AddLuckyValReq) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *AddLuckyValReq) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AddLuckyValReq) GetEventData() string {
	if x != nil {
		return x.EventData
	}
	return ""
}

type RedPacketCampaignEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
}

func (x *RedPacketCampaignEventReq) Reset() {
	*x = RedPacketCampaignEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedPacketCampaignEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketCampaignEventReq) ProtoMessage() {}

func (x *RedPacketCampaignEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketCampaignEventReq.ProtoReflect.Descriptor instead.
func (*RedPacketCampaignEventReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{16}
}

func (x *RedPacketCampaignEventReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LuckySpinEventReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type EventType `protobuf:"varint,1,opt,name=type,proto3,enum=activity.v1.EventType" json:"type,omitempty"`
	Data []byte    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 数据
}

func (x *LuckySpinEventReq) Reset() {
	*x = LuckySpinEventReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckySpinEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckySpinEventReq) ProtoMessage() {}

func (x *LuckySpinEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckySpinEventReq.ProtoReflect.Descriptor instead.
func (*LuckySpinEventReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{17}
}

func (x *LuckySpinEventReq) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *LuckySpinEventReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckUserRedPacketConditionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds     []int64 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`      // 用户id
	ActivityId  int64   `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`    // 活动id
	PeriodIndex int64   `protobuf:"varint,3,opt,name=period_index,json=periodIndex,proto3" json:"period_index,omitempty"` // 活动阶段
}

func (x *CheckUserRedPacketConditionReq) Reset() {
	*x = CheckUserRedPacketConditionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserRedPacketConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserRedPacketConditionReq) ProtoMessage() {}

func (x *CheckUserRedPacketConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserRedPacketConditionReq.ProtoReflect.Descriptor instead.
func (*CheckUserRedPacketConditionReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{18}
}

func (x *CheckUserRedPacketConditionReq) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *CheckUserRedPacketConditionReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *CheckUserRedPacketConditionReq) GetPeriodIndex() int64 {
	if x != nil {
		return x.PeriodIndex
	}
	return 0
}

type CheckUserRedPacketConditionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPacketConditions map[int64]bool `protobuf:"bytes,1,rep,name=user_packet_conditions,json=userPacketConditions,proto3" json:"user_packet_conditions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CheckUserRedPacketConditionReply) Reset() {
	*x = CheckUserRedPacketConditionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserRedPacketConditionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserRedPacketConditionReply) ProtoMessage() {}

func (x *CheckUserRedPacketConditionReply) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserRedPacketConditionReply.ProtoReflect.Descriptor instead.
func (*CheckUserRedPacketConditionReply) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{19}
}

func (x *CheckUserRedPacketConditionReply) GetUserPacketConditions() map[int64]bool {
	if x != nil {
		return x.UserPacketConditions
	}
	return nil
}

type IncreaseUserRedPacketCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActivityId  int64  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	PeriodIndex int64  `protobuf:"varint,3,opt,name=period_index,json=periodIndex,proto3" json:"period_index,omitempty"`
	CurrentDate string `protobuf:"bytes,4,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
}

func (x *IncreaseUserRedPacketCountReq) Reset() {
	*x = IncreaseUserRedPacketCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_v1_activity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseUserRedPacketCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseUserRedPacketCountReq) ProtoMessage() {}

func (x *IncreaseUserRedPacketCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_activity_v1_activity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseUserRedPacketCountReq.ProtoReflect.Descriptor instead.
func (*IncreaseUserRedPacketCountReq) Descriptor() ([]byte, []int) {
	return file_activity_v1_activity_proto_rawDescGZIP(), []int{20}
}

func (x *IncreaseUserRedPacketCountReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetPeriodIndex() int64 {
	if x != nil {
		return x.PeriodIndex
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

var File_activity_v1_activity_proto protoreflect.FileDescriptor

var file_activity_v1_activity_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x0a, 0x0f, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x70,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x22, 0x30, 0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xaf, 0x03, 0x0a, 0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x70,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x18, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x02, 0x0a, 0x12, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x17, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x4c, 0x75, 0x63,
	0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x70,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x56, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x11, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x70, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xea, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x2a, 0x2f, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x08, 0x53, 0x70, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x32, 0x9a, 0x07, 0x0a, 0x18, 0x4c, 0x69,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x79, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x2d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x64, 0x0a, 0x1a, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x70,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x53, 0x70, 0x69, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x56, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5d,
	0x0a, 0x12, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a,
	0x13, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46,
	0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x62, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_activity_v1_activity_proto_rawDescOnce sync.Once
	file_activity_v1_activity_proto_rawDescData = file_activity_v1_activity_proto_rawDesc
)

func file_activity_v1_activity_proto_rawDescGZIP() []byte {
	file_activity_v1_activity_proto_rawDescOnce.Do(func() {
		file_activity_v1_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_activity_v1_activity_proto_rawDescData)
	})
	return file_activity_v1_activity_proto_rawDescData
}

var file_activity_v1_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_activity_v1_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_activity_v1_activity_proto_goTypes = []interface{}{
	(EventType)(0),                           // 0: activity.v1.EventType
	(SpinType)(0),                            // 1: activity.v1.SpinType
	(*ActivityReq)(nil),                      // 2: activity.v1.ActivityReq
	(*ActivityReply)(nil),                    // 3: activity.v1.ActivityReply
	(*RewardListReply)(nil),                  // 4: activity.v1.RewardListReply
	(*RewardData)(nil),                       // 5: activity.v1.RewardData
	(*GetLuckyPointListReq)(nil),             // 6: activity.v1.GetLuckyPointListReq
	(*RewardListReq)(nil),                    // 7: activity.v1.RewardListReq
	(*LuckyPointsUsedItem)(nil),              // 8: activity.v1.LuckyPointsUsedItem
	(*LuckyPointsUsedListReply)(nil),         // 9: activity.v1.LuckyPointsUsedListReply
	(*LuckyPointsAddItem)(nil),               // 10: activity.v1.LuckyPointsAddItem
	(*LuckyPointsAddListReply)(nil),          // 11: activity.v1.LuckyPointsAddListReply
	(*UseLuckyPoint)(nil),                    // 12: activity.v1.UseLuckyPoint
	(*UseLuckyPointReq)(nil),                 // 13: activity.v1.UseLuckyPointReq
	(*GetLuckyPointReq)(nil),                 // 14: activity.v1.GetLuckyPointReq
	(*GetLuckyPointItem)(nil),                // 15: activity.v1.GetLuckyPointItem
	(*GetLuckyPointReply)(nil),               // 16: activity.v1.GetLuckyPointReply
	(*AddLuckyValReq)(nil),                   // 17: activity.v1.AddLuckyValReq
	(*RedPacketCampaignEventReq)(nil),        // 18: activity.v1.RedPacketCampaignEventReq
	(*LuckySpinEventReq)(nil),                // 19: activity.v1.LuckySpinEventReq
	(*CheckUserRedPacketConditionReq)(nil),   // 20: activity.v1.CheckUserRedPacketConditionReq
	(*CheckUserRedPacketConditionReply)(nil), // 21: activity.v1.CheckUserRedPacketConditionReply
	(*IncreaseUserRedPacketCountReq)(nil),    // 22: activity.v1.IncreaseUserRedPacketCountReq
	nil,                                      // 23: activity.v1.LuckyPointsUsedItem.DetailEntry
	nil,                                      // 24: activity.v1.LuckyPointsAddItem.DetailEntry
	nil,                                      // 25: activity.v1.UseLuckyPointReq.DetailEntry
	nil,                                      // 26: activity.v1.CheckUserRedPacketConditionReply.UserPacketConditionsEntry
}
var file_activity_v1_activity_proto_depIdxs = []int32{
	5,  // 0: activity.v1.RewardListReply.data:type_name -> activity.v1.RewardData
	1,  // 1: activity.v1.RewardData.spin_type:type_name -> activity.v1.SpinType
	1,  // 2: activity.v1.LuckyPointsUsedItem.spin_type:type_name -> activity.v1.SpinType
	12, // 3: activity.v1.LuckyPointsUsedItem.UsedList:type_name -> activity.v1.UseLuckyPoint
	23, // 4: activity.v1.LuckyPointsUsedItem.detail:type_name -> activity.v1.LuckyPointsUsedItem.DetailEntry
	8,  // 5: activity.v1.LuckyPointsUsedListReply.data:type_name -> activity.v1.LuckyPointsUsedItem
	24, // 6: activity.v1.LuckyPointsAddItem.detail:type_name -> activity.v1.LuckyPointsAddItem.DetailEntry
	10, // 7: activity.v1.LuckyPointsAddListReply.data:type_name -> activity.v1.LuckyPointsAddItem
	1,  // 8: activity.v1.UseLuckyPointReq.spin_type:type_name -> activity.v1.SpinType
	25, // 9: activity.v1.UseLuckyPointReq.detail:type_name -> activity.v1.UseLuckyPointReq.DetailEntry
	15, // 10: activity.v1.GetLuckyPointReply.data:type_name -> activity.v1.GetLuckyPointItem
	0,  // 11: activity.v1.LuckySpinEventReq.type:type_name -> activity.v1.EventType
	26, // 12: activity.v1.CheckUserRedPacketConditionReply.user_packet_conditions:type_name -> activity.v1.CheckUserRedPacketConditionReply.UserPacketConditionsEntry
	18, // 13: activity.v1.LiveActivityInnerService.RedPacketCampaignEvent:input_type -> activity.v1.RedPacketCampaignEventReq
	20, // 14: activity.v1.LiveActivityInnerService.CheckUserRedPacketCondition:input_type -> activity.v1.CheckUserRedPacketConditionReq
	22, // 15: activity.v1.LiveActivityInnerService.IncreaseUserRedPacketCount:input_type -> activity.v1.IncreaseUserRedPacketCountReq
	19, // 16: activity.v1.LiveActivityInnerService.LuckySpinEvent:input_type -> activity.v1.LuckySpinEventReq
	17, // 17: activity.v1.LiveActivityInnerService.AddLuckyPoint:input_type -> activity.v1.AddLuckyValReq
	13, // 18: activity.v1.LiveActivityInnerService.UseLuckyPoint:input_type -> activity.v1.UseLuckyPointReq
	14, // 19: activity.v1.LiveActivityInnerService.GetUserLuckyPoint:input_type -> activity.v1.GetLuckyPointReq
	6,  // 20: activity.v1.LiveActivityInnerService.LuckyPointsAddList:input_type -> activity.v1.GetLuckyPointListReq
	6,  // 21: activity.v1.LiveActivityInnerService.LuckyPointsUsedList:input_type -> activity.v1.GetLuckyPointListReq
	7,  // 22: activity.v1.LiveActivityInnerService.RewardList:input_type -> activity.v1.RewardListReq
	3,  // 23: activity.v1.LiveActivityInnerService.RedPacketCampaignEvent:output_type -> activity.v1.ActivityReply
	21, // 24: activity.v1.LiveActivityInnerService.CheckUserRedPacketCondition:output_type -> activity.v1.CheckUserRedPacketConditionReply
	3,  // 25: activity.v1.LiveActivityInnerService.IncreaseUserRedPacketCount:output_type -> activity.v1.ActivityReply
	3,  // 26: activity.v1.LiveActivityInnerService.LuckySpinEvent:output_type -> activity.v1.ActivityReply
	3,  // 27: activity.v1.LiveActivityInnerService.AddLuckyPoint:output_type -> activity.v1.ActivityReply
	3,  // 28: activity.v1.LiveActivityInnerService.UseLuckyPoint:output_type -> activity.v1.ActivityReply
	16, // 29: activity.v1.LiveActivityInnerService.GetUserLuckyPoint:output_type -> activity.v1.GetLuckyPointReply
	11, // 30: activity.v1.LiveActivityInnerService.LuckyPointsAddList:output_type -> activity.v1.LuckyPointsAddListReply
	9,  // 31: activity.v1.LiveActivityInnerService.LuckyPointsUsedList:output_type -> activity.v1.LuckyPointsUsedListReply
	4,  // 32: activity.v1.LiveActivityInnerService.RewardList:output_type -> activity.v1.RewardListReply
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_activity_v1_activity_proto_init() }
func file_activity_v1_activity_proto_init() {
	if File_activity_v1_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_activity_v1_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLuckyPointListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyPointsUsedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyPointsUsedListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyPointsAddItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckyPointsAddListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseLuckyPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseLuckyPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLuckyPointReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLuckyPointItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLuckyPointReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLuckyValReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedPacketCampaignEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckySpinEventReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserRedPacketConditionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserRedPacketConditionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_v1_activity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseUserRedPacketCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_activity_v1_activity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_activity_v1_activity_proto_goTypes,
		DependencyIndexes: file_activity_v1_activity_proto_depIdxs,
		EnumInfos:         file_activity_v1_activity_proto_enumTypes,
		MessageInfos:      file_activity_v1_activity_proto_msgTypes,
	}.Build()
	File_activity_v1_activity_proto = out.File
	file_activity_v1_activity_proto_rawDesc = nil
	file_activity_v1_activity_proto_goTypes = nil
	file_activity_v1_activity_proto_depIdxs = nil
}
