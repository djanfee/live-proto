// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: proto/activity/v1/activity.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_UNKNOWN  EventType = 0
	EventType_BET      EventType = 1 // 打码
	EventType_RECHARGE EventType = 2 // 充值
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "UNKNOWN",
		1: "BET",
		2: "RECHARGE",
	}
	EventType_value = map[string]int32{
		"UNKNOWN":  0,
		"BET":      1,
		"RECHARGE": 2,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_activity_v1_activity_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_proto_activity_v1_activity_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{0}
}

// 新增 SpinType 枚举
type SpinType int32

const (
	SpinType_SPIN_TYPE_UNKNOWN SpinType = 0
	SpinType_SPIN_TYPE_SILVER  SpinType = 1 // 白银转盘
	SpinType_SPIN_TYPE_GOLD    SpinType = 2 // 黄金转盘
	SpinType_SPIN_TYPE_DIAMOND SpinType = 3 // 钻石转盘
)

// Enum value maps for SpinType.
var (
	SpinType_name = map[int32]string{
		0: "SPIN_TYPE_UNKNOWN",
		1: "SPIN_TYPE_SILVER",
		2: "SPIN_TYPE_GOLD",
		3: "SPIN_TYPE_DIAMOND",
	}
	SpinType_value = map[string]int32{
		"SPIN_TYPE_UNKNOWN": 0,
		"SPIN_TYPE_SILVER":  1,
		"SPIN_TYPE_GOLD":    2,
		"SPIN_TYPE_DIAMOND": 3,
	}
)

func (x SpinType) Enum() *SpinType {
	p := new(SpinType)
	*p = x
	return p
}

func (x SpinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpinType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_activity_v1_activity_proto_enumTypes[1].Descriptor()
}

func (SpinType) Type() protoreflect.EnumType {
	return &file_proto_activity_v1_activity_proto_enumTypes[1]
}

func (x SpinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpinType.Descriptor instead.
func (SpinType) EnumDescriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{1}
}

type ActivityReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityReq) Reset() {
	*x = ActivityReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReq) ProtoMessage() {}

func (x *ActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReq.ProtoReflect.Descriptor instead.
func (*ActivityReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{0}
}

type ActivityReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityReply) Reset() {
	*x = ActivityReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReply) ProtoMessage() {}

func (x *ActivityReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReply.ProtoReflect.Descriptor instead.
func (*ActivityReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{1}
}

type RewardListReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*RewardData          `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // 奖励数据列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardListReply) Reset() {
	*x = RewardListReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardListReply) ProtoMessage() {}

func (x *RewardListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardListReply.ProtoReflect.Descriptor instead.
func (*RewardListReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{2}
}

func (x *RewardListReply) GetData() []*RewardData {
	if x != nil {
		return x.Data
	}
	return nil
}

type RewardData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	Reward        int32                  `protobuf:"varint,2,opt,name=reward,proto3" json:"reward,omitempty"`                           // 奖励金额
	RewardTime    int32                  `protobuf:"varint,3,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"` // 奖励时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardData) Reset() {
	*x = RewardData{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardData) ProtoMessage() {}

func (x *RewardData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardData.ProtoReflect.Descriptor instead.
func (*RewardData) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{3}
}

func (x *RewardData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RewardData) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *RewardData) GetRewardTime() int32 {
	if x != nil {
		return x.RewardTime
	}
	return 0
}

type RewardListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActivityId    int64                  `protobuf:"varint,1,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardListReq) Reset() {
	*x = RewardListReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardListReq) ProtoMessage() {}

func (x *RewardListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardListReq.ProtoReflect.Descriptor instead.
func (*RewardListReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{4}
}

func (x *RewardListReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type LuckyPointsUsedReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpinType      SpinType               `protobuf:"varint,1,opt,name=spin_type,json=spinType,proto3,enum=activity.v1.SpinType" json:"spin_type,omitempty"`                            // 转盘类型
	UsedList      []*UseLuckyPoint       `protobuf:"bytes,2,rep,name=UsedList,proto3" json:"UsedList,omitempty"`                                                                       // 使用的幸运值列表
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户id
	CreateAt      int32                  `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                      // 创建时间
	Detail        map[string]string      `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外信息
	UserName      string                 `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                                       // 用户名
	PointBefore   int64                  `protobuf:"varint,7,opt,name=point_before,json=pointBefore,proto3" json:"point_before,omitempty"`                                             // 领取前的幸运值
	PointAfter    int64                  `protobuf:"varint,8,opt,name=point_after,json=pointAfter,proto3" json:"point_after,omitempty"`                                                // 领取后的幸运值
	Point         int32                  `protobuf:"varint,9,opt,name=point,proto3" json:"point,omitempty"`                                                                            // 幸运值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyPointsUsedReply) Reset() {
	*x = LuckyPointsUsedReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyPointsUsedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsUsedReply) ProtoMessage() {}

func (x *LuckyPointsUsedReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsUsedReply.ProtoReflect.Descriptor instead.
func (*LuckyPointsUsedReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{5}
}

func (x *LuckyPointsUsedReply) GetSpinType() SpinType {
	if x != nil {
		return x.SpinType
	}
	return SpinType_SPIN_TYPE_UNKNOWN
}

func (x *LuckyPointsUsedReply) GetUsedList() []*UseLuckyPoint {
	if x != nil {
		return x.UsedList
	}
	return nil
}

func (x *LuckyPointsUsedReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckyPointsUsedReply) GetCreateAt() int32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *LuckyPointsUsedReply) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *LuckyPointsUsedReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LuckyPointsUsedReply) GetPointBefore() int64 {
	if x != nil {
		return x.PointBefore
	}
	return 0
}

func (x *LuckyPointsUsedReply) GetPointAfter() int64 {
	if x != nil {
		return x.PointAfter
	}
	return 0
}

func (x *LuckyPointsUsedReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type LuckyPointsAddListReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户id
	Point         int32                  `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`                                                                            // 幸运值
	CreateAt      int32                  `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                                                      // 创建时间
	ClaimId       int32                  `protobuf:"varint,4,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`                                                         // 领取id
	Detail        map[string]string      `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外信息
	UserName      string                 `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                                       // 用户名
	PointBefore   int64                  `protobuf:"varint,7,opt,name=point_before,json=pointBefore,proto3" json:"point_before,omitempty"`                                             // 领取前的幸运值
	PointAfter    int64                  `protobuf:"varint,8,opt,name=point_after,json=pointAfter,proto3" json:"point_after,omitempty"`                                                // 领取后的幸运值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyPointsAddListReply) Reset() {
	*x = LuckyPointsAddListReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyPointsAddListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyPointsAddListReply) ProtoMessage() {}

func (x *LuckyPointsAddListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyPointsAddListReply.ProtoReflect.Descriptor instead.
func (*LuckyPointsAddListReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{6}
}

func (x *LuckyPointsAddListReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckyPointsAddListReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *LuckyPointsAddListReply) GetCreateAt() int32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *LuckyPointsAddListReply) GetClaimId() int32 {
	if x != nil {
		return x.ClaimId
	}
	return 0
}

func (x *LuckyPointsAddListReply) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *LuckyPointsAddListReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *LuckyPointsAddListReply) GetPointBefore() int64 {
	if x != nil {
		return x.PointBefore
	}
	return 0
}

func (x *LuckyPointsAddListReply) GetPointAfter() int64 {
	if x != nil {
		return x.PointAfter
	}
	return 0
}

type UseLuckyPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClaimId       int32                  `protobuf:"varint,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"` // 领取id
	Point         int32                  `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`                    // 幸运值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseLuckyPoint) Reset() {
	*x = UseLuckyPoint{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseLuckyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLuckyPoint) ProtoMessage() {}

func (x *UseLuckyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLuckyPoint.ProtoReflect.Descriptor instead.
func (*UseLuckyPoint) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{7}
}

func (x *UseLuckyPoint) GetClaimId() int32 {
	if x != nil {
		return x.ClaimId
	}
	return 0
}

func (x *UseLuckyPoint) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type UseLuckyPointReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户id
	ActivityId    int64                  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`                                                // 活动id
	Reward        int32                  `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`                                                                          // // 奖励金额
	UsedList      []*UseLuckyPoint       `protobuf:"bytes,4,rep,name=UsedList,proto3" json:"UsedList,omitempty"`                                                                       // 使用的幸运值列表
	SpinType      SpinType               `protobuf:"varint,5,opt,name=spin_type,json=spinType,proto3,enum=activity.v1.SpinType" json:"spin_type,omitempty"`                            // 转盘类型
	Detail        map[string]string      `protobuf:"bytes,6,rep,name=detail,proto3" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseLuckyPointReq) Reset() {
	*x = UseLuckyPointReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseLuckyPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseLuckyPointReq) ProtoMessage() {}

func (x *UseLuckyPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseLuckyPointReq.ProtoReflect.Descriptor instead.
func (*UseLuckyPointReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{8}
}

func (x *UseLuckyPointReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UseLuckyPointReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *UseLuckyPointReq) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *UseLuckyPointReq) GetUsedList() []*UseLuckyPoint {
	if x != nil {
		return x.UsedList
	}
	return nil
}

func (x *UseLuckyPointReq) GetSpinType() SpinType {
	if x != nil {
		return x.SpinType
	}
	return SpinType_SPIN_TYPE_UNKNOWN
}

func (x *UseLuckyPointReq) GetDetail() map[string]string {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetLuckyPointReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	ActivityId    int64                  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLuckyPointReq) Reset() {
	*x = GetLuckyPointReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLuckyPointReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointReq) ProtoMessage() {}

func (x *GetLuckyPointReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointReq.ProtoReflect.Descriptor instead.
func (*GetLuckyPointReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{9}
}

func (x *GetLuckyPointReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetLuckyPointReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

type GetLuckyPointReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TotalCount     int64                  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`             // 总幸运值
	ExpiredCount   int64                  `protobuf:"varint,2,opt,name=expired_count,json=expiredCount,proto3" json:"expired_count,omitempty"`       // 过期幸运值
	AvailableCount int64                  `protobuf:"varint,3,opt,name=available_count,json=availableCount,proto3" json:"available_count,omitempty"` // 可用幸运值
	UsedCount      int64                  `protobuf:"varint,4,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`                // 已使用幸运值
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetLuckyPointReply) Reset() {
	*x = GetLuckyPointReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLuckyPointReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLuckyPointReply) ProtoMessage() {}

func (x *GetLuckyPointReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLuckyPointReply.ProtoReflect.Descriptor instead.
func (*GetLuckyPointReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{10}
}

func (x *GetLuckyPointReply) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetLuckyPointReply) GetExpiredCount() int64 {
	if x != nil {
		return x.ExpiredCount
	}
	return 0
}

func (x *GetLuckyPointReply) GetAvailableCount() int64 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

func (x *GetLuckyPointReply) GetUsedCount() int64 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

type AddLuckyValReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // 用户id
	ActivityId    int64                  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"` // 活动id
	ExpireTime    int32                  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // // 过期时间
	Point         int32                  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`                             // 幸运值
	Condition     string                 `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`                      // 条件
	EventType     string                 `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`     // 事件类型
	EventData     string                 `protobuf:"bytes,7,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`     // 事件数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddLuckyValReq) Reset() {
	*x = AddLuckyValReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddLuckyValReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLuckyValReq) ProtoMessage() {}

func (x *AddLuckyValReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLuckyValReq.ProtoReflect.Descriptor instead.
func (*AddLuckyValReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{11}
}

func (x *AddLuckyValReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddLuckyValReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *AddLuckyValReq) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *AddLuckyValReq) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *AddLuckyValReq) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *AddLuckyValReq) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AddLuckyValReq) GetEventData() string {
	if x != nil {
		return x.EventData
	}
	return ""
}

type RedPacketCampaignEventReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedPacketCampaignEventReq) Reset() {
	*x = RedPacketCampaignEventReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedPacketCampaignEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedPacketCampaignEventReq) ProtoMessage() {}

func (x *RedPacketCampaignEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedPacketCampaignEventReq.ProtoReflect.Descriptor instead.
func (*RedPacketCampaignEventReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{12}
}

func (x *RedPacketCampaignEventReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type LuckySpinEventReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=activity.v1.EventType" json:"type,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // 数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckySpinEventReq) Reset() {
	*x = LuckySpinEventReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckySpinEventReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckySpinEventReq) ProtoMessage() {}

func (x *LuckySpinEventReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckySpinEventReq.ProtoReflect.Descriptor instead.
func (*LuckySpinEventReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{13}
}

func (x *LuckySpinEventReq) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_UNKNOWN
}

func (x *LuckySpinEventReq) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckUserRedPacketConditionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []int64                `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`      // 用户id
	ActivityId    int64                  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`    // 活动id
	PeriodIndex   int64                  `protobuf:"varint,3,opt,name=period_index,json=periodIndex,proto3" json:"period_index,omitempty"` // 活动阶段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckUserRedPacketConditionReq) Reset() {
	*x = CheckUserRedPacketConditionReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckUserRedPacketConditionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserRedPacketConditionReq) ProtoMessage() {}

func (x *CheckUserRedPacketConditionReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserRedPacketConditionReq.ProtoReflect.Descriptor instead.
func (*CheckUserRedPacketConditionReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{14}
}

func (x *CheckUserRedPacketConditionReq) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *CheckUserRedPacketConditionReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *CheckUserRedPacketConditionReq) GetPeriodIndex() int64 {
	if x != nil {
		return x.PeriodIndex
	}
	return 0
}

type CheckUserRedPacketConditionReply struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserPacketConditions map[int64]bool         `protobuf:"bytes,1,rep,name=user_packet_conditions,json=userPacketConditions,proto3" json:"user_packet_conditions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CheckUserRedPacketConditionReply) Reset() {
	*x = CheckUserRedPacketConditionReply{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckUserRedPacketConditionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserRedPacketConditionReply) ProtoMessage() {}

func (x *CheckUserRedPacketConditionReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserRedPacketConditionReply.ProtoReflect.Descriptor instead.
func (*CheckUserRedPacketConditionReply) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{15}
}

func (x *CheckUserRedPacketConditionReply) GetUserPacketConditions() map[int64]bool {
	if x != nil {
		return x.UserPacketConditions
	}
	return nil
}

type IncreaseUserRedPacketCountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActivityId    int64                  `protobuf:"varint,2,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	PeriodIndex   int64                  `protobuf:"varint,3,opt,name=period_index,json=periodIndex,proto3" json:"period_index,omitempty"`
	CurrentDate   string                 `protobuf:"bytes,4,opt,name=current_date,json=currentDate,proto3" json:"current_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncreaseUserRedPacketCountReq) Reset() {
	*x = IncreaseUserRedPacketCountReq{}
	mi := &file_proto_activity_v1_activity_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncreaseUserRedPacketCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseUserRedPacketCountReq) ProtoMessage() {}

func (x *IncreaseUserRedPacketCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_activity_v1_activity_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseUserRedPacketCountReq.ProtoReflect.Descriptor instead.
func (*IncreaseUserRedPacketCountReq) Descriptor() ([]byte, []int) {
	return file_proto_activity_v1_activity_proto_rawDescGZIP(), []int{16}
}

func (x *IncreaseUserRedPacketCountReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetActivityId() int64 {
	if x != nil {
		return x.ActivityId
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetPeriodIndex() int64 {
	if x != nil {
		return x.PeriodIndex
	}
	return 0
}

func (x *IncreaseUserRedPacketCountReq) GetCurrentDate() string {
	if x != nil {
		return x.CurrentDate
	}
	return ""
}

var File_proto_activity_v1_activity_proto protoreflect.FileDescriptor

const file_proto_activity_v1_activity_proto_rawDesc = "" +
	"\n" +
	" proto/activity/v1/activity.proto\x12\vactivity.v1\"\r\n" +
	"\vActivityReq\"\x0f\n" +
	"\rActivityReply\">\n" +
	"\x0fRewardListReply\x12+\n" +
	"\x04data\x18\x01 \x03(\v2\x17.activity.v1.RewardDataR\x04data\"^\n" +
	"\n" +
	"RewardData\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06reward\x18\x02 \x01(\x05R\x06reward\x12\x1f\n" +
	"\vreward_time\x18\x03 \x01(\x05R\n" +
	"rewardTime\"0\n" +
	"\rRewardListReq\x12\x1f\n" +
	"\vactivity_id\x18\x01 \x01(\x03R\n" +
	"activityId\"\xb1\x03\n" +
	"\x14LuckyPointsUsedReply\x122\n" +
	"\tspin_type\x18\x01 \x01(\x0e2\x15.activity.v1.SpinTypeR\bspinType\x126\n" +
	"\bUsedList\x18\x02 \x03(\v2\x1a.activity.v1.UseLuckyPointR\bUsedList\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tcreate_at\x18\x04 \x01(\x05R\bcreateAt\x12E\n" +
	"\x06detail\x18\x05 \x03(\v2-.activity.v1.LuckyPointsUsedReply.DetailEntryR\x06detail\x12\x1b\n" +
	"\tuser_name\x18\x06 \x01(\tR\buserName\x12!\n" +
	"\fpoint_before\x18\a \x01(\x03R\vpointBefore\x12\x1f\n" +
	"\vpoint_after\x18\b \x01(\x03R\n" +
	"pointAfter\x12\x14\n" +
	"\x05point\x18\t \x01(\x05R\x05point\x1a9\n" +
	"\vDetailEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe6\x02\n" +
	"\x17LuckyPointsAddListReply\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x14\n" +
	"\x05point\x18\x02 \x01(\x05R\x05point\x12\x1b\n" +
	"\tcreate_at\x18\x03 \x01(\x05R\bcreateAt\x12\x19\n" +
	"\bclaim_id\x18\x04 \x01(\x05R\aclaimId\x12H\n" +
	"\x06detail\x18\x05 \x03(\v20.activity.v1.LuckyPointsAddListReply.DetailEntryR\x06detail\x12\x1b\n" +
	"\tuser_name\x18\x06 \x01(\tR\buserName\x12!\n" +
	"\fpoint_before\x18\a \x01(\x03R\vpointBefore\x12\x1f\n" +
	"\vpoint_after\x18\b \x01(\x03R\n" +
	"pointAfter\x1a9\n" +
	"\vDetailEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\rUseLuckyPoint\x12\x19\n" +
	"\bclaim_id\x18\x01 \x01(\x05R\aclaimId\x12\x14\n" +
	"\x05point\x18\x02 \x01(\x05R\x05point\"\xce\x02\n" +
	"\x10UseLuckyPointReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\x03R\n" +
	"activityId\x12\x16\n" +
	"\x06reward\x18\x03 \x01(\x05R\x06reward\x126\n" +
	"\bUsedList\x18\x04 \x03(\v2\x1a.activity.v1.UseLuckyPointR\bUsedList\x122\n" +
	"\tspin_type\x18\x05 \x01(\x0e2\x15.activity.v1.SpinTypeR\bspinType\x12A\n" +
	"\x06detail\x18\x06 \x03(\v2).activity.v1.UseLuckyPointReq.DetailEntryR\x06detail\x1a9\n" +
	"\vDetailEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"L\n" +
	"\x10GetLuckyPointReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\x03R\n" +
	"activityId\"\xa2\x01\n" +
	"\x12GetLuckyPointReply\x12\x1f\n" +
	"\vtotal_count\x18\x01 \x01(\x03R\n" +
	"totalCount\x12#\n" +
	"\rexpired_count\x18\x02 \x01(\x03R\fexpiredCount\x12'\n" +
	"\x0favailable_count\x18\x03 \x01(\x03R\x0eavailableCount\x12\x1d\n" +
	"\n" +
	"used_count\x18\x04 \x01(\x03R\tusedCount\"\xdd\x01\n" +
	"\x0eAddLuckyValReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\x03R\n" +
	"activityId\x12\x1f\n" +
	"\vexpire_time\x18\x03 \x01(\x05R\n" +
	"expireTime\x12\x14\n" +
	"\x05point\x18\x04 \x01(\x05R\x05point\x12\x1c\n" +
	"\tcondition\x18\x05 \x01(\tR\tcondition\x12\x1d\n" +
	"\n" +
	"event_type\x18\x06 \x01(\tR\teventType\x12\x1d\n" +
	"\n" +
	"event_data\x18\a \x01(\tR\teventData\"4\n" +
	"\x19RedPacketCampaignEventReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"S\n" +
	"\x11LuckySpinEventReq\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.activity.v1.EventTypeR\x04type\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"\x7f\n" +
	"\x1eCheckUserRedPacketConditionReq\x12\x19\n" +
	"\buser_ids\x18\x01 \x03(\x03R\auserIds\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\x03R\n" +
	"activityId\x12!\n" +
	"\fperiod_index\x18\x03 \x01(\x03R\vperiodIndex\"\xea\x01\n" +
	" CheckUserRedPacketConditionReply\x12}\n" +
	"\x16user_packet_conditions\x18\x01 \x03(\v2G.activity.v1.CheckUserRedPacketConditionReply.UserPacketConditionsEntryR\x14userPacketConditions\x1aG\n" +
	"\x19UserPacketConditionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x9f\x01\n" +
	"\x1dIncreaseUserRedPacketCountReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vactivity_id\x18\x02 \x01(\x03R\n" +
	"activityId\x12!\n" +
	"\fperiod_index\x18\x03 \x01(\x03R\vperiodIndex\x12!\n" +
	"\fcurrent_date\x18\x04 \x01(\tR\vcurrentDate*/\n" +
	"\tEventType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03BET\x10\x01\x12\f\n" +
	"\bRECHARGE\x10\x02*b\n" +
	"\bSpinType\x12\x15\n" +
	"\x11SPIN_TYPE_UNKNOWN\x10\x00\x12\x14\n" +
	"\x10SPIN_TYPE_SILVER\x10\x01\x12\x12\n" +
	"\x0eSPIN_TYPE_GOLD\x10\x02\x12\x15\n" +
	"\x11SPIN_TYPE_DIAMOND\x10\x032\x8e\a\n" +
	"\x18LiveActivityInnerService\x12\\\n" +
	"\x16RedPacketCampaignEvent\x12&.activity.v1.RedPacketCampaignEventReq\x1a\x1a.activity.v1.ActivityReply\x12y\n" +
	"\x1bCheckUserRedPacketCondition\x12+.activity.v1.CheckUserRedPacketConditionReq\x1a-.activity.v1.CheckUserRedPacketConditionReply\x12d\n" +
	"\x1aIncreaseUserRedPacketCount\x12*.activity.v1.IncreaseUserRedPacketCountReq\x1a\x1a.activity.v1.ActivityReply\x12L\n" +
	"\x0eLuckySpinEvent\x12\x1e.activity.v1.LuckySpinEventReq\x1a\x1a.activity.v1.ActivityReply\x12H\n" +
	"\rAddLuckyPoint\x12\x1b.activity.v1.AddLuckyValReq\x1a\x1a.activity.v1.ActivityReply\x12J\n" +
	"\rUseLuckyPoint\x12\x1d.activity.v1.UseLuckyPointReq\x1a\x1a.activity.v1.ActivityReply\x12S\n" +
	"\x11GetUserLuckyPoint\x12\x1d.activity.v1.GetLuckyPointReq\x1a\x1f.activity.v1.GetLuckyPointReply\x12Y\n" +
	"\x12LuckyPointsAddList\x12\x1d.activity.v1.GetLuckyPointReq\x1a$.activity.v1.LuckyPointsAddListReply\x12W\n" +
	"\x13LuckyPointsUsedList\x12\x1d.activity.v1.GetLuckyPointReq\x1a!.activity.v1.LuckyPointsUsedReply\x12F\n" +
	"\n" +
	"RewardList\x12\x1a.activity.v1.RewardListReq\x1a\x1c.activity.v1.RewardListReplyB\tZ\a./pb/v1b\x06proto3"

var (
	file_proto_activity_v1_activity_proto_rawDescOnce sync.Once
	file_proto_activity_v1_activity_proto_rawDescData []byte
)

func file_proto_activity_v1_activity_proto_rawDescGZIP() []byte {
	file_proto_activity_v1_activity_proto_rawDescOnce.Do(func() {
		file_proto_activity_v1_activity_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_activity_v1_activity_proto_rawDesc), len(file_proto_activity_v1_activity_proto_rawDesc)))
	})
	return file_proto_activity_v1_activity_proto_rawDescData
}

var file_proto_activity_v1_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_activity_v1_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_activity_v1_activity_proto_goTypes = []any{
	(EventType)(0),                           // 0: activity.v1.EventType
	(SpinType)(0),                            // 1: activity.v1.SpinType
	(*ActivityReq)(nil),                      // 2: activity.v1.ActivityReq
	(*ActivityReply)(nil),                    // 3: activity.v1.ActivityReply
	(*RewardListReply)(nil),                  // 4: activity.v1.RewardListReply
	(*RewardData)(nil),                       // 5: activity.v1.RewardData
	(*RewardListReq)(nil),                    // 6: activity.v1.RewardListReq
	(*LuckyPointsUsedReply)(nil),             // 7: activity.v1.LuckyPointsUsedReply
	(*LuckyPointsAddListReply)(nil),          // 8: activity.v1.LuckyPointsAddListReply
	(*UseLuckyPoint)(nil),                    // 9: activity.v1.UseLuckyPoint
	(*UseLuckyPointReq)(nil),                 // 10: activity.v1.UseLuckyPointReq
	(*GetLuckyPointReq)(nil),                 // 11: activity.v1.GetLuckyPointReq
	(*GetLuckyPointReply)(nil),               // 12: activity.v1.GetLuckyPointReply
	(*AddLuckyValReq)(nil),                   // 13: activity.v1.AddLuckyValReq
	(*RedPacketCampaignEventReq)(nil),        // 14: activity.v1.RedPacketCampaignEventReq
	(*LuckySpinEventReq)(nil),                // 15: activity.v1.LuckySpinEventReq
	(*CheckUserRedPacketConditionReq)(nil),   // 16: activity.v1.CheckUserRedPacketConditionReq
	(*CheckUserRedPacketConditionReply)(nil), // 17: activity.v1.CheckUserRedPacketConditionReply
	(*IncreaseUserRedPacketCountReq)(nil),    // 18: activity.v1.IncreaseUserRedPacketCountReq
	nil,                                      // 19: activity.v1.LuckyPointsUsedReply.DetailEntry
	nil,                                      // 20: activity.v1.LuckyPointsAddListReply.DetailEntry
	nil,                                      // 21: activity.v1.UseLuckyPointReq.DetailEntry
	nil,                                      // 22: activity.v1.CheckUserRedPacketConditionReply.UserPacketConditionsEntry
}
var file_proto_activity_v1_activity_proto_depIdxs = []int32{
	5,  // 0: activity.v1.RewardListReply.data:type_name -> activity.v1.RewardData
	1,  // 1: activity.v1.LuckyPointsUsedReply.spin_type:type_name -> activity.v1.SpinType
	9,  // 2: activity.v1.LuckyPointsUsedReply.UsedList:type_name -> activity.v1.UseLuckyPoint
	19, // 3: activity.v1.LuckyPointsUsedReply.detail:type_name -> activity.v1.LuckyPointsUsedReply.DetailEntry
	20, // 4: activity.v1.LuckyPointsAddListReply.detail:type_name -> activity.v1.LuckyPointsAddListReply.DetailEntry
	9,  // 5: activity.v1.UseLuckyPointReq.UsedList:type_name -> activity.v1.UseLuckyPoint
	1,  // 6: activity.v1.UseLuckyPointReq.spin_type:type_name -> activity.v1.SpinType
	21, // 7: activity.v1.UseLuckyPointReq.detail:type_name -> activity.v1.UseLuckyPointReq.DetailEntry
	0,  // 8: activity.v1.LuckySpinEventReq.type:type_name -> activity.v1.EventType
	22, // 9: activity.v1.CheckUserRedPacketConditionReply.user_packet_conditions:type_name -> activity.v1.CheckUserRedPacketConditionReply.UserPacketConditionsEntry
	14, // 10: activity.v1.LiveActivityInnerService.RedPacketCampaignEvent:input_type -> activity.v1.RedPacketCampaignEventReq
	16, // 11: activity.v1.LiveActivityInnerService.CheckUserRedPacketCondition:input_type -> activity.v1.CheckUserRedPacketConditionReq
	18, // 12: activity.v1.LiveActivityInnerService.IncreaseUserRedPacketCount:input_type -> activity.v1.IncreaseUserRedPacketCountReq
	15, // 13: activity.v1.LiveActivityInnerService.LuckySpinEvent:input_type -> activity.v1.LuckySpinEventReq
	13, // 14: activity.v1.LiveActivityInnerService.AddLuckyPoint:input_type -> activity.v1.AddLuckyValReq
	10, // 15: activity.v1.LiveActivityInnerService.UseLuckyPoint:input_type -> activity.v1.UseLuckyPointReq
	11, // 16: activity.v1.LiveActivityInnerService.GetUserLuckyPoint:input_type -> activity.v1.GetLuckyPointReq
	11, // 17: activity.v1.LiveActivityInnerService.LuckyPointsAddList:input_type -> activity.v1.GetLuckyPointReq
	11, // 18: activity.v1.LiveActivityInnerService.LuckyPointsUsedList:input_type -> activity.v1.GetLuckyPointReq
	6,  // 19: activity.v1.LiveActivityInnerService.RewardList:input_type -> activity.v1.RewardListReq
	3,  // 20: activity.v1.LiveActivityInnerService.RedPacketCampaignEvent:output_type -> activity.v1.ActivityReply
	17, // 21: activity.v1.LiveActivityInnerService.CheckUserRedPacketCondition:output_type -> activity.v1.CheckUserRedPacketConditionReply
	3,  // 22: activity.v1.LiveActivityInnerService.IncreaseUserRedPacketCount:output_type -> activity.v1.ActivityReply
	3,  // 23: activity.v1.LiveActivityInnerService.LuckySpinEvent:output_type -> activity.v1.ActivityReply
	3,  // 24: activity.v1.LiveActivityInnerService.AddLuckyPoint:output_type -> activity.v1.ActivityReply
	3,  // 25: activity.v1.LiveActivityInnerService.UseLuckyPoint:output_type -> activity.v1.ActivityReply
	12, // 26: activity.v1.LiveActivityInnerService.GetUserLuckyPoint:output_type -> activity.v1.GetLuckyPointReply
	8,  // 27: activity.v1.LiveActivityInnerService.LuckyPointsAddList:output_type -> activity.v1.LuckyPointsAddListReply
	7,  // 28: activity.v1.LiveActivityInnerService.LuckyPointsUsedList:output_type -> activity.v1.LuckyPointsUsedReply
	4,  // 29: activity.v1.LiveActivityInnerService.RewardList:output_type -> activity.v1.RewardListReply
	20, // [20:30] is the sub-list for method output_type
	10, // [10:20] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_activity_v1_activity_proto_init() }
func file_proto_activity_v1_activity_proto_init() {
	if File_proto_activity_v1_activity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_activity_v1_activity_proto_rawDesc), len(file_proto_activity_v1_activity_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_activity_v1_activity_proto_goTypes,
		DependencyIndexes: file_proto_activity_v1_activity_proto_depIdxs,
		EnumInfos:         file_proto_activity_v1_activity_proto_enumTypes,
		MessageInfos:      file_proto_activity_v1_activity_proto_msgTypes,
	}.Build()
	File_proto_activity_v1_activity_proto = out.File
	file_proto_activity_v1_activity_proto_goTypes = nil
	file_proto_activity_v1_activity_proto_depIdxs = nil
}
