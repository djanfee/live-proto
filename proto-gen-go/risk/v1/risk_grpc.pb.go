// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: risk/v1/risk.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LiveRiskInnerService_RiskTest_FullMethodName = "/risk.v1.LiveRiskInnerService/RiskTest"
)

// LiveRiskInnerServiceClient is the client API for LiveRiskInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveRiskInnerServiceClient interface {
	RiskTest(ctx context.Context, in *RiskReq, opts ...grpc.CallOption) (*RiskReply, error)
}

type liveRiskInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveRiskInnerServiceClient(cc grpc.ClientConnInterface) LiveRiskInnerServiceClient {
	return &liveRiskInnerServiceClient{cc}
}

func (c *liveRiskInnerServiceClient) RiskTest(ctx context.Context, in *RiskReq, opts ...grpc.CallOption) (*RiskReply, error) {
	out := new(RiskReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_RiskTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveRiskInnerServiceServer is the server API for LiveRiskInnerService service.
// All implementations must embed UnimplementedLiveRiskInnerServiceServer
// for forward compatibility
type LiveRiskInnerServiceServer interface {
	RiskTest(context.Context, *RiskReq) (*RiskReply, error)
	mustEmbedUnimplementedLiveRiskInnerServiceServer()
}

// UnimplementedLiveRiskInnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveRiskInnerServiceServer struct {
}

func (UnimplementedLiveRiskInnerServiceServer) RiskTest(context.Context, *RiskReq) (*RiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RiskTest not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) mustEmbedUnimplementedLiveRiskInnerServiceServer() {}

// UnsafeLiveRiskInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveRiskInnerServiceServer will
// result in compilation errors.
type UnsafeLiveRiskInnerServiceServer interface {
	mustEmbedUnimplementedLiveRiskInnerServiceServer()
}

func RegisterLiveRiskInnerServiceServer(s grpc.ServiceRegistrar, srv LiveRiskInnerServiceServer) {
	s.RegisterService(&LiveRiskInnerService_ServiceDesc, srv)
}

func _LiveRiskInnerService_RiskTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).RiskTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_RiskTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).RiskTest(ctx, req.(*RiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveRiskInnerService_ServiceDesc is the grpc.ServiceDesc for LiveRiskInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveRiskInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.v1.LiveRiskInnerService",
	HandlerType: (*LiveRiskInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RiskTest",
			Handler:    _LiveRiskInnerService_RiskTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "risk/v1/risk.proto",
}
