syntax = "proto3";

package risk.v1;
option go_package = "./pb/v1";


message RiskReq{

}
message RiskReply{

}

service LiveRiskInnerService{
  // NotifyRiskRuleTrigger 处理通知风控触发规则
  rpc NotifyRiskRuleTrigger(NotifyRiskRuleTriggerReq) returns (NotifyRiskRuleTriggerReply);
  // 获取用户风控名单标识
  rpc GetUserRiskList(GetUserRiskListReq) returns (GetUserRiskListReply);
  // 批量获取用户风控名单
  rpc BatchGetUserRiskList(BatchGetUserRiskListReq) returns (BatchGetUserRiskListReply);
  // 删除批量用户风控名单
  rpc BatchDelUserRiskList(BatchDelUserRiskListReq) returns (RiskReply);
  // 获取指定IP地址和设备号的用户使用数量
  rpc GetIpOrDeviceUserCount(IpOrDeviceUserCountReq) returns (IpOrDeviceUserCountReply);
}

message IpOrDeviceUserCountReq{
  repeated string ip_addresses = 1; // IP地址
  repeated string device_ids = 2; // 设备号
}

message IpOrDeviceUserCountReply{
  map <string, int64> ip_user_num = 2; // ip登录的用户数量
  map <string, int64> device_user_num = 3; // 设备号登录的用户数量
}


message NotifyRiskRuleTriggerReq{
  int64 user_id = 1; // 用户ID
  bool  is_need = 2; // 是够需要用户风控标识 false 不需要 true 需要
  string Extend = 3; // 扩展信息
}

message NotifyRiskRuleTriggerReply{
  RiskListType user_risk_list = 1;  // 用户名单类型
}


message GetUserRiskListReq{
  int64 user_id = 1;  // 用户ID
}

// 风控名单类型枚举
enum RiskListType {
  RISK_LIST_TYPE_UNSPECIFIED = 0;  // 未指定
  RISK_LIST_TYPE_NORMAL = 1;       // 普通用户
  RISK_LIST_TYPE_WHITE = 2;        // 白名单
  RISK_LIST_TYPE_GRAY = 3;         // 灰名单
  RISK_LIST_TYPE_BLACK = 4;        // 黑名单
}
message GetUserRiskListReply{
  RiskListType user_risk_list = 1;  // 用户名单类型
}


// 批量获取用户风控名单请求
message BatchGetUserRiskListReq {
  repeated int64 user_ids = 1;                     // 用户ID列表
}

// 批量获取用户风控名单响应
message BatchGetUserRiskListReply {
  map<int64, RiskListType> user_risk_lists = 1;  // 用户ID -> 风控名单信息
}

message BatchDelUserRiskListReq {
  repeated int64 ids = 1;
  repeated int64 user_ids = 2;
  string reason = 3;
  RiskListType risk_type = 4;  // 0 删除全部
  int64 operator_id = 5; // 操作人ID
  string operator = 6; // 操作人
}
