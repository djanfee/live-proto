syntax = "proto3";

package risk.v1;
option go_package = "./pb/v1";


message RiskReq{

}
message RiskReply{

}

service LiveRiskInnerService{
  // NotifyRiskRuleTrigger 处理通知风控触发规则
  rpc NotifyRiskRuleTrigger(NotifyRiskRuleTriggerReq) returns (RiskReply);
  // 获取用户风控名单标识
  rpc GetUserRiskList(GetUserRiskListReq) returns (GetUserRiskListReply);
  // 批量获取用户风控名单
  rpc BatchGetUserRiskList(BatchGetUserRiskListReq) returns (BatchGetUserRiskListReply);
  // 删除批量用户风控名单
  rpc BatchDelUserRiskList(BatchDelUserRiskListReq) returns (RiskReply);
  // 获取用户绑定上级风控
  rpc GetUserBindParentRisk(GetUserBindParentRiskReq) returns(GetUserBindParentRiskReply);
}

message GetUserBindParentRiskReq{
  int64 user_id = 1; // 用户ID
  string ip = 2; // IP地址
  string device_id = 3; // 设备号
  int64 limit_same_ip = 4; // 同IP数量上限（同IP登录的用户数量如果超过这个数量则不能绑定上级，0表示不限制）
  int64 limit_same_device = 5; // 同设备号数量上限（同设备号登录的用户数量如果超过这个数量则不能绑定上级，0表示不限制）
}

message GetUserBindParentRiskReply{
  bool result = 1; // 风控结果：true-风控，false-不风控
  int64 ip_login_user_total = 2; // ip登录的用户数量
  int64 device_id_login_user_total = 3; // 设备号登录的用户数量
}


message NotifyRiskRuleTriggerReq{
  int64 user_id = 1; // 用户ID
}

message GetUserRiskListReq{
  int64 user_id = 1;  // 用户ID
}

// 风控名单类型枚举
enum RiskListType {
  RISK_LIST_TYPE_UNSPECIFIED = 0;  // 未指定
  RISK_LIST_TYPE_NORMAL = 1;       // 普通用户
  RISK_LIST_TYPE_WHITE = 2;        // 白名单
  RISK_LIST_TYPE_GRAY = 3;         // 灰名单
  RISK_LIST_TYPE_BLACK = 4;        // 黑名单
}
message GetUserRiskListReply{
  RiskListType user_risk_list = 1;  // 用户名单类型
}


// 批量获取用户风控名单请求
message BatchGetUserRiskListReq {
  repeated int64 user_ids = 1;                     // 用户ID列表
}

// 批量获取用户风控名单响应
message BatchGetUserRiskListReply {
  map<int64, RiskListType> user_risk_lists = 1;  // 用户ID -> 风控名单信息
}

message BatchDelUserRiskListReq {
  repeated int64 ids = 1;
  repeated int64 user_ids = 2;
  string reason = 3;
  RiskListType risk_type = 4;  // 0 删除全部
}
